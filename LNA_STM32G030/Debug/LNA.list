
LNA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006928  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd4  08006bd4  0000805c  2**0
                  CONTENTS
  4 .ARM          00000000  08006bd4  08006bd4  0000805c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bd4  08006bd4  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd4  08006bd4  00007bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd8  08006bd8  00007bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006bdc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000005c  08006c38  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08006c38  0000840c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffce  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a51  00000000  00000000  00018052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0001aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e7  00000000  00000000  0001b7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017558  00000000  00000000  0001c187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012366  00000000  00000000  000336df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce09  00000000  00000000  00045a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d284e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b0  00000000  00000000  000d2894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d5a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080069c8 	.word	0x080069c8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	080069c8 	.word	0x080069c8

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <eeprom_1byte_read>:
	data |= EEPROM_Read(address);

	return data;
}
*/
uint8_t eeprom_1byte_read(uint8_t eaddress) {
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	0002      	movs	r2, r0
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	701a      	strb	r2, [r3, #0]
	char  buff[2];
	buff[0] = eaddress;
 800040c:	240c      	movs	r4, #12
 800040e:	193b      	adds	r3, r7, r4
 8000410:	1dfa      	adds	r2, r7, #7
 8000412:	7812      	ldrb	r2, [r2, #0]
 8000414:	701a      	strb	r2, [r3, #0]
	i2c1_byteTransmit(EEPROM_CHIP_ADDR << 1, buff,1);
 8000416:	193b      	adds	r3, r7, r4
 8000418:	2201      	movs	r2, #1
 800041a:	0019      	movs	r1, r3
 800041c:	20a0      	movs	r0, #160	@ 0xa0
 800041e:	f000 f9b3 	bl	8000788 <i2c1_byteTransmit>
	buff[1] = i2c1_byteReceive(EEPROM_CHIP_ADDR << 1 | 1,1);
 8000422:	2101      	movs	r1, #1
 8000424:	20a1      	movs	r0, #161	@ 0xa1
 8000426:	f000 f957 	bl	80006d8 <i2c1_byteReceive>
 800042a:	0003      	movs	r3, r0
 800042c:	001a      	movs	r2, r3
 800042e:	193b      	adds	r3, r7, r4
 8000430:	705a      	strb	r2, [r3, #1]
	return buff[1];
 8000432:	193b      	adds	r3, r7, r4
 8000434:	785b      	ldrb	r3, [r3, #1]
}
 8000436:	0018      	movs	r0, r3
 8000438:	46bd      	mov	sp, r7
 800043a:	b005      	add	sp, #20
 800043c:	bd90      	pop	{r4, r7, pc}

0800043e <eeprom_1byte_write>:

void eeprom_1byte_write(uint8_t address, uint8_t data) {
 800043e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000440:	b085      	sub	sp, #20
 8000442:	af00      	add	r7, sp, #0
 8000444:	0002      	movs	r2, r0
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	701a      	strb	r2, [r3, #0]
 800044a:	1dbb      	adds	r3, r7, #6
 800044c:	1c0a      	adds	r2, r1, #0
 800044e:	701a      	strb	r2, [r3, #0]
	char  buff[2];
	uint8_t stored_data;
	buff[0] = address;
 8000450:	250c      	movs	r5, #12
 8000452:	197b      	adds	r3, r7, r5
 8000454:	1dfa      	adds	r2, r7, #7
 8000456:	7812      	ldrb	r2, [r2, #0]
 8000458:	701a      	strb	r2, [r3, #0]
	buff[1] = data;
 800045a:	197b      	adds	r3, r7, r5
 800045c:	1dba      	adds	r2, r7, #6
 800045e:	7812      	ldrb	r2, [r2, #0]
 8000460:	705a      	strb	r2, [r3, #1]

	stored_data = eeprom_1byte_read(address);
 8000462:	260f      	movs	r6, #15
 8000464:	19bc      	adds	r4, r7, r6
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	0018      	movs	r0, r3
 800046c:	f7ff ffc8 	bl	8000400 <eeprom_1byte_read>
 8000470:	0003      	movs	r3, r0
 8000472:	7023      	strb	r3, [r4, #0]
	if (stored_data != data)
 8000474:	19ba      	adds	r2, r7, r6
 8000476:	1dbb      	adds	r3, r7, #6
 8000478:	7812      	ldrb	r2, [r2, #0]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	429a      	cmp	r2, r3
 800047e:	d005      	beq.n	800048c <eeprom_1byte_write+0x4e>
		i2c1_byteTransmit(EEPROM_CHIP_ADDR << 1, buff,2);
 8000480:	197b      	adds	r3, r7, r5
 8000482:	2202      	movs	r2, #2
 8000484:	0019      	movs	r1, r3
 8000486:	20a0      	movs	r0, #160	@ 0xa0
 8000488:	f000 f97e 	bl	8000788 <i2c1_byteTransmit>
}
 800048c:	46c0      	nop			@ (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b005      	add	sp, #20
 8000492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000494 <eeprom_2byte_write>:

void eeprom_2byte_write(uint8_t addr, uint16_t data) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	0002      	movs	r2, r0
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	701a      	strb	r2, [r3, #0]
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	1c0a      	adds	r2, r1, #0
 80004a4:	801a      	strh	r2, [r3, #0]
	eeprom_1byte_write(addr, data & 0xff);
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff ffc3 	bl	800043e <eeprom_1byte_write>
	HAL_Delay(5);
 80004b8:	2005      	movs	r0, #5
 80004ba:	f001 fe37 	bl	800212c <HAL_Delay>
	eeprom_1byte_write(addr + 1, data >> 8);
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	0a1b      	lsrs	r3, r3, #8
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	0019      	movs	r1, r3
 80004d2:	0010      	movs	r0, r2
 80004d4:	f7ff ffb3 	bl	800043e <eeprom_1byte_write>
}
 80004d8:	46c0      	nop			@ (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b002      	add	sp, #8
 80004de:	bd80      	pop	{r7, pc}

080004e0 <eeprom_2byte_read>:

uint16_t eeprom_2byte_read(uint8_t address) {
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	0002      	movs	r2, r0
 80004e8:	1dfb      	adds	r3, r7, #7
 80004ea:	701a      	strb	r2, [r3, #0]
	uint16_t data = 0;
 80004ec:	240e      	movs	r4, #14
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	801a      	strh	r2, [r3, #0]
	data = eeprom_1byte_read(address + 1) << 8;
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	0018      	movs	r0, r3
 80004fe:	f7ff ff7f 	bl	8000400 <eeprom_1byte_read>
 8000502:	0003      	movs	r3, r0
 8000504:	001a      	movs	r2, r3
 8000506:	193b      	adds	r3, r7, r4
 8000508:	0212      	lsls	r2, r2, #8
 800050a:	801a      	strh	r2, [r3, #0]
	HAL_Delay(5);
 800050c:	2005      	movs	r0, #5
 800050e:	f001 fe0d 	bl	800212c <HAL_Delay>
	data |= eeprom_1byte_read(address);
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff ff72 	bl	8000400 <eeprom_1byte_read>
 800051c:	0003      	movs	r3, r0
 800051e:	0019      	movs	r1, r3
 8000520:	193b      	adds	r3, r7, r4
 8000522:	193a      	adds	r2, r7, r4
 8000524:	8812      	ldrh	r2, [r2, #0]
 8000526:	430a      	orrs	r2, r1
 8000528:	801a      	strh	r2, [r3, #0]

	return data;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	881b      	ldrh	r3, [r3, #0]
}
 800052e:	0018      	movs	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	b005      	add	sp, #20
 8000534:	bd90      	pop	{r4, r7, pc}
	...

08000538 <i2c1_init>:
 *      Author: sigmadev
 */

#include "i2c1.h"

void i2c1_init() {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

	/* SCL PB6 as alternate */

	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 800053c:	4b5c      	ldr	r3, [pc, #368]	@ (80006b0 <i2c1_init+0x178>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b5b      	ldr	r3, [pc, #364]	@ (80006b0 <i2c1_init+0x178>)
 8000542:	495c      	ldr	r1, [pc, #368]	@ (80006b4 <i2c1_init+0x17c>)
 8000544:	400a      	ands	r2, r1
 8000546:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 8000548:	4b59      	ldr	r3, [pc, #356]	@ (80006b0 <i2c1_init+0x178>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b58      	ldr	r3, [pc, #352]	@ (80006b0 <i2c1_init+0x178>)
 800054e:	2180      	movs	r1, #128	@ 0x80
 8000550:	0189      	lsls	r1, r1, #6
 8000552:	430a      	orrs	r2, r1
 8000554:	601a      	str	r2, [r3, #0]
	/* SDC PB7 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE7_0);
 8000556:	4b56      	ldr	r3, [pc, #344]	@ (80006b0 <i2c1_init+0x178>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4b55      	ldr	r3, [pc, #340]	@ (80006b0 <i2c1_init+0x178>)
 800055c:	4956      	ldr	r1, [pc, #344]	@ (80006b8 <i2c1_init+0x180>)
 800055e:	400a      	ands	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE7_1);
 8000562:	4b53      	ldr	r3, [pc, #332]	@ (80006b0 <i2c1_init+0x178>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	4b52      	ldr	r3, [pc, #328]	@ (80006b0 <i2c1_init+0x178>)
 8000568:	2180      	movs	r1, #128	@ 0x80
 800056a:	0209      	lsls	r1, r1, #8
 800056c:	430a      	orrs	r2, r1
 800056e:	601a      	str	r2, [r3, #0]
	/* SCL PB6 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT6);
 8000570:	4b4f      	ldr	r3, [pc, #316]	@ (80006b0 <i2c1_init+0x178>)
 8000572:	685a      	ldr	r2, [r3, #4]
 8000574:	4b4e      	ldr	r3, [pc, #312]	@ (80006b0 <i2c1_init+0x178>)
 8000576:	2140      	movs	r1, #64	@ 0x40
 8000578:	430a      	orrs	r2, r1
 800057a:	605a      	str	r2, [r3, #4]
	/* SDC PB7 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT7);
 800057c:	4b4c      	ldr	r3, [pc, #304]	@ (80006b0 <i2c1_init+0x178>)
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	4b4b      	ldr	r3, [pc, #300]	@ (80006b0 <i2c1_init+0x178>)
 8000582:	2180      	movs	r1, #128	@ 0x80
 8000584:	430a      	orrs	r2, r1
 8000586:	605a      	str	r2, [r3, #4]
	/* SCL PB6 High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_0);
 8000588:	4b49      	ldr	r3, [pc, #292]	@ (80006b0 <i2c1_init+0x178>)
 800058a:	689a      	ldr	r2, [r3, #8]
 800058c:	4b48      	ldr	r3, [pc, #288]	@ (80006b0 <i2c1_init+0x178>)
 800058e:	2180      	movs	r1, #128	@ 0x80
 8000590:	0149      	lsls	r1, r1, #5
 8000592:	430a      	orrs	r2, r1
 8000594:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_1);
 8000596:	4b46      	ldr	r3, [pc, #280]	@ (80006b0 <i2c1_init+0x178>)
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	4b45      	ldr	r3, [pc, #276]	@ (80006b0 <i2c1_init+0x178>)
 800059c:	2180      	movs	r1, #128	@ 0x80
 800059e:	0189      	lsls	r1, r1, #6
 80005a0:	430a      	orrs	r2, r1
 80005a2:	609a      	str	r2, [r3, #8]
	/* SDC PB7  High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_0);
 80005a4:	4b42      	ldr	r3, [pc, #264]	@ (80006b0 <i2c1_init+0x178>)
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	4b41      	ldr	r3, [pc, #260]	@ (80006b0 <i2c1_init+0x178>)
 80005aa:	2180      	movs	r1, #128	@ 0x80
 80005ac:	01c9      	lsls	r1, r1, #7
 80005ae:	430a      	orrs	r2, r1
 80005b0:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_1);
 80005b2:	4b3f      	ldr	r3, [pc, #252]	@ (80006b0 <i2c1_init+0x178>)
 80005b4:	689a      	ldr	r2, [r3, #8]
 80005b6:	4b3e      	ldr	r3, [pc, #248]	@ (80006b0 <i2c1_init+0x178>)
 80005b8:	2180      	movs	r1, #128	@ 0x80
 80005ba:	0209      	lsls	r1, r1, #8
 80005bc:	430a      	orrs	r2, r1
 80005be:	609a      	str	r2, [r3, #8]
	/* SCL PB6 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD6_0);
 80005c0:	4b3b      	ldr	r3, [pc, #236]	@ (80006b0 <i2c1_init+0x178>)
 80005c2:	68da      	ldr	r2, [r3, #12]
 80005c4:	4b3a      	ldr	r3, [pc, #232]	@ (80006b0 <i2c1_init+0x178>)
 80005c6:	493b      	ldr	r1, [pc, #236]	@ (80006b4 <i2c1_init+0x17c>)
 80005c8:	400a      	ands	r2, r1
 80005ca:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD6_1);
 80005cc:	4b38      	ldr	r3, [pc, #224]	@ (80006b0 <i2c1_init+0x178>)
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	4b37      	ldr	r3, [pc, #220]	@ (80006b0 <i2c1_init+0x178>)
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	0189      	lsls	r1, r1, #6
 80005d6:	430a      	orrs	r2, r1
 80005d8:	60da      	str	r2, [r3, #12]
	/* SDC PB7 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD7_0);
 80005da:	4b35      	ldr	r3, [pc, #212]	@ (80006b0 <i2c1_init+0x178>)
 80005dc:	68da      	ldr	r2, [r3, #12]
 80005de:	4b34      	ldr	r3, [pc, #208]	@ (80006b0 <i2c1_init+0x178>)
 80005e0:	4935      	ldr	r1, [pc, #212]	@ (80006b8 <i2c1_init+0x180>)
 80005e2:	400a      	ands	r2, r1
 80005e4:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD7_1);
 80005e6:	4b32      	ldr	r3, [pc, #200]	@ (80006b0 <i2c1_init+0x178>)
 80005e8:	68da      	ldr	r2, [r3, #12]
 80005ea:	4b31      	ldr	r3, [pc, #196]	@ (80006b0 <i2c1_init+0x178>)
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	0209      	lsls	r1, r1, #8
 80005f0:	430a      	orrs	r2, r1
 80005f2:	60da      	str	r2, [r3, #12]
	/*  PB6 as i2c SCL */
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_0);
 80005f4:	4b2e      	ldr	r3, [pc, #184]	@ (80006b0 <i2c1_init+0x178>)
 80005f6:	6a1a      	ldr	r2, [r3, #32]
 80005f8:	4b2d      	ldr	r3, [pc, #180]	@ (80006b0 <i2c1_init+0x178>)
 80005fa:	4930      	ldr	r1, [pc, #192]	@ (80006bc <i2c1_init+0x184>)
 80005fc:	400a      	ands	r2, r1
 80005fe:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_1);
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <i2c1_init+0x178>)
 8000602:	6a1a      	ldr	r2, [r3, #32]
 8000604:	4b2a      	ldr	r3, [pc, #168]	@ (80006b0 <i2c1_init+0x178>)
 8000606:	2180      	movs	r1, #128	@ 0x80
 8000608:	0489      	lsls	r1, r1, #18
 800060a:	430a      	orrs	r2, r1
 800060c:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_2);
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <i2c1_init+0x178>)
 8000610:	6a1a      	ldr	r2, [r3, #32]
 8000612:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <i2c1_init+0x178>)
 8000614:	2180      	movs	r1, #128	@ 0x80
 8000616:	04c9      	lsls	r1, r1, #19
 8000618:	430a      	orrs	r2, r1
 800061a:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_3);
 800061c:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <i2c1_init+0x178>)
 800061e:	6a1a      	ldr	r2, [r3, #32]
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <i2c1_init+0x178>)
 8000622:	4927      	ldr	r1, [pc, #156]	@ (80006c0 <i2c1_init+0x188>)
 8000624:	400a      	ands	r2, r1
 8000626:	621a      	str	r2, [r3, #32]
	/*  PB7 as i2c SDL */
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_0);
 8000628:	4b21      	ldr	r3, [pc, #132]	@ (80006b0 <i2c1_init+0x178>)
 800062a:	6a1a      	ldr	r2, [r3, #32]
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <i2c1_init+0x178>)
 800062e:	4925      	ldr	r1, [pc, #148]	@ (80006c4 <i2c1_init+0x18c>)
 8000630:	400a      	ands	r2, r1
 8000632:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_1);
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <i2c1_init+0x178>)
 8000636:	6a1a      	ldr	r2, [r3, #32]
 8000638:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <i2c1_init+0x178>)
 800063a:	2180      	movs	r1, #128	@ 0x80
 800063c:	0589      	lsls	r1, r1, #22
 800063e:	430a      	orrs	r2, r1
 8000640:	621a      	str	r2, [r3, #32]
	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_2);
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <i2c1_init+0x178>)
 8000644:	6a1a      	ldr	r2, [r3, #32]
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <i2c1_init+0x178>)
 8000648:	2180      	movs	r1, #128	@ 0x80
 800064a:	05c9      	lsls	r1, r1, #23
 800064c:	430a      	orrs	r2, r1
 800064e:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_3);
 8000650:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <i2c1_init+0x178>)
 8000652:	6a1a      	ldr	r2, [r3, #32]
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <i2c1_init+0x178>)
 8000656:	0052      	lsls	r2, r2, #1
 8000658:	0852      	lsrs	r2, r2, #1
 800065a:	621a      	str	r2, [r3, #32]

	/* select normal speed */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 800065c:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <i2c1_init+0x190>)
 800065e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <i2c1_init+0x190>)
 8000662:	2180      	movs	r1, #128	@ 0x80
 8000664:	0389      	lsls	r1, r1, #14
 8000666:	430a      	orrs	r2, r1
 8000668:	63da      	str	r2, [r3, #60]	@ 0x3c

	/* i2c disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 800066a:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <i2c1_init+0x194>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <i2c1_init+0x194>)
 8000670:	2101      	movs	r1, #1
 8000672:	438a      	bics	r2, r1
 8000674:	601a      	str	r2, [r3, #0]
// 	ATOMIC_MODIFY_REG(I2C1->TIMINGR, I2C_TIMINGR_SCLDEL, 0x7);
// 	ATOMIC_MODIFY_REG(I2C1->TIMINGR, I2C_TIMINGR_SDADEL, 0x0);
// 	ATOMIC_MODIFY_REG(I2C1->TIMINGR, I2C_TIMINGR_SCLH, 0x7D);
// 	ATOMIC_MODIFY_REG(I2C1->TIMINGR, I2C_TIMINGR_SCLL, 0xBC);

	MODIFY_REG(I2C1->TIMINGR, 0X10111111U, 0X10707DBCU);
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <i2c1_init+0x194>)
 8000678:	691b      	ldr	r3, [r3, #16]
 800067a:	4a15      	ldr	r2, [pc, #84]	@ (80006d0 <i2c1_init+0x198>)
 800067c:	401a      	ands	r2, r3
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <i2c1_init+0x194>)
 8000680:	4914      	ldr	r1, [pc, #80]	@ (80006d4 <i2c1_init+0x19c>)
 8000682:	430a      	orrs	r2, r1
 8000684:	611a      	str	r2, [r3, #16]
	/*i2c Rx interrupt enable */
	SET_BIT(I2C1->CR1, I2C_CR1_RXIE);
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <i2c1_init+0x194>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <i2c1_init+0x194>)
 800068c:	2104      	movs	r1, #4
 800068e:	430a      	orrs	r2, r1
 8000690:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C1->CR1, I2C_CR1_TXIE);
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <i2c1_init+0x194>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <i2c1_init+0x194>)
 8000698:	2102      	movs	r1, #2
 800069a:	430a      	orrs	r2, r1
 800069c:	601a      	str	r2, [r3, #0]

	/* i2c enable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <i2c1_init+0x194>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <i2c1_init+0x194>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	601a      	str	r2, [r3, #0]
}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	50000400 	.word	0x50000400
 80006b4:	ffffefff 	.word	0xffffefff
 80006b8:	ffffbfff 	.word	0xffffbfff
 80006bc:	feffffff 	.word	0xfeffffff
 80006c0:	f7ffffff 	.word	0xf7ffffff
 80006c4:	efffffff 	.word	0xefffffff
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40005400 	.word	0x40005400
 80006d0:	ef8e8242 	.word	0xef8e8242
 80006d4:	10707dbc 	.word	0x10707dbc

080006d8 <i2c1_byteReceive>:

char i2c1_byteReceive(char saddr, uint8_t N) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	0002      	movs	r2, r0
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	1c0a      	adds	r2, r1, #0
 80006e8:	701a      	strb	r2, [r3, #0]

	i2c1_start(saddr, READ, N);
 80006ea:	1dbb      	adds	r3, r7, #6
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2101      	movs	r1, #1
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 f897 	bl	8000828 <i2c1_start>

	char data = 0;
 80006fa:	230f      	movs	r3, #15
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	e01a      	b.n	800073e <i2c1_byteReceive+0x66>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE)
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <i2c1_byteReceive+0xac>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	2204      	movs	r2, #4
 8000710:	4013      	ands	r3, r2
				& !READ_BIT(I2C1->ISR, I2C_ISR_NACKF)) {
 8000712:	425a      	negs	r2, r3
 8000714:	4153      	adcs	r3, r2
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <i2c1_byteReceive+0xac>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	2110      	movs	r1, #16
 800071e:	400b      	ands	r3, r1
 8000720:	4259      	negs	r1, r3
 8000722:	414b      	adcs	r3, r1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4013      	ands	r3, r2
 8000728:	b2db      	uxtb	r3, r3
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE)
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1ed      	bne.n	800070a <i2c1_byteReceive+0x32>
		}
		data = READ_REG(I2C1->RXDR);
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <i2c1_byteReceive+0xac>)
 8000730:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000732:	230f      	movs	r3, #15
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	3301      	adds	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	1dbb      	adds	r3, r7, #6
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	429a      	cmp	r2, r3
 8000746:	dbdf      	blt.n	8000708 <i2c1_byteReceive+0x30>

	}
	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF)
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <i2c1_byteReceive+0xac>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	2220      	movs	r2, #32
 8000750:	401a      	ands	r2, r3
			| READ_BIT(I2C1->ISR, I2C_ISR_NACKF))) {
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <i2c1_byteReceive+0xac>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	2110      	movs	r1, #16
 8000758:	400b      	ands	r3, r1
 800075a:	4313      	orrs	r3, r2
	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF)
 800075c:	d0f5      	beq.n	800074a <i2c1_byteReceive+0x72>
	}
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <i2c1_byteReceive+0xac>)
 8000760:	699a      	ldr	r2, [r3, #24]
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <i2c1_byteReceive+0xac>)
 8000764:	2120      	movs	r1, #32
 8000766:	430a      	orrs	r2, r1
 8000768:	619a      	str	r2, [r3, #24]
	SET_BIT(I2C1->ISR, I2C_ICR_NACKCF);
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <i2c1_byteReceive+0xac>)
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <i2c1_byteReceive+0xac>)
 8000770:	2110      	movs	r1, #16
 8000772:	430a      	orrs	r2, r1
 8000774:	619a      	str	r2, [r3, #24]

	return data;
 8000776:	230f      	movs	r3, #15
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	b004      	add	sp, #16
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40005400 	.word	0x40005400

08000788 <i2c1_byteTransmit>:

void i2c1_byteTransmit(char saddr, char *data, uint8_t N) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6039      	str	r1, [r7, #0]
 8000790:	0011      	movs	r1, r2
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	1c02      	adds	r2, r0, #0
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	1c0a      	adds	r2, r1, #0
 800079c:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, WRITE, N);
 800079e:	1dbb      	adds	r3, r7, #6
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 f83d 	bl	8000828 <i2c1_start>

	for (int i = 0; i < N; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e022      	b.n	80007fa <i2c1_byteTransmit+0x72>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <i2c1_byteTransmit+0x9c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	2202      	movs	r2, #2
 80007bc:	4013      	ands	r3, r2
				& !READ_BIT(I2C1->ISR, I2C_ISR_NACKF)) {
 80007be:	425a      	negs	r2, r3
 80007c0:	4153      	adcs	r3, r2
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <i2c1_byteTransmit+0x9c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	2110      	movs	r1, #16
 80007ca:	400b      	ands	r3, r1
 80007cc:	4259      	negs	r1, r3
 80007ce:	414b      	adcs	r3, r1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4013      	ands	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1ed      	bne.n	80007b6 <i2c1_byteTransmit+0x2e>
		}
		MODIFY_REG(I2C1->TXDR, I2C_TXDR_TXDATA, data[i]);
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <i2c1_byteTransmit+0x9c>)
 80007dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007de:	22ff      	movs	r2, #255	@ 0xff
 80007e0:	4393      	bics	r3, r2
 80007e2:	001a      	movs	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6839      	ldr	r1, [r7, #0]
 80007e8:	18cb      	adds	r3, r1, r3
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	0019      	movs	r1, r3
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <i2c1_byteTransmit+0x9c>)
 80007f0:	430a      	orrs	r2, r1
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
	for (int i = 0; i < N; i++) {
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	1dbb      	adds	r3, r7, #6
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbd7      	blt.n	80007b4 <i2c1_byteTransmit+0x2c>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <i2c1_byteTransmit+0x9c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	2220      	movs	r2, #32
 800080c:	4013      	ands	r3, r2
 800080e:	d0fa      	beq.n	8000806 <i2c1_byteTransmit+0x7e>
	}
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <i2c1_byteTransmit+0x9c>)
 8000812:	699a      	ldr	r2, [r3, #24]
 8000814:	4b03      	ldr	r3, [pc, #12]	@ (8000824 <i2c1_byteTransmit+0x9c>)
 8000816:	2120      	movs	r1, #32
 8000818:	430a      	orrs	r2, r1
 800081a:	619a      	str	r2, [r3, #24]

}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b004      	add	sp, #16
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40005400 	.word	0x40005400

08000828 <i2c1_start>:

void i2c1_start(char saddr, uint8_t transfer_request, uint8_t N) {
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	0004      	movs	r4, r0
 8000830:	0008      	movs	r0, r1
 8000832:	0011      	movs	r1, r2
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	1c22      	adds	r2, r4, #0
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	1dbb      	adds	r3, r7, #6
 800083c:	1c02      	adds	r2, r0, #0
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	1d7b      	adds	r3, r7, #5
 8000842:	1c0a      	adds	r2, r1, #0
 8000844:	701a      	strb	r2, [r3, #0]
	/*master 7 bit addressing mode */
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ADD10);
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <i2c1_start+0xa4>)
 8000848:	685a      	ldr	r2, [r3, #4]
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <i2c1_start+0xa4>)
 800084c:	4920      	ldr	r1, [pc, #128]	@ (80008d0 <i2c1_start+0xa8>)
 800084e:	400a      	ands	r2, r1
 8000850:	605a      	str	r2, [r3, #4]
	/* set Slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <i2c1_start+0xa4>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	0a9b      	lsrs	r3, r3, #10
 8000858:	0299      	lsls	r1, r3, #10
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <i2c1_start+0xa4>)
 8000860:	430a      	orrs	r2, r1
 8000862:	605a      	str	r2, [r3, #4]
	/* read 1 byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <i2c1_start+0xa4>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	4a1a      	ldr	r2, [pc, #104]	@ (80008d4 <i2c1_start+0xac>)
 800086a:	4013      	ands	r3, r2
 800086c:	0019      	movs	r1, r3
 800086e:	1d7b      	adds	r3, r7, #5
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	041a      	lsls	r2, r3, #16
 8000874:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <i2c1_start+0xa4>)
 8000876:	430a      	orrs	r2, r1
 8000878:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 800087a:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <i2c1_start+0xa4>)
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <i2c1_start+0xa4>)
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	0489      	lsls	r1, r1, #18
 8000884:	430a      	orrs	r2, r1
 8000886:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */

	if (transfer_request == 1) {
 8000888:	1dbb      	adds	r3, r7, #6
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d107      	bne.n	80008a0 <i2c1_start+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <i2c1_start+0xa4>)
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <i2c1_start+0xa4>)
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	00c9      	lsls	r1, r1, #3
 800089a:	430a      	orrs	r2, r1
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	e009      	b.n	80008b4 <i2c1_start+0x8c>
	} else if (transfer_request == 0) {
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d105      	bne.n	80008b4 <i2c1_start+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <i2c1_start+0xa4>)
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <i2c1_start+0xa4>)
 80008ae:	490a      	ldr	r1, [pc, #40]	@ (80008d8 <i2c1_start+0xb0>)
 80008b0:	400a      	ands	r2, r1
 80008b2:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <i2c1_start+0xa4>)
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	4b04      	ldr	r3, [pc, #16]	@ (80008cc <i2c1_start+0xa4>)
 80008ba:	2180      	movs	r1, #128	@ 0x80
 80008bc:	0189      	lsls	r1, r1, #6
 80008be:	430a      	orrs	r2, r1
 80008c0:	605a      	str	r2, [r3, #4]

}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b003      	add	sp, #12
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40005400 	.word	0x40005400
 80008d0:	fffff7ff 	.word	0xfffff7ff
 80008d4:	ff00ffff 	.word	0xff00ffff
 80008d8:	fffffbff 	.word	0xfffffbff

080008dc <arduino_map>:

	return (lna);
}

int8_t arduino_map(uint16_t value, uint16_t in_min, uint16_t in_max,
		int8_t out_min, int8_t out_max) {
 80008dc:	b5b0      	push	{r4, r5, r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	0005      	movs	r5, r0
 80008e4:	000c      	movs	r4, r1
 80008e6:	0010      	movs	r0, r2
 80008e8:	0019      	movs	r1, r3
 80008ea:	1dbb      	adds	r3, r7, #6
 80008ec:	1c2a      	adds	r2, r5, #0
 80008ee:	801a      	strh	r2, [r3, #0]
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	1c22      	adds	r2, r4, #0
 80008f4:	801a      	strh	r2, [r3, #0]
 80008f6:	1cbb      	adds	r3, r7, #2
 80008f8:	1c02      	adds	r2, r0, #0
 80008fa:	801a      	strh	r2, [r3, #0]
 80008fc:	1c7b      	adds	r3, r7, #1
 80008fe:	1c0a      	adds	r2, r1, #0
 8000900:	701a      	strb	r2, [r3, #0]
	return ((value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8000902:	1dbb      	adds	r3, r7, #6
 8000904:	881a      	ldrh	r2, [r3, #0]
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	1ad2      	subs	r2, r2, r3
 800090c:	2318      	movs	r3, #24
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	2100      	movs	r1, #0
 8000912:	5659      	ldrsb	r1, [r3, r1]
 8000914:	1c7b      	adds	r3, r7, #1
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b25b      	sxtb	r3, r3
 800091a:	1acb      	subs	r3, r1, r3
 800091c:	4353      	muls	r3, r2
 800091e:	0018      	movs	r0, r3
 8000920:	1cbb      	adds	r3, r7, #2
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	0019      	movs	r1, r3
 800092c:	f7ff fc7c 	bl	8000228 <__divsi3>
 8000930:	0003      	movs	r3, r0
 8000932:	b2da      	uxtb	r2, r3
 8000934:	1c7b      	adds	r3, r7, #1
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	b25b      	sxtb	r3, r3
}
 800093e:	0018      	movs	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bdb0      	pop	{r4, r5, r7, pc}

08000946 <arduino_map16>:

uint16_t arduino_map16(uint16_t value, uint16_t in_min, uint16_t in_max,
		uint16_t out_min, uint16_t out_max) {
 8000946:	b5b0      	push	{r4, r5, r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	0005      	movs	r5, r0
 800094e:	000c      	movs	r4, r1
 8000950:	0010      	movs	r0, r2
 8000952:	0019      	movs	r1, r3
 8000954:	1dbb      	adds	r3, r7, #6
 8000956:	1c2a      	adds	r2, r5, #0
 8000958:	801a      	strh	r2, [r3, #0]
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	1c22      	adds	r2, r4, #0
 800095e:	801a      	strh	r2, [r3, #0]
 8000960:	1cbb      	adds	r3, r7, #2
 8000962:	1c02      	adds	r2, r0, #0
 8000964:	801a      	strh	r2, [r3, #0]
 8000966:	003b      	movs	r3, r7
 8000968:	1c0a      	adds	r2, r1, #0
 800096a:	801a      	strh	r2, [r3, #0]
	return ((value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800096c:	1dbb      	adds	r3, r7, #6
 800096e:	881a      	ldrh	r2, [r3, #0]
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	1ad2      	subs	r2, r2, r3
 8000976:	2318      	movs	r3, #24
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	8819      	ldrh	r1, [r3, #0]
 800097c:	003b      	movs	r3, r7
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	1acb      	subs	r3, r1, r3
 8000982:	4353      	muls	r3, r2
 8000984:	0018      	movs	r0, r3
 8000986:	1cbb      	adds	r3, r7, #2
 8000988:	881a      	ldrh	r2, [r3, #0]
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	0019      	movs	r1, r3
 8000992:	f7ff fc49 	bl	8000228 <__divsi3>
 8000996:	0003      	movs	r3, r0
 8000998:	b29a      	uxth	r2, r3
 800099a:	003b      	movs	r3, r7
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	18d3      	adds	r3, r2, r3
 80009a0:	b29b      	uxth	r3, r3
}
 80009a2:	0018      	movs	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bdb0      	pop	{r4, r5, r7, pc}

080009aa <packet_lna_for_ltel_protocol>:
	}

	return ((int8_t) (m * pout_adc + b));
}

void packet_lna_for_ltel_protocol(uint8_t *frame, struct Lna lna) {
 80009aa:	b084      	sub	sp, #16
 80009ac:	b5b0      	push	{r4, r5, r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	2004      	movs	r0, #4
 80009b6:	2418      	movs	r4, #24
 80009b8:	1900      	adds	r0, r0, r4
 80009ba:	2508      	movs	r5, #8
 80009bc:	46ac      	mov	ip, r5
 80009be:	44bc      	add	ip, r7
 80009c0:	4460      	add	r0, ip
 80009c2:	6001      	str	r1, [r0, #0]
 80009c4:	6042      	str	r2, [r0, #4]
 80009c6:	6083      	str	r3, [r0, #8]
	uint8_t crc_frame[2];
	uint16_t crc;
	frame[0] = LTEL_START_MARK;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	227e      	movs	r2, #126	@ 0x7e
 80009cc:	701a      	strb	r2, [r3, #0]
	frame[1] = MODULE_FUNCTION;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3301      	adds	r3, #1
 80009d2:	2209      	movs	r2, #9
 80009d4:	701a      	strb	r2, [r3, #0]
	frame[2] = MODULE_ADDR;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3302      	adds	r3, #2
 80009da:	2208      	movs	r2, #8
 80009dc:	701a      	strb	r2, [r3, #0]
	frame[3] = QUERY_PARAMETER_LTEL;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3303      	adds	r3, #3
 80009e2:	2211      	movs	r2, #17
 80009e4:	701a      	strb	r2, [r3, #0]
	frame[4] = 0x00;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
	frame[5] = 0x05;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3305      	adds	r3, #5
 80009f2:	2205      	movs	r2, #5
 80009f4:	701a      	strb	r2, [r3, #0]
	frame[6] = 0x00;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3306      	adds	r3, #6
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	frame[7] = lna.attenuation;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3307      	adds	r3, #7
 8000a02:	2204      	movs	r2, #4
 8000a04:	1912      	adds	r2, r2, r4
 8000a06:	2108      	movs	r1, #8
 8000a08:	468c      	mov	ip, r1
 8000a0a:	44bc      	add	ip, r7
 8000a0c:	4462      	add	r2, ip
 8000a0e:	7812      	ldrb	r2, [r2, #0]
 8000a10:	701a      	strb	r2, [r3, #0]
	frame[8] = lna.gain;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3308      	adds	r3, #8
 8000a16:	2204      	movs	r2, #4
 8000a18:	1912      	adds	r2, r2, r4
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	468c      	mov	ip, r1
 8000a1e:	44bc      	add	ip, r7
 8000a20:	4462      	add	r2, ip
 8000a22:	7852      	ldrb	r2, [r2, #1]
 8000a24:	701a      	strb	r2, [r3, #0]
	frame[9] = lna.pout;
 8000a26:	2304      	movs	r3, #4
 8000a28:	191b      	adds	r3, r3, r4
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	44bc      	add	ip, r7
 8000a30:	4463      	add	r3, ip
 8000a32:	2202      	movs	r2, #2
 8000a34:	569a      	ldrsb	r2, [r3, r2]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3309      	adds	r3, #9
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	701a      	strb	r2, [r3, #0]
	frame[10] = lna.voltage;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	330a      	adds	r3, #10
 8000a42:	2204      	movs	r2, #4
 8000a44:	1912      	adds	r2, r2, r4
 8000a46:	2108      	movs	r1, #8
 8000a48:	468c      	mov	ip, r1
 8000a4a:	44bc      	add	ip, r7
 8000a4c:	4462      	add	r2, ip
 8000a4e:	7952      	ldrb	r2, [r2, #5]
 8000a50:	701a      	strb	r2, [r3, #0]
	crc = crc_get(&(frame[1]), 10);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	210a      	movs	r1, #10
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 fa55 	bl	8001f08 <crc_get>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	001a      	movs	r2, r3
 8000a62:	200a      	movs	r0, #10
 8000a64:	183b      	adds	r3, r7, r0
 8000a66:	801a      	strh	r2, [r3, #0]
	memcpy(crc_frame, &crc, 2);
 8000a68:	210c      	movs	r1, #12
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	183a      	adds	r2, r7, r0
 8000a6e:	8812      	ldrh	r2, [r2, #0]
 8000a70:	801a      	strh	r2, [r3, #0]
	frame[11] = crc_frame[0];
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	330b      	adds	r3, #11
 8000a76:	187a      	adds	r2, r7, r1
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	701a      	strb	r2, [r3, #0]
	frame[12] = crc_frame[1];
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	330c      	adds	r3, #12
 8000a80:	187a      	adds	r2, r7, r1
 8000a82:	7852      	ldrb	r2, [r2, #1]
 8000a84:	701a      	strb	r2, [r3, #0]
	frame[13] = LTEL_END_MARK;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	330d      	adds	r3, #13
 8000a8a:	227f      	movs	r2, #127	@ 0x7f
 8000a8c:	701a      	strb	r2, [r3, #0]
}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bcb0      	pop	{r4, r5, r7}
 8000a96:	bc08      	pop	{r3}
 8000a98:	b004      	add	sp, #16
 8000a9a:	4718      	bx	r3

08000a9c <sigma_set_parameter_frame>:

void sigma_set_parameter_frame(uint8_t *frame, struct Lna lna) {
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	b5b0      	push	{r4, r5, r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	2004      	movs	r0, #4
 8000aa8:	2418      	movs	r4, #24
 8000aaa:	1900      	adds	r0, r0, r4
 8000aac:	2508      	movs	r5, #8
 8000aae:	46ac      	mov	ip, r5
 8000ab0:	44bc      	add	ip, r7
 8000ab2:	4460      	add	r0, ip
 8000ab4:	6001      	str	r1, [r0, #0]
 8000ab6:	6042      	str	r2, [r0, #4]
 8000ab8:	6083      	str	r3, [r0, #8]
	uint8_t crc_frame[2];
	uint16_t crc;
	frame[0] = LTEL_START_MARK;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	227e      	movs	r2, #126	@ 0x7e
 8000abe:	701a      	strb	r2, [r3, #0]
	frame[1] = MODULE_FUNCTION;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	2209      	movs	r2, #9
 8000ac6:	701a      	strb	r2, [r3, #0]
	frame[2] = MODULE_ADDR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3302      	adds	r3, #2
 8000acc:	2208      	movs	r2, #8
 8000ace:	701a      	strb	r2, [r3, #0]
	frame[3] = QUERY_PARAMETER_SIGMA;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3303      	adds	r3, #3
 8000ad4:	2212      	movs	r2, #18
 8000ad6:	701a      	strb	r2, [r3, #0]
	frame[4] = 0x06;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3304      	adds	r3, #4
 8000adc:	2206      	movs	r2, #6
 8000ade:	701a      	strb	r2, [r3, #0]
	frame[5] = lna.pout;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	191b      	adds	r3, r3, r4
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	4694      	mov	ip, r2
 8000ae8:	44bc      	add	ip, r7
 8000aea:	4463      	add	r3, ip
 8000aec:	2202      	movs	r2, #2
 8000aee:	569a      	ldrsb	r2, [r3, r2]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3305      	adds	r3, #5
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	701a      	strb	r2, [r3, #0]
	frame[6] = lna.attenuation;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3306      	adds	r3, #6
 8000afc:	2204      	movs	r2, #4
 8000afe:	1912      	adds	r2, r2, r4
 8000b00:	2108      	movs	r1, #8
 8000b02:	468c      	mov	ip, r1
 8000b04:	44bc      	add	ip, r7
 8000b06:	4462      	add	r2, ip
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
	frame[7] = lna.gain;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3307      	adds	r3, #7
 8000b10:	2204      	movs	r2, #4
 8000b12:	1912      	adds	r2, r2, r4
 8000b14:	2108      	movs	r1, #8
 8000b16:	468c      	mov	ip, r1
 8000b18:	44bc      	add	ip, r7
 8000b1a:	4462      	add	r2, ip
 8000b1c:	7852      	ldrb	r2, [r2, #1]
 8000b1e:	701a      	strb	r2, [r3, #0]
	frame[8] = lna.current;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3308      	adds	r3, #8
 8000b24:	2204      	movs	r2, #4
 8000b26:	1912      	adds	r2, r2, r4
 8000b28:	2108      	movs	r1, #8
 8000b2a:	468c      	mov	ip, r1
 8000b2c:	44bc      	add	ip, r7
 8000b2e:	4462      	add	r2, ip
 8000b30:	78d2      	ldrb	r2, [r2, #3]
 8000b32:	701a      	strb	r2, [r3, #0]
	frame[9] = lna.voltage;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3309      	adds	r3, #9
 8000b38:	2204      	movs	r2, #4
 8000b3a:	1912      	adds	r2, r2, r4
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	468c      	mov	ip, r1
 8000b40:	44bc      	add	ip, r7
 8000b42:	4462      	add	r2, ip
 8000b44:	7952      	ldrb	r2, [r2, #5]
 8000b46:	701a      	strb	r2, [r3, #0]
	frame[10] = lna.pin;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	191b      	adds	r3, r3, r4
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	4694      	mov	ip, r2
 8000b50:	44bc      	add	ip, r7
 8000b52:	4463      	add	r3, ip
 8000b54:	2204      	movs	r2, #4
 8000b56:	569a      	ldrsb	r2, [r3, r2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	330a      	adds	r3, #10
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	701a      	strb	r2, [r3, #0]
	crc = crc_get(&(frame[1]), 10);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3301      	adds	r3, #1
 8000b64:	210a      	movs	r1, #10
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 f9ce 	bl	8001f08 <crc_get>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	001a      	movs	r2, r3
 8000b70:	200a      	movs	r0, #10
 8000b72:	183b      	adds	r3, r7, r0
 8000b74:	801a      	strh	r2, [r3, #0]
	memcpy(crc_frame, &crc, 2);
 8000b76:	210c      	movs	r1, #12
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	183a      	adds	r2, r7, r0
 8000b7c:	8812      	ldrh	r2, [r2, #0]
 8000b7e:	801a      	strh	r2, [r3, #0]
	frame[11] = crc_frame[0];
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	330b      	adds	r3, #11
 8000b84:	187a      	adds	r2, r7, r1
 8000b86:	7812      	ldrb	r2, [r2, #0]
 8000b88:	701a      	strb	r2, [r3, #0]
	frame[12] = crc_frame[1];
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	330c      	adds	r3, #12
 8000b8e:	187a      	adds	r2, r7, r1
 8000b90:	7852      	ldrb	r2, [r2, #1]
 8000b92:	701a      	strb	r2, [r3, #0]
	frame[13] = LTEL_END_MARK;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	330d      	adds	r3, #13
 8000b98:	227f      	movs	r2, #127	@ 0x7f
 8000b9a:	701a      	strb	r2, [r3, #0]
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b004      	add	sp, #16
 8000ba2:	bcb0      	pop	{r4, r5, r7}
 8000ba4:	bc08      	pop	{r3}
 8000ba6:	b004      	add	sp, #16
 8000ba8:	4718      	bx	r3
	...

08000bac <get_db_gain>:
	else if (adc_gain < 725)
		return 0;
	return 0;
}

uint8_t get_db_gain(uint16_t adc, uint8_t fix) {
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	1dbb      	adds	r3, r7, #6
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	1d7b      	adds	r3, r7, #5
 8000bba:	1c0a      	adds	r2, r1, #0
 8000bbc:	701a      	strb	r2, [r3, #0]

	uint16_t adc_max = 3781;
 8000bbe:	210e      	movs	r1, #14
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	4a15      	ldr	r2, [pc, #84]	@ (8000c18 <get_db_gain+0x6c>)
 8000bc4:	801a      	strh	r2, [r3, #0]
	uint16_t adc_min = 725;
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <get_db_gain+0x70>)
 8000bcc:	801a      	strh	r2, [r3, #0]
	uint8_t gain_min = 0;
 8000bce:	240b      	movs	r4, #11
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
	uint8_t gain_max = 45;
 8000bd6:	260a      	movs	r6, #10
 8000bd8:	19bb      	adds	r3, r7, r6
 8000bda:	222d      	movs	r2, #45	@ 0x2d
 8000bdc:	701a      	strb	r2, [r3, #0]
	uint8_t gain;

	gain = arduino_map(adc, adc_min, adc_max, gain_min, gain_max);
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2500      	movs	r5, #0
 8000be2:	575d      	ldrsb	r5, [r3, r5]
 8000be4:	19bb      	adds	r3, r7, r6
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	187a      	adds	r2, r7, r1
 8000bec:	8814      	ldrh	r4, [r2, #0]
 8000bee:	183a      	adds	r2, r7, r0
 8000bf0:	8811      	ldrh	r1, [r2, #0]
 8000bf2:	1dba      	adds	r2, r7, #6
 8000bf4:	8810      	ldrh	r0, [r2, #0]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	002b      	movs	r3, r5
 8000bfa:	0022      	movs	r2, r4
 8000bfc:	f7ff fe6e 	bl	80008dc <arduino_map>
 8000c00:	0003      	movs	r3, r0
 8000c02:	001a      	movs	r2, r3
 8000c04:	2109      	movs	r1, #9
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	701a      	strb	r2, [r3, #0]
	return (gain);
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	781b      	ldrb	r3, [r3, #0]
}
 8000c0e:	0018      	movs	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b005      	add	sp, #20
 8000c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	00000ec5 	.word	0x00000ec5
 8000c1c:	000002d5 	.word	0x000002d5

08000c20 <get_dbm_pout>:

uint8_t get_dbm_pout(uint16_t value, uint8_t fix) {
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	0002      	movs	r2, r0
 8000c28:	1dbb      	adds	r3, r7, #6
 8000c2a:	801a      	strh	r2, [r3, #0]
 8000c2c:	1d7b      	adds	r3, r7, #5
 8000c2e:	1c0a      	adds	r2, r1, #0
 8000c30:	701a      	strb	r2, [r3, #0]
	uint16_t adc_max = 0;
 8000c32:	250e      	movs	r5, #14
 8000c34:	197b      	adds	r3, r7, r5
 8000c36:	2200      	movs	r2, #0
 8000c38:	801a      	strh	r2, [r3, #0]
	uint16_t adc_min = 0;
 8000c3a:	260c      	movs	r6, #12
 8000c3c:	19bb      	adds	r3, r7, r6
 8000c3e:	2200      	movs	r2, #0
 8000c40:	801a      	strh	r2, [r3, #0]
	uint8_t pout;

//	do {
	adc_max = eeprom_2byte_read(POUT_ADC_MAX_ADDR);
 8000c42:	197c      	adds	r4, r7, r5
 8000c44:	2003      	movs	r0, #3
 8000c46:	f7ff fc4b 	bl	80004e0 <eeprom_2byte_read>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	8023      	strh	r3, [r4, #0]
	HAL_Delay(2);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f001 fa6c 	bl	800212c <HAL_Delay>
	adc_min = eeprom_2byte_read(POUT_ADC_MIN_ADDR);
 8000c54:	19bc      	adds	r4, r7, r6
 8000c56:	2005      	movs	r0, #5
 8000c58:	f7ff fc42 	bl	80004e0 <eeprom_2byte_read>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	8023      	strh	r3, [r4, #0]
//	} while (adc_max == adc_min);
	pout = arduino_map(value, adc_min, adc_max, POUT_DBM_MIN, POUT_DBM_MAX);
 8000c60:	231e      	movs	r3, #30
 8000c62:	425c      	negs	r4, r3
 8000c64:	197b      	adds	r3, r7, r5
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	19bb      	adds	r3, r7, r6
 8000c6a:	8819      	ldrh	r1, [r3, #0]
 8000c6c:	1dbb      	adds	r3, r7, #6
 8000c6e:	8818      	ldrh	r0, [r3, #0]
 8000c70:	2302      	movs	r3, #2
 8000c72:	425b      	negs	r3, r3
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	0023      	movs	r3, r4
 8000c78:	f7ff fe30 	bl	80008dc <arduino_map>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	001a      	movs	r2, r3
 8000c80:	210b      	movs	r1, #11
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	701a      	strb	r2, [r3, #0]
	return (pout + fix);
 8000c86:	187a      	adds	r2, r7, r1
 8000c88:	1d7b      	adds	r3, r7, #5
 8000c8a:	7812      	ldrb	r2, [r2, #0]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	18d3      	adds	r3, r2, r3
 8000c90:	b2db      	uxtb	r3, r3
}
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b005      	add	sp, #20
 8000c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000c9c <get_voltage>:
uint8_t get_voltage(uint16_t value, uint8_t fix) {
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	801a      	strh	r2, [r3, #0]
 8000ca8:	1d7b      	adds	r3, r7, #5
 8000caa:	1c0a      	adds	r2, r1, #0
 8000cac:	701a      	strb	r2, [r3, #0]
	uint16_t adc_max = 2362;
 8000cae:	2116      	movs	r1, #22
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <get_voltage+0x64>)
 8000cb4:	801a      	strh	r2, [r3, #0]
	uint16_t adc_min = 1635;
 8000cb6:	2014      	movs	r0, #20
 8000cb8:	183b      	adds	r3, r7, r0
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <get_voltage+0x68>)
 8000cbc:	801a      	strh	r2, [r3, #0]
	uint16_t voltage_min = 120;
 8000cbe:	2412      	movs	r4, #18
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2278      	movs	r2, #120	@ 0x78
 8000cc4:	801a      	strh	r2, [r3, #0]
	uint16_t voltage_max = 240;
 8000cc6:	2510      	movs	r5, #16
 8000cc8:	197b      	adds	r3, r7, r5
 8000cca:	22f0      	movs	r2, #240	@ 0xf0
 8000ccc:	801a      	strh	r2, [r3, #0]
	uint8_t voltage;

	voltage = arduino_map16(value, adc_min, adc_max, voltage_min, voltage_max);
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	881c      	ldrh	r4, [r3, #0]
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	881a      	ldrh	r2, [r3, #0]
 8000cd6:	183b      	adds	r3, r7, r0
 8000cd8:	8819      	ldrh	r1, [r3, #0]
 8000cda:	1dbb      	adds	r3, r7, #6
 8000cdc:	8818      	ldrh	r0, [r3, #0]
 8000cde:	197b      	adds	r3, r7, r5
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	0023      	movs	r3, r4
 8000ce6:	f7ff fe2e 	bl	8000946 <arduino_map16>
 8000cea:	0003      	movs	r3, r0
 8000cec:	001a      	movs	r2, r3
 8000cee:	210f      	movs	r1, #15
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	701a      	strb	r2, [r3, #0]
	return (voltage);
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b006      	add	sp, #24
 8000cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8000d00:	0000093a 	.word	0x0000093a
 8000d04:	00000663 	.word	0x00000663

08000d08 <get_current>:

uint8_t get_current(uint16_t value, uint8_t fix) {
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	801a      	strh	r2, [r3, #0]
 8000d14:	1d7b      	adds	r3, r7, #5
 8000d16:	1c0a      	adds	r2, r1, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	uint16_t adc_min = 2310;
 8000d1a:	210e      	movs	r1, #14
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	4a15      	ldr	r2, [pc, #84]	@ (8000d74 <get_current+0x6c>)
 8000d20:	801a      	strh	r2, [r3, #0]
	uint16_t adc_max = 2340;
 8000d22:	200c      	movs	r0, #12
 8000d24:	183b      	adds	r3, r7, r0
 8000d26:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <get_current+0x70>)
 8000d28:	801a      	strh	r2, [r3, #0]
	uint8_t current_max = 190;
 8000d2a:	240b      	movs	r4, #11
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	22be      	movs	r2, #190	@ 0xbe
 8000d30:	701a      	strb	r2, [r3, #0]
	uint8_t current_min = 170;
 8000d32:	250a      	movs	r5, #10
 8000d34:	197b      	adds	r3, r7, r5
 8000d36:	22aa      	movs	r2, #170	@ 0xaa
 8000d38:	701a      	strb	r2, [r3, #0]
	uint8_t current;

	current = arduino_map16(value, adc_min, adc_max, current_min, current_max);
 8000d3a:	197b      	adds	r3, r7, r5
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	183a      	adds	r2, r7, r0
 8000d48:	8814      	ldrh	r4, [r2, #0]
 8000d4a:	187a      	adds	r2, r7, r1
 8000d4c:	8811      	ldrh	r1, [r2, #0]
 8000d4e:	1dba      	adds	r2, r7, #6
 8000d50:	8810      	ldrh	r0, [r2, #0]
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	002b      	movs	r3, r5
 8000d56:	0022      	movs	r2, r4
 8000d58:	f7ff fdf5 	bl	8000946 <arduino_map16>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	001a      	movs	r2, r3
 8000d60:	2109      	movs	r1, #9
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	701a      	strb	r2, [r3, #0]
	return (current);
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	781b      	ldrb	r3, [r3, #0]
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bdb0      	pop	{r4, r5, r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	00000906 	.word	0x00000906
 8000d78:	00000924 	.word	0x00000924

08000d7c <calulate_lna_real_values>:

struct Lna calulate_lna_real_values(volatile uint16_t *adc) {
 8000d7c:	b5b0      	push	{r4, r5, r7, lr}
 8000d7e:	b0aa      	sub	sp, #168	@ 0xa8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]

	struct Lna lna;
    // Early return if ADC pointer is NULL
    if (!adc) {
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d109      	bne.n	8000da0 <calulate_lna_real_values+0x24>
        return (lna); // Return an empty struct
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	230c      	movs	r3, #12
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	0010      	movs	r0, r2
 8000d94:	0019      	movs	r1, r3
 8000d96:	2398      	movs	r3, #152	@ 0x98
 8000d98:	001a      	movs	r2, r3
 8000d9a:	f005 fa9c 	bl	80062d6 <memcpy>
 8000d9e:	e05f      	b.n	8000e60 <calulate_lna_real_values+0xe4>
    }
	uint8_t pout_fix = 1;
 8000da0:	21a7      	movs	r1, #167	@ 0xa7
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
	uint8_t gain_fix = -10;
 8000da8:	25a6      	movs	r5, #166	@ 0xa6
 8000daa:	197b      	adds	r3, r7, r5
 8000dac:	22f6      	movs	r2, #246	@ 0xf6
 8000dae:	701a      	strb	r2, [r3, #0]
	lna.pout = get_dbm_pout(adc[POUT_INDEX], pout_fix);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0019      	movs	r1, r3
 8000dbc:	0010      	movs	r0, r2
 8000dbe:	f7ff ff2f 	bl	8000c20 <get_dbm_pout>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	240c      	movs	r4, #12
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	709a      	strb	r2, [r3, #2]
	lna.current = get_current(adc[CURRENT_INDEX], 0);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3302      	adds	r3, #2
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff ff96 	bl	8000d08 <get_current>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	001a      	movs	r2, r3
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	70da      	strb	r2, [r3, #3]
	lna.gain = get_db_gain(adc[GAIN_INDEX], gain_fix);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	3304      	adds	r3, #4
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	197b      	adds	r3, r7, r5
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	0019      	movs	r1, r3
 8000df2:	0010      	movs	r0, r2
 8000df4:	f7ff feda 	bl	8000bac <get_db_gain>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	001a      	movs	r2, r3
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	705a      	strb	r2, [r3, #1]
	lna.voltage = get_voltage(adc[VOLTAGE_INDEX], 0) / 10;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	3306      	adds	r3, #6
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff ff46 	bl	8000c9c <get_voltage>
 8000e10:	0003      	movs	r3, r0
 8000e12:	210a      	movs	r1, #10
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff f97d 	bl	8000114 <__udivsi3>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	715a      	strb	r2, [r3, #5]
	lna.attenuation = eeprom_1byte_read(LNA_ATT_ADDR);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff faec 	bl	8000400 <eeprom_1byte_read>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	0021      	movs	r1, r4
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	701a      	strb	r2, [r3, #0]
	lna.pin = lna.pout - lna.gain + lna.attenuation;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	789b      	ldrb	r3, [r3, #2]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	18d3      	adds	r3, r2, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	b25a      	sxtb	r2, r3
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	711a      	strb	r2, [r3, #4]
	return (lna);
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	0010      	movs	r0, r2
 8000e56:	0019      	movs	r1, r3
 8000e58:	2398      	movs	r3, #152	@ 0x98
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	f005 fa3b 	bl	80062d6 <memcpy>
}
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b02a      	add	sp, #168	@ 0xa8
 8000e66:	bdb0      	pop	{r4, r5, r7, pc}

08000e68 <lna_check_valid_str>:
		if (READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE))
			buffer[rcvcount++] = USART1->RDR;
	}
}

bool lna_check_valid_str(uint8_t *buffer) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	if (!buffer)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <lna_check_valid_str+0x12>
		return (false); // Early return if buffer is NULL
 8000e76:	2300      	movs	r3, #0
 8000e78:	e01f      	b.n	8000eba <lna_check_valid_str+0x52>

	if (buffer[0] != LTEL_START_MARK)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e80:	d001      	beq.n	8000e86 <lna_check_valid_str+0x1e>
		return (false); // First byte check
 8000e82:	2300      	movs	r3, #0
 8000e84:	e019      	b.n	8000eba <lna_check_valid_str+0x52>

	if (buffer[1] != MODULE_FUNCTION)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b09      	cmp	r3, #9
 8000e8e:	d001      	beq.n	8000e94 <lna_check_valid_str+0x2c>
		return (false); // Second byte check
 8000e90:	2300      	movs	r3, #0
 8000e92:	e012      	b.n	8000eba <lna_check_valid_str+0x52>

	if (buffer[2] != MODULE_ADDR)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3302      	adds	r3, #2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d001      	beq.n	8000ea2 <lna_check_valid_str+0x3a>
		return (false); // Third byte check
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e00b      	b.n	8000eba <lna_check_valid_str+0x52>

	// Search for end mark efficiently using memchr
	if (memchr(buffer + 3, LTEL_END_MARK, RX_UART1_BUFFLEN - 3) == NULL)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	2216      	movs	r2, #22
 8000ea8:	217f      	movs	r1, #127	@ 0x7f
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f005 fa08 	bl	80062c0 <memchr>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d101      	bne.n	8000eb8 <lna_check_valid_str+0x50>
		return (false);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e000      	b.n	8000eba <lna_check_valid_str+0x52>

	return (true);
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <set_attenuation_to_bda4601>:

void set_attenuation_to_bda4601(uint8_t attenuation_value, uint8_t repetitions) {
 8000ec2:	b590      	push	{r4, r7, lr}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	0002      	movs	r2, r0
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	1dbb      	adds	r3, r7, #6
 8000ed0:	1c0a      	adds	r2, r1, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_ATTENUATION = 31;
 8000ed4:	210c      	movs	r1, #12
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	221f      	movs	r2, #31
 8000eda:	701a      	strb	r2, [r3, #0]
	const uint8_t BITS_TO_SEND = 6;
 8000edc:	230b      	movs	r3, #11
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	2206      	movs	r2, #6
 8000ee2:	701a      	strb	r2, [r3, #0]

	// Validate and adjust the attenuation value if necessary
	attenuation_value =
 8000ee4:	1dfa      	adds	r2, r7, #7
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d804      	bhi.n	8000efa <set_attenuation_to_bda4601+0x38>
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	18db      	adds	r3, r3, r3
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	e000      	b.n	8000efc <set_attenuation_to_bda4601+0x3a>
 8000efa:	2200      	movs	r2, #0
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	701a      	strb	r2, [r3, #0]
			(attenuation_value > MAX_ATTENUATION) ? 0 : attenuation_value * 2;

	for (uint8_t i = 0; i < repetitions; i++) {
 8000f00:	230f      	movs	r3, #15
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e058      	b.n	8000fbc <set_attenuation_to_bda4601+0xfa>
		uint8_t mask = 0b00100000;
 8000f0a:	230e      	movs	r3, #14
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	2220      	movs	r2, #32
 8000f10:	701a      	strb	r2, [r3, #0]

		// Send the 6 configuration bits
		for (uint8_t j = 0; j < BITS_TO_SEND; j++) {
 8000f12:	230d      	movs	r3, #13
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	e030      	b.n	8000f7e <set_attenuation_to_bda4601+0xbc>
			bool is_bit_set = mask & attenuation_value;
 8000f1c:	240e      	movs	r4, #14
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	1dfa      	adds	r2, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	4013      	ands	r3, r2
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	200a      	movs	r0, #10
 8000f2c:	183b      	adds	r3, r7, r0
 8000f2e:	1e51      	subs	r1, r2, #1
 8000f30:	418a      	sbcs	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]

			// Set the data pin based on the current bit
			HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin,
 8000f34:	183b      	adds	r3, r7, r0
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	001a      	movs	r2, r3
 8000f3a:	23a0      	movs	r3, #160	@ 0xa0
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	2120      	movs	r1, #32
 8000f40:	0018      	movs	r0, r3
 8000f42:	f002 fe27 	bl	8003b94 <HAL_GPIO_WritePin>
					is_bit_set ? GPIO_PIN_SET : GPIO_PIN_RESET);

			// Set the clock pin high and then low
			HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_SET);
 8000f46:	23a0      	movs	r3, #160	@ 0xa0
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f002 fe20 	bl	8003b94 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f001 f8e9 	bl	800212c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_RESET);
 8000f5a:	23a0      	movs	r3, #160	@ 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2110      	movs	r1, #16
 8000f62:	0018      	movs	r0, r3
 8000f64:	f002 fe16 	bl	8003b94 <HAL_GPIO_WritePin>

			mask >>= 1; // Shift the mask one position to the right
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	193a      	adds	r2, r7, r4
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	0852      	lsrs	r2, r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < BITS_TO_SEND; j++) {
 8000f72:	210d      	movs	r1, #13
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	3201      	adds	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	230d      	movs	r3, #13
 8000f80:	18fa      	adds	r2, r7, r3
 8000f82:	230b      	movs	r3, #11
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	7812      	ldrb	r2, [r2, #0]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d3c6      	bcc.n	8000f1c <set_attenuation_to_bda4601+0x5a>
		}

		// Set the LE pin high and then low
		HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_SET);
 8000f8e:	23a0      	movs	r3, #160	@ 0xa0
 8000f90:	05db      	lsls	r3, r3, #23
 8000f92:	2201      	movs	r2, #1
 8000f94:	2102      	movs	r1, #2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f002 fdfc 	bl	8003b94 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f001 f8c5 	bl	800212c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_RESET);
 8000fa2:	23a0      	movs	r3, #160	@ 0xa0
 8000fa4:	05db      	lsls	r3, r3, #23
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2102      	movs	r1, #2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f002 fdf2 	bl	8003b94 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < repetitions; i++) {
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	781a      	ldrb	r2, [r3, #0]
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	3201      	adds	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	18fa      	adds	r2, r7, r3
 8000fc0:	1dbb      	adds	r3, r7, #6
 8000fc2:	7812      	ldrb	r2, [r2, #0]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d39f      	bcc.n	8000f0a <set_attenuation_to_bda4601+0x48>
	}
}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b005      	add	sp, #20
 8000fd2:	bd90      	pop	{r4, r7, pc}

08000fd4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	46c6      	mov	lr, r8
 8000fd8:	b500      	push	{lr}
 8000fda:	b0fe      	sub	sp, #504	@ 0x1f8
 8000fdc:	af24      	add	r7, sp, #144	@ 0x90
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fde:	f001 f81f 	bl	8002020 <HAL_Init>

	/* USER CODE BEGIN Init */

	/* enable clock access ro GPIOA and GPIOB */
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);
 8000fe2:	4bf5      	ldr	r3, [pc, #980]	@ (80013b8 <main+0x3e4>)
 8000fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fe6:	4bf4      	ldr	r3, [pc, #976]	@ (80013b8 <main+0x3e4>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	430a      	orrs	r2, r1
 8000fec:	635a      	str	r2, [r3, #52]	@ 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 8000fee:	4bf2      	ldr	r3, [pc, #968]	@ (80013b8 <main+0x3e4>)
 8000ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ff2:	4bf1      	ldr	r3, [pc, #964]	@ (80013b8 <main+0x3e4>)
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	635a      	str	r2, [r3, #52]	@ 0x34

	/* PBA15 as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE15_0);
 8000ffa:	23a0      	movs	r3, #160	@ 0xa0
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	23a0      	movs	r3, #160	@ 0xa0
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	05c9      	lsls	r1, r1, #23
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE15_1);
 800100c:	23a0      	movs	r3, #160	@ 0xa0
 800100e:	05db      	lsls	r3, r3, #23
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	23a0      	movs	r3, #160	@ 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	0052      	lsls	r2, r2, #1
 8001018:	0852      	lsrs	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

	/* PB1 as output */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 800101c:	4be7      	ldr	r3, [pc, #924]	@ (80013bc <main+0x3e8>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4be6      	ldr	r3, [pc, #920]	@ (80013bc <main+0x3e8>)
 8001022:	2104      	movs	r1, #4
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8001028:	4be4      	ldr	r3, [pc, #912]	@ (80013bc <main+0x3e8>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4be3      	ldr	r3, [pc, #908]	@ (80013bc <main+0x3e8>)
 800102e:	2108      	movs	r1, #8
 8001030:	438a      	bics	r2, r1
 8001032:	601a      	str	r2, [r3, #0]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001034:	f000 fb0a 	bl	800164c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_GPIO_Init();
 8001038:	f000 fc7c 	bl	8001934 <MX_GPIO_Init>
	MX_DMA_Init();
 800103c:	f000 fc54 	bl	80018e8 <MX_DMA_Init>
	MX_ADC1_Init();
 8001040:	f000 fb62 	bl	8001708 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8001044:	f000 fc02 	bl	800184c <MX_USART1_UART_Init>
//	MX_IWDG_Init();
	i2c1_init();
 8001048:	f7ff fa76 	bl	8000538 <i2c1_init>
	/* USER CODE BEGIN 2 */

// Calibrate The ADC On Power-Up For Better Accuracy
	//uint8_t addrs[5];
	//i2c1_scanner(addrs);
	HAL_ADCEx_Calibration_Start(&hadc1);
 800104c:	4bdc      	ldr	r3, [pc, #880]	@ (80013c0 <main+0x3ec>)
 800104e:	0018      	movs	r0, r3
 8001050:	f002 f810 	bl	8003074 <HAL_ADCEx_Calibration_Start>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001054:	49db      	ldr	r1, [pc, #876]	@ (80013c4 <main+0x3f0>)
 8001056:	4bdc      	ldr	r3, [pc, #880]	@ (80013c8 <main+0x3f4>)
 8001058:	2201      	movs	r2, #1
 800105a:	0018      	movs	r0, r3
 800105c:	f003 fcde 	bl	8004a1c <HAL_UART_Receive_IT>

	tx_buffer_size = sprintf((char*) UART1_txBuffer, "LNA init\n\r");
 8001060:	4ada      	ldr	r2, [pc, #872]	@ (80013cc <main+0x3f8>)
 8001062:	4bdb      	ldr	r3, [pc, #876]	@ (80013d0 <main+0x3fc>)
 8001064:	0011      	movs	r1, r2
 8001066:	0018      	movs	r0, r3
 8001068:	f005 f8c4 	bl	80061f4 <siprintf>
 800106c:	0003      	movs	r3, r0
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4bd8      	ldr	r3, [pc, #864]	@ (80013d4 <main+0x400>)
 8001072:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	0219      	lsls	r1, r3, #8
 8001078:	23a0      	movs	r3, #160	@ 0xa0
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	2201      	movs	r2, #1
 800107e:	0018      	movs	r0, r3
 8001080:	f002 fd88 	bl	8003b94 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, UART1_txBuffer, tx_buffer_size,
 8001084:	4bd3      	ldr	r3, [pc, #844]	@ (80013d4 <main+0x400>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	001a      	movs	r2, r3
 800108a:	23fa      	movs	r3, #250	@ 0xfa
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	49d0      	ldr	r1, [pc, #832]	@ (80013d0 <main+0x3fc>)
 8001090:	48cd      	ldr	r0, [pc, #820]	@ (80013c8 <main+0x3f4>)
 8001092:	f003 fc1f 	bl	80048d4 <HAL_UART_Transmit>
	UART_TRANSMIT_TIMEOUT);

	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	0219      	lsls	r1, r3, #8
 800109a:	23a0      	movs	r3, #160	@ 0xa0
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	2200      	movs	r2, #0
 80010a0:	0018      	movs	r0, r3
 80010a2:	f002 fd77 	bl	8003b94 <HAL_GPIO_WritePin>
	uint8_t tries = 3;
 80010a6:	2444      	movs	r4, #68	@ 0x44
 80010a8:	34ff      	adds	r4, #255	@ 0xff
 80010aa:	2520      	movs	r5, #32
 80010ac:	1963      	adds	r3, r4, r5
 80010ae:	19db      	adds	r3, r3, r7
 80010b0:	2203      	movs	r2, #3
 80010b2:	701a      	strb	r2, [r3, #0]
	set_attenuation_to_bda4601(eeprom_1byte_read(LNA_ATT_ADDR), tries);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff f9a3 	bl	8000400 <eeprom_1byte_read>
 80010ba:	0003      	movs	r3, r0
 80010bc:	001a      	movs	r2, r3
 80010be:	1963      	adds	r3, r4, r5
 80010c0:	19db      	adds	r3, r3, r7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	0019      	movs	r1, r3
 80010c6:	0010      	movs	r0, r2
 80010c8:	f7ff fefb 	bl	8000ec2 <set_attenuation_to_bda4601>

	if (eeprom_1byte_read(POUT_ISCALIBRATED_ADDR) != POUT_ISCALIBRATED) {
 80010cc:	2007      	movs	r0, #7
 80010ce:	f7ff f997 	bl	8000400 <eeprom_1byte_read>
 80010d2:	0003      	movs	r3, r0
 80010d4:	2baa      	cmp	r3, #170	@ 0xaa
 80010d6:	d00a      	beq.n	80010ee <main+0x11a>
		eeprom_2byte_write(POUT_ADC_MIN_ADDR, POUT_ADC_MIN);
 80010d8:	23f4      	movs	r3, #244	@ 0xf4
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	0019      	movs	r1, r3
 80010de:	2005      	movs	r0, #5
 80010e0:	f7ff f9d8 	bl	8000494 <eeprom_2byte_write>
		eeprom_2byte_write(POUT_ADC_MAX_ADDR, POUT_ADC_MAX);
 80010e4:	4bbc      	ldr	r3, [pc, #752]	@ (80013d8 <main+0x404>)
 80010e6:	0019      	movs	r1, r3
 80010e8:	2003      	movs	r0, #3
 80010ea:	f7ff f9d3 	bl	8000494 <eeprom_2byte_write>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);
 80010ee:	49bb      	ldr	r1, [pc, #748]	@ (80013dc <main+0x408>)
 80010f0:	4bb3      	ldr	r3, [pc, #716]	@ (80013c0 <main+0x3ec>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	0018      	movs	r0, r3
 80010f6:	f001 fb3d 	bl	8002774 <HAL_ADC_Start_DMA>
	led_counter = HAL_GetTick();
 80010fa:	f001 f80d 	bl	8002118 <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	4bb7      	ldr	r3, [pc, #732]	@ (80013e0 <main+0x40c>)
 8001102:	601a      	str	r2, [r3, #0]
	uint32_t lna_print_counter = HAL_GetTick();
 8001104:	f001 f808 	bl	8002118 <HAL_GetTick>
 8001108:	0003      	movs	r3, r0
 800110a:	22a2      	movs	r2, #162	@ 0xa2
 800110c:	0052      	lsls	r2, r2, #1
 800110e:	2120      	movs	r1, #32
 8001110:	1852      	adds	r2, r2, r1
 8001112:	19d2      	adds	r2, r2, r7
 8001114:	6013      	str	r3, [r2, #0]
	set_attenuation_to_bda4601(eeprom_1byte_read(LNA_ATT_ADDR), 5);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff f972 	bl	8000400 <eeprom_1byte_read>
 800111c:	0003      	movs	r3, r0
 800111e:	2105      	movs	r1, #5
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff fece 	bl	8000ec2 <set_attenuation_to_bda4601>
//Fin function 1 second
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (isDataReady) {
 8001126:	4baf      	ldr	r3, [pc, #700]	@ (80013e4 <main+0x410>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d100      	bne.n	8001130 <main+0x15c>
 800112e:	e1c7      	b.n	80014c0 <main+0x4ec>
 8001130:	466b      	mov	r3, sp
 8001132:	001e      	movs	r6, r3
			struct Lna lna;
			uint8_t LTEL_FRAME_LENGTH = 14;
 8001134:	21a1      	movs	r1, #161	@ 0xa1
 8001136:	0049      	lsls	r1, r1, #1
 8001138:	2520      	movs	r5, #32
 800113a:	194b      	adds	r3, r1, r5
 800113c:	19db      	adds	r3, r3, r7
 800113e:	220e      	movs	r2, #14
 8001140:	701a      	strb	r2, [r3, #0]
			uint8_t frame[LTEL_FRAME_LENGTH];
 8001142:	194b      	adds	r3, r1, r5
 8001144:	19db      	adds	r3, r3, r7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	001a      	movs	r2, r3
 800114a:	3a01      	subs	r2, #1
 800114c:	219e      	movs	r1, #158	@ 0x9e
 800114e:	0049      	lsls	r1, r1, #1
 8001150:	1949      	adds	r1, r1, r5
 8001152:	19c9      	adds	r1, r1, r7
 8001154:	600a      	str	r2, [r1, #0]
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	2200      	movs	r2, #0
 800115a:	60fa      	str	r2, [r7, #12]
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	68f9      	ldr	r1, [r7, #12]
 8001160:	0002      	movs	r2, r0
 8001162:	0f52      	lsrs	r2, r2, #29
 8001164:	000c      	movs	r4, r1
 8001166:	00e4      	lsls	r4, r4, #3
 8001168:	61fc      	str	r4, [r7, #28]
 800116a:	69fc      	ldr	r4, [r7, #28]
 800116c:	4314      	orrs	r4, r2
 800116e:	61fc      	str	r4, [r7, #28]
 8001170:	0002      	movs	r2, r0
 8001172:	00d2      	lsls	r2, r2, #3
 8001174:	61ba      	str	r2, [r7, #24]
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	2200      	movs	r2, #0
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	6838      	ldr	r0, [r7, #0]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	0002      	movs	r2, r0
 8001182:	0f52      	lsrs	r2, r2, #29
 8001184:	000c      	movs	r4, r1
 8001186:	00e4      	lsls	r4, r4, #3
 8001188:	617c      	str	r4, [r7, #20]
 800118a:	697c      	ldr	r4, [r7, #20]
 800118c:	4314      	orrs	r4, r2
 800118e:	617c      	str	r4, [r7, #20]
 8001190:	0002      	movs	r2, r0
 8001192:	00d2      	lsls	r2, r2, #3
 8001194:	613a      	str	r2, [r7, #16]
 8001196:	3307      	adds	r3, #7
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	466a      	mov	r2, sp
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	469d      	mov	sp, r3
 80011a2:	ab24      	add	r3, sp, #144	@ 0x90
 80011a4:	3300      	adds	r3, #0
 80011a6:	229c      	movs	r2, #156	@ 0x9c
 80011a8:	0052      	lsls	r2, r2, #1
 80011aa:	1952      	adds	r2, r2, r5
 80011ac:	19d2      	adds	r2, r2, r7
 80011ae:	6013      	str	r3, [r2, #0]
			switch (UART1_rxBuffer[3]) {
 80011b0:	4b8d      	ldr	r3, [pc, #564]	@ (80013e8 <main+0x414>)
 80011b2:	78db      	ldrb	r3, [r3, #3]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3b11      	subs	r3, #17
 80011b8:	2b13      	cmp	r3, #19
 80011ba:	d900      	bls.n	80011be <main+0x1ea>
 80011bc:	e178      	b.n	80014b0 <main+0x4dc>
 80011be:	009a      	lsls	r2, r3, #2
 80011c0:	4b8a      	ldr	r3, [pc, #552]	@ (80013ec <main+0x418>)
 80011c2:	18d3      	adds	r3, r2, r3
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	469f      	mov	pc, r3
			case QUERY_PARAMETER_LTEL:
				lna = calulate_lna_real_values(adcResultsDMA);
 80011c8:	2598      	movs	r5, #152	@ 0x98
 80011ca:	2220      	movs	r2, #32
 80011cc:	18ab      	adds	r3, r5, r2
 80011ce:	19dc      	adds	r4, r3, r7
 80011d0:	18bb      	adds	r3, r7, r2
 80011d2:	4a82      	ldr	r2, [pc, #520]	@ (80013dc <main+0x408>)
 80011d4:	0011      	movs	r1, r2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff fdd0 	bl	8000d7c <calulate_lna_real_values>
 80011dc:	4b84      	ldr	r3, [pc, #528]	@ (80013f0 <main+0x41c>)
 80011de:	22a4      	movs	r2, #164	@ 0xa4
 80011e0:	0052      	lsls	r2, r2, #1
 80011e2:	189b      	adds	r3, r3, r2
 80011e4:	2120      	movs	r1, #32
 80011e6:	468c      	mov	ip, r1
 80011e8:	44bc      	add	ip, r7
 80011ea:	4463      	add	r3, ip
 80011ec:	0020      	movs	r0, r4
 80011ee:	0019      	movs	r1, r3
 80011f0:	2398      	movs	r3, #152	@ 0x98
 80011f2:	001a      	movs	r2, r3
 80011f4:	f005 f86f 	bl	80062d6 <memcpy>
				packet_lna_for_ltel_protocol(frame, lna);
 80011f8:	2220      	movs	r2, #32
 80011fa:	18ab      	adds	r3, r5, r2
 80011fc:	19dc      	adds	r4, r3, r7
 80011fe:	239c      	movs	r3, #156	@ 0x9c
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	189b      	adds	r3, r3, r2
 8001204:	19d9      	adds	r1, r3, r7
 8001206:	680d      	ldr	r5, [r1, #0]
 8001208:	466b      	mov	r3, sp
 800120a:	0018      	movs	r0, r3
 800120c:	0021      	movs	r1, r4
 800120e:	310c      	adds	r1, #12
 8001210:	238c      	movs	r3, #140	@ 0x8c
 8001212:	001a      	movs	r2, r3
 8001214:	f005 f85f 	bl	80062d6 <memcpy>
 8001218:	6821      	ldr	r1, [r4, #0]
 800121a:	6862      	ldr	r2, [r4, #4]
 800121c:	68a3      	ldr	r3, [r4, #8]
 800121e:	0028      	movs	r0, r5
 8001220:	f7ff fbc3 	bl	80009aa <packet_lna_for_ltel_protocol>
				HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	0219      	lsls	r1, r3, #8
 8001228:	23a0      	movs	r3, #160	@ 0xa0
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	2201      	movs	r2, #1
 800122e:	0018      	movs	r0, r3
 8001230:	f002 fcb0 	bl	8003b94 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, frame, LTEL_FRAME_SIZE,
 8001234:	23fa      	movs	r3, #250	@ 0xfa
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	229c      	movs	r2, #156	@ 0x9c
 800123a:	0052      	lsls	r2, r2, #1
 800123c:	2120      	movs	r1, #32
 800123e:	1852      	adds	r2, r2, r1
 8001240:	19d2      	adds	r2, r2, r7
 8001242:	6811      	ldr	r1, [r2, #0]
 8001244:	4860      	ldr	r0, [pc, #384]	@ (80013c8 <main+0x3f4>)
 8001246:	220e      	movs	r2, #14
 8001248:	f003 fb44 	bl	80048d4 <HAL_UART_Transmit>
				UART_TRANSMIT_TIMEOUT);
				HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	0219      	lsls	r1, r3, #8
 8001250:	23a0      	movs	r3, #160	@ 0xa0
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	2200      	movs	r2, #0
 8001256:	0018      	movs	r0, r3
 8001258:	f002 fc9c 	bl	8003b94 <HAL_GPIO_WritePin>
				break;
 800125c:	e129      	b.n	80014b2 <main+0x4de>
			case SET_ATT_LTEL:
				uint8_t attenuation_value = UART1_rxBuffer[6];
 800125e:	2138      	movs	r1, #56	@ 0x38
 8001260:	31ff      	adds	r1, #255	@ 0xff
 8001262:	2520      	movs	r5, #32
 8001264:	194b      	adds	r3, r1, r5
 8001266:	19db      	adds	r3, r3, r7
 8001268:	4a5f      	ldr	r2, [pc, #380]	@ (80013e8 <main+0x414>)
 800126a:	7992      	ldrb	r2, [r2, #6]
 800126c:	701a      	strb	r2, [r3, #0]
				uint8_t tries = 2;
 800126e:	209b      	movs	r0, #155	@ 0x9b
 8001270:	0040      	lsls	r0, r0, #1
 8001272:	1943      	adds	r3, r0, r5
 8001274:	19db      	adds	r3, r3, r7
 8001276:	2202      	movs	r2, #2
 8001278:	701a      	strb	r2, [r3, #0]
				set_attenuation_to_bda4601(attenuation_value, tries);
 800127a:	1943      	adds	r3, r0, r5
 800127c:	19db      	adds	r3, r3, r7
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	000c      	movs	r4, r1
 8001282:	1963      	adds	r3, r4, r5
 8001284:	19db      	adds	r3, r3, r7
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	0011      	movs	r1, r2
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff fe19 	bl	8000ec2 <set_attenuation_to_bda4601>
				eeprom_1byte_write(LNA_ATT_ADDR, attenuation_value);
 8001290:	1963      	adds	r3, r4, r5
 8001292:	19db      	adds	r3, r3, r7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	0019      	movs	r1, r3
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff f8d0 	bl	800043e <eeprom_1byte_write>
				tx_buffer_size = sprintf((char*) UART1_txBuffer,
 800129e:	1963      	adds	r3, r4, r5
 80012a0:	19db      	adds	r3, r3, r7
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	4953      	ldr	r1, [pc, #332]	@ (80013f4 <main+0x420>)
 80012a6:	4b4a      	ldr	r3, [pc, #296]	@ (80013d0 <main+0x3fc>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f004 ffa3 	bl	80061f4 <siprintf>
 80012ae:	0003      	movs	r3, r0
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b48      	ldr	r3, [pc, #288]	@ (80013d4 <main+0x400>)
 80012b4:	701a      	strb	r2, [r3, #0]
						"Attenuation %u\r\n", attenuation_value);
				HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	0219      	lsls	r1, r3, #8
 80012ba:	23a0      	movs	r3, #160	@ 0xa0
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	2201      	movs	r2, #1
 80012c0:	0018      	movs	r0, r3
 80012c2:	f002 fc67 	bl	8003b94 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, UART1_txBuffer, tx_buffer_size,
 80012c6:	4b43      	ldr	r3, [pc, #268]	@ (80013d4 <main+0x400>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	001a      	movs	r2, r3
 80012cc:	23fa      	movs	r3, #250	@ 0xfa
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	493f      	ldr	r1, [pc, #252]	@ (80013d0 <main+0x3fc>)
 80012d2:	483d      	ldr	r0, [pc, #244]	@ (80013c8 <main+0x3f4>)
 80012d4:	f003 fafe 	bl	80048d4 <HAL_UART_Transmit>
				UART_TRANSMIT_TIMEOUT);
				HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	0219      	lsls	r1, r3, #8
 80012dc:	23a0      	movs	r3, #160	@ 0xa0
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	2200      	movs	r2, #0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f002 fc56 	bl	8003b94 <HAL_GPIO_WritePin>
				break;
 80012e8:	e0e3      	b.n	80014b2 <main+0x4de>
			case SET_POUT_MAX:
				eeprom_2byte_write(POUT_ADC_MAX_ADDR,
						adcResultsDMA[POUT_INDEX]);
 80012ea:	4b3c      	ldr	r3, [pc, #240]	@ (80013dc <main+0x408>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
				eeprom_2byte_write(POUT_ADC_MAX_ADDR,
 80012f0:	0019      	movs	r1, r3
 80012f2:	2003      	movs	r0, #3
 80012f4:	f7ff f8ce 	bl	8000494 <eeprom_2byte_write>
				HAL_Delay(5);
 80012f8:	2005      	movs	r0, #5
 80012fa:	f000 ff17 	bl	800212c <HAL_Delay>
				eeprom_1byte_write(POUT_ISCALIBRATED_ADDR, POUT_ISCALIBRATED);
 80012fe:	21aa      	movs	r1, #170	@ 0xaa
 8001300:	2007      	movs	r0, #7
 8001302:	f7ff f89c 	bl	800043e <eeprom_1byte_write>
				tx_buffer_size = sprintf((char*) UART1_txBuffer,
						"Saved adc = %d as Pout 0 [dBm]\n\r",
						adcResultsDMA[POUT_INDEX]);
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <main+0x408>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
				tx_buffer_size = sprintf((char*) UART1_txBuffer,
 800130c:	001a      	movs	r2, r3
 800130e:	493a      	ldr	r1, [pc, #232]	@ (80013f8 <main+0x424>)
 8001310:	4b2f      	ldr	r3, [pc, #188]	@ (80013d0 <main+0x3fc>)
 8001312:	0018      	movs	r0, r3
 8001314:	f004 ff6e 	bl	80061f4 <siprintf>
 8001318:	0003      	movs	r3, r0
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <main+0x400>)
 800131e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	0219      	lsls	r1, r3, #8
 8001324:	23a0      	movs	r3, #160	@ 0xa0
 8001326:	05db      	lsls	r3, r3, #23
 8001328:	2201      	movs	r2, #1
 800132a:	0018      	movs	r0, r3
 800132c:	f002 fc32 	bl	8003b94 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, UART1_txBuffer, tx_buffer_size,
 8001330:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <main+0x400>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	001a      	movs	r2, r3
 8001336:	23fa      	movs	r3, #250	@ 0xfa
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4925      	ldr	r1, [pc, #148]	@ (80013d0 <main+0x3fc>)
 800133c:	4822      	ldr	r0, [pc, #136]	@ (80013c8 <main+0x3f4>)
 800133e:	f003 fac9 	bl	80048d4 <HAL_UART_Transmit>
				UART_TRANSMIT_TIMEOUT);
				HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	0219      	lsls	r1, r3, #8
 8001346:	23a0      	movs	r3, #160	@ 0xa0
 8001348:	05db      	lsls	r3, r3, #23
 800134a:	2200      	movs	r2, #0
 800134c:	0018      	movs	r0, r3
 800134e:	f002 fc21 	bl	8003b94 <HAL_GPIO_WritePin>

				break;
 8001352:	e0ae      	b.n	80014b2 <main+0x4de>
			case SET_POUT_MIN:
				eeprom_2byte_write(POUT_ADC_MIN_ADDR,
						adcResultsDMA[POUT_INDEX]);
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <main+0x408>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
				eeprom_2byte_write(POUT_ADC_MIN_ADDR,
 800135a:	0019      	movs	r1, r3
 800135c:	2005      	movs	r0, #5
 800135e:	f7ff f899 	bl	8000494 <eeprom_2byte_write>
				HAL_Delay(5);
 8001362:	2005      	movs	r0, #5
 8001364:	f000 fee2 	bl	800212c <HAL_Delay>
				eeprom_1byte_write(POUT_ISCALIBRATED_ADDR, POUT_ISCALIBRATED);
 8001368:	21aa      	movs	r1, #170	@ 0xaa
 800136a:	2007      	movs	r0, #7
 800136c:	f7ff f867 	bl	800043e <eeprom_1byte_write>
				tx_buffer_size = sprintf((char*) UART1_txBuffer,
						"Saved adc = %d as Pout -30 [dBm]\n\r",
						adcResultsDMA[POUT_INDEX]);
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <main+0x408>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
				tx_buffer_size = sprintf((char*) UART1_txBuffer,
 8001376:	001a      	movs	r2, r3
 8001378:	4920      	ldr	r1, [pc, #128]	@ (80013fc <main+0x428>)
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <main+0x3fc>)
 800137c:	0018      	movs	r0, r3
 800137e:	f004 ff39 	bl	80061f4 <siprintf>
 8001382:	0003      	movs	r3, r0
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <main+0x400>)
 8001388:	701a      	strb	r2, [r3, #0]
				uart1_write_frame((char*) UART1_txBuffer, tx_buffer_size);
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <main+0x400>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <main+0x3fc>)
 8001390:	0011      	movs	r1, r2
 8001392:	0018      	movs	r0, r3
 8001394:	f000 fd96 	bl	8001ec4 <uart1_write_frame>
				break;
 8001398:	e08b      	b.n	80014b2 <main+0x4de>
			case QUERY_PARAMETER_STR:
				isPrintEnable = !isPrintEnable;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <main+0x42c>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	4193      	sbcs	r3, r2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2201      	movs	r2, #1
 80013a6:	4053      	eors	r3, r2
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	1c1a      	adds	r2, r3, #0
 80013ac:	2301      	movs	r3, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <main+0x42c>)
 80013b4:	701a      	strb	r2, [r3, #0]
				break;
 80013b6:	e07c      	b.n	80014b2 <main+0x4de>
 80013b8:	40021000 	.word	0x40021000
 80013bc:	50000400 	.word	0x50000400
 80013c0:	20000078 	.word	0x20000078
 80013c4:	20000252 	.word	0x20000252
 80013c8:	20000138 	.word	0x20000138
 80013cc:	080069e0 	.word	0x080069e0
 80013d0:	20000254 	.word	0x20000254
 80013d4:	200002b8 	.word	0x200002b8
 80013d8:	00000729 	.word	0x00000729
 80013dc:	20000228 	.word	0x20000228
 80013e0:	20000234 	.word	0x20000234
 80013e4:	200002b9 	.word	0x200002b9
 80013e8:	20000238 	.word	0x20000238
 80013ec:	08006ac8 	.word	0x08006ac8
 80013f0:	fffffeb8 	.word	0xfffffeb8
 80013f4:	080069ec 	.word	0x080069ec
 80013f8:	08006a00 	.word	0x08006a00
 80013fc:	08006a24 	.word	0x08006a24
 8001400:	20000230 	.word	0x20000230
			case QUERY_ADC:
				sprintf((char*) UART1_txBuffer,
						"Pout %d  \t Gain %u \t Curent %u \t Voltage %u\r\n",
						adcResultsDMA[POUT_INDEX], adcResultsDMA[GAIN_INDEX],
 8001404:	4b85      	ldr	r3, [pc, #532]	@ (800161c <main+0x648>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
				sprintf((char*) UART1_txBuffer,
 800140a:	001d      	movs	r5, r3
						adcResultsDMA[POUT_INDEX], adcResultsDMA[GAIN_INDEX],
 800140c:	4b83      	ldr	r3, [pc, #524]	@ (800161c <main+0x648>)
 800140e:	889b      	ldrh	r3, [r3, #4]
 8001410:	b29b      	uxth	r3, r3
				sprintf((char*) UART1_txBuffer,
 8001412:	001c      	movs	r4, r3
						adcResultsDMA[CURRENT_INDEX],
 8001414:	4b81      	ldr	r3, [pc, #516]	@ (800161c <main+0x648>)
 8001416:	885b      	ldrh	r3, [r3, #2]
 8001418:	b29b      	uxth	r3, r3
				sprintf((char*) UART1_txBuffer,
 800141a:	001a      	movs	r2, r3
						adcResultsDMA[VOLTAGE_INDEX]);
 800141c:	4b7f      	ldr	r3, [pc, #508]	@ (800161c <main+0x648>)
 800141e:	88db      	ldrh	r3, [r3, #6]
 8001420:	b29b      	uxth	r3, r3
				sprintf((char*) UART1_txBuffer,
 8001422:	497f      	ldr	r1, [pc, #508]	@ (8001620 <main+0x64c>)
 8001424:	487f      	ldr	r0, [pc, #508]	@ (8001624 <main+0x650>)
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	9200      	str	r2, [sp, #0]
 800142a:	0023      	movs	r3, r4
 800142c:	002a      	movs	r2, r5
 800142e:	f004 fee1 	bl	80061f4 <siprintf>
				uart1_write_frame((char*) UART1_txBuffer, TX_UART1_BUFFLEN);
 8001432:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <main+0x650>)
 8001434:	2164      	movs	r1, #100	@ 0x64
 8001436:	0018      	movs	r0, r3
 8001438:	f000 fd44 	bl	8001ec4 <uart1_write_frame>
				break;
 800143c:	e039      	b.n	80014b2 <main+0x4de>
			case QUERY_PARAMETER_SIGMA:
				lna = calulate_lna_real_values(adcResultsDMA);
 800143e:	2598      	movs	r5, #152	@ 0x98
 8001440:	2220      	movs	r2, #32
 8001442:	18ab      	adds	r3, r5, r2
 8001444:	19dc      	adds	r4, r3, r7
 8001446:	18bb      	adds	r3, r7, r2
 8001448:	4a74      	ldr	r2, [pc, #464]	@ (800161c <main+0x648>)
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff fc95 	bl	8000d7c <calulate_lna_real_values>
 8001452:	4b75      	ldr	r3, [pc, #468]	@ (8001628 <main+0x654>)
 8001454:	22a4      	movs	r2, #164	@ 0xa4
 8001456:	0052      	lsls	r2, r2, #1
 8001458:	189b      	adds	r3, r3, r2
 800145a:	2120      	movs	r1, #32
 800145c:	468c      	mov	ip, r1
 800145e:	44bc      	add	ip, r7
 8001460:	4463      	add	r3, ip
 8001462:	0020      	movs	r0, r4
 8001464:	0019      	movs	r1, r3
 8001466:	2398      	movs	r3, #152	@ 0x98
 8001468:	001a      	movs	r2, r3
 800146a:	f004 ff34 	bl	80062d6 <memcpy>
				sigma_set_parameter_frame(frame, lna);
 800146e:	2220      	movs	r2, #32
 8001470:	18ab      	adds	r3, r5, r2
 8001472:	19dc      	adds	r4, r3, r7
 8001474:	239c      	movs	r3, #156	@ 0x9c
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	189b      	adds	r3, r3, r2
 800147a:	19da      	adds	r2, r3, r7
 800147c:	6815      	ldr	r5, [r2, #0]
 800147e:	466b      	mov	r3, sp
 8001480:	0018      	movs	r0, r3
 8001482:	0021      	movs	r1, r4
 8001484:	310c      	adds	r1, #12
 8001486:	238c      	movs	r3, #140	@ 0x8c
 8001488:	001a      	movs	r2, r3
 800148a:	f004 ff24 	bl	80062d6 <memcpy>
 800148e:	6821      	ldr	r1, [r4, #0]
 8001490:	6862      	ldr	r2, [r4, #4]
 8001492:	68a3      	ldr	r3, [r4, #8]
 8001494:	0028      	movs	r0, r5
 8001496:	f7ff fb01 	bl	8000a9c <sigma_set_parameter_frame>
				uart1_write_frame((char*) frame, LTEL_FRAME_SIZE);
 800149a:	239c      	movs	r3, #156	@ 0x9c
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2220      	movs	r2, #32
 80014a0:	189b      	adds	r3, r3, r2
 80014a2:	19db      	adds	r3, r3, r7
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	210e      	movs	r1, #14
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 fd0b 	bl	8001ec4 <uart1_write_frame>
				break;
 80014ae:	e000      	b.n	80014b2 <main+0x4de>
			default:
				break;
 80014b0:	46c0      	nop			@ (mov r8, r8)
			}
			isDataReady = false;
 80014b2:	4b5e      	ldr	r3, [pc, #376]	@ (800162c <main+0x658>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
			uart_clean_buffer();
 80014b8:	f000 fab2 	bl	8001a20 <uart_clean_buffer>
 80014bc:	46b5      	mov	sp, r6
 80014be:	e007      	b.n	80014d0 <main+0x4fc>
		} else {
			//lna_uart_read();
			isDataReady = lna_check_valid_str(UART1_rxBuffer);
 80014c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001630 <main+0x65c>)
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff fcd0 	bl	8000e68 <lna_check_valid_str>
 80014c8:	0003      	movs	r3, r0
 80014ca:	001a      	movs	r2, r3
 80014cc:	4b57      	ldr	r3, [pc, #348]	@ (800162c <main+0x658>)
 80014ce:	701a      	strb	r2, [r3, #0]
		}

		if (isPrintEnable)
 80014d0:	4b58      	ldr	r3, [pc, #352]	@ (8001634 <main+0x660>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d07b      	beq.n	80015d0 <main+0x5fc>
			if (HAL_GetTick() - lna_print_counter > LNA_PRINT_TIMEOUT) {
 80014d8:	f000 fe1e 	bl	8002118 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	23a2      	movs	r3, #162	@ 0xa2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2020      	movs	r0, #32
 80014e4:	181b      	adds	r3, r3, r0
 80014e6:	19d9      	adds	r1, r3, r7
 80014e8:	680b      	ldr	r3, [r1, #0]
 80014ea:	1ad2      	subs	r2, r2, r3
 80014ec:	23fa      	movs	r3, #250	@ 0xfa
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d96d      	bls.n	80015d0 <main+0x5fc>
				struct Lna lna;
				lna = calulate_lna_real_values(adcResultsDMA);
 80014f4:	2598      	movs	r5, #152	@ 0x98
 80014f6:	0006      	movs	r6, r0
 80014f8:	19ab      	adds	r3, r5, r6
 80014fa:	19dc      	adds	r4, r3, r7
 80014fc:	19bb      	adds	r3, r7, r6
 80014fe:	4a47      	ldr	r2, [pc, #284]	@ (800161c <main+0x648>)
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff fc3a 	bl	8000d7c <calulate_lna_real_values>
 8001508:	4b47      	ldr	r3, [pc, #284]	@ (8001628 <main+0x654>)
 800150a:	21a4      	movs	r1, #164	@ 0xa4
 800150c:	0049      	lsls	r1, r1, #1
 800150e:	1859      	adds	r1, r3, r1
 8001510:	19bb      	adds	r3, r7, r6
 8001512:	18cb      	adds	r3, r1, r3
 8001514:	0020      	movs	r0, r4
 8001516:	0019      	movs	r1, r3
 8001518:	2398      	movs	r3, #152	@ 0x98
 800151a:	001a      	movs	r2, r3
 800151c:	f004 fedb 	bl	80062d6 <memcpy>
				char *buffer = (char*) UART1_txBuffer;
 8001520:	4b40      	ldr	r3, [pc, #256]	@ (8001624 <main+0x650>)
 8001522:	2098      	movs	r0, #152	@ 0x98
 8001524:	0040      	lsls	r0, r0, #1
 8001526:	0032      	movs	r2, r6
 8001528:	1881      	adds	r1, r0, r2
 800152a:	19c9      	adds	r1, r1, r7
 800152c:	600b      	str	r3, [r1, #0]
				tx_buffer_size =
						sprintf(buffer,
								"Pout %d[dBm] Att %u[dB] Gain %u[dB] Pin %d[dBm] Curent %d[mA] Voltage %u[V]\r\n",
								lna.pout, lna.attenuation, lna.gain, lna.pin,
 800152e:	0029      	movs	r1, r5
 8001530:	188b      	adds	r3, r1, r2
 8001532:	19db      	adds	r3, r3, r7
 8001534:	789b      	ldrb	r3, [r3, #2]
 8001536:	b25b      	sxtb	r3, r3
						sprintf(buffer,
 8001538:	001e      	movs	r6, r3
								lna.pout, lna.attenuation, lna.gain, lna.pin,
 800153a:	188b      	adds	r3, r1, r2
 800153c:	19db      	adds	r3, r3, r7
 800153e:	781b      	ldrb	r3, [r3, #0]
						sprintf(buffer,
 8001540:	469c      	mov	ip, r3
								lna.pout, lna.attenuation, lna.gain, lna.pin,
 8001542:	188b      	adds	r3, r1, r2
 8001544:	19db      	adds	r3, r3, r7
 8001546:	785b      	ldrb	r3, [r3, #1]
						sprintf(buffer,
 8001548:	001d      	movs	r5, r3
								lna.pout, lna.attenuation, lna.gain, lna.pin,
 800154a:	188b      	adds	r3, r1, r2
 800154c:	19db      	adds	r3, r3, r7
 800154e:	791b      	ldrb	r3, [r3, #4]
 8001550:	b25b      	sxtb	r3, r3
						sprintf(buffer,
 8001552:	4698      	mov	r8, r3
								lna.current, (uint8_t) lna.voltage);
 8001554:	0014      	movs	r4, r2
 8001556:	188b      	adds	r3, r1, r2
 8001558:	19db      	adds	r3, r3, r7
 800155a:	78db      	ldrb	r3, [r3, #3]
						sprintf(buffer,
 800155c:	001a      	movs	r2, r3
								lna.current, (uint8_t) lna.voltage);
 800155e:	190b      	adds	r3, r1, r4
 8001560:	19db      	adds	r3, r3, r7
 8001562:	795b      	ldrb	r3, [r3, #5]
						sprintf(buffer,
 8001564:	4934      	ldr	r1, [pc, #208]	@ (8001638 <main+0x664>)
 8001566:	1900      	adds	r0, r0, r4
 8001568:	19c0      	adds	r0, r0, r7
 800156a:	6800      	ldr	r0, [r0, #0]
 800156c:	9303      	str	r3, [sp, #12]
 800156e:	9202      	str	r2, [sp, #8]
 8001570:	4643      	mov	r3, r8
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	9500      	str	r5, [sp, #0]
 8001576:	4663      	mov	r3, ip
 8001578:	0032      	movs	r2, r6
 800157a:	f004 fe3b 	bl	80061f4 <siprintf>
 800157e:	0003      	movs	r3, r0
				tx_buffer_size =
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <main+0x668>)
 8001584:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DE_GPIO_Port,
 8001586:	2380      	movs	r3, #128	@ 0x80
 8001588:	0219      	lsls	r1, r3, #8
 800158a:	23a0      	movs	r3, #160	@ 0xa0
 800158c:	05db      	lsls	r3, r3, #23
 800158e:	2201      	movs	r2, #1
 8001590:	0018      	movs	r0, r3
 8001592:	f002 faff 	bl	8003b94 <HAL_GPIO_WritePin>
				DE_Pin, GPIO_PIN_SET);
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, tx_buffer_size,
 8001596:	4b29      	ldr	r3, [pc, #164]	@ (800163c <main+0x668>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	001a      	movs	r2, r3
 800159c:	23fa      	movs	r3, #250	@ 0xfa
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	2098      	movs	r0, #152	@ 0x98
 80015a2:	0040      	lsls	r0, r0, #1
 80015a4:	1901      	adds	r1, r0, r4
 80015a6:	19c9      	adds	r1, r1, r7
 80015a8:	6809      	ldr	r1, [r1, #0]
 80015aa:	4825      	ldr	r0, [pc, #148]	@ (8001640 <main+0x66c>)
 80015ac:	f003 f992 	bl	80048d4 <HAL_UART_Transmit>
				UART_TRANSMIT_TIMEOUT);
				HAL_GPIO_WritePin(DE_GPIO_Port,
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	0219      	lsls	r1, r3, #8
 80015b4:	23a0      	movs	r3, #160	@ 0xa0
 80015b6:	05db      	lsls	r3, r3, #23
 80015b8:	2200      	movs	r2, #0
 80015ba:	0018      	movs	r0, r3
 80015bc:	f002 faea 	bl	8003b94 <HAL_GPIO_WritePin>
				DE_Pin, GPIO_PIN_RESET);
				lna_print_counter = HAL_GetTick();
 80015c0:	f000 fdaa 	bl	8002118 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	22a2      	movs	r2, #162	@ 0xa2
 80015c8:	0052      	lsls	r2, r2, #1
 80015ca:	1912      	adds	r2, r2, r4
 80015cc:	19d2      	adds	r2, r2, r7
 80015ce:	6013      	str	r3, [r2, #0]

			}

		if (HAL_GetTick() - led_counter > LED_STATE_TIMEOUT)
 80015d0:	f000 fda2 	bl	8002118 <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <main+0x670>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	1ad2      	subs	r2, r2, r3
 80015dc:	23fa      	movs	r3, #250	@ 0xfa
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d905      	bls.n	80015f0 <main+0x61c>
			led_counter = HAL_GetTick();
 80015e4:	f000 fd98 	bl	8002118 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <main+0x670>)
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e59a      	b.n	8001126 <main+0x152>
		else {
			if (HAL_GetTick() - led_counter > LED_ON_TIMEOUT)
 80015f0:	f000 fd92 	bl	8002118 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <main+0x670>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b32      	cmp	r3, #50	@ 0x32
 80015fe:	d906      	bls.n	800160e <main+0x63a>
				led_off();
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <main+0x674>)
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <main+0x674>)
 8001606:	2102      	movs	r1, #2
 8001608:	438a      	bics	r2, r1
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	e58b      	b.n	8001126 <main+0x152>
			else
				led_on();
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <main+0x674>)
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <main+0x674>)
 8001614:	2102      	movs	r1, #2
 8001616:	430a      	orrs	r2, r1
 8001618:	615a      	str	r2, [r3, #20]
		if (isDataReady) {
 800161a:	e584      	b.n	8001126 <main+0x152>
 800161c:	20000228 	.word	0x20000228
 8001620:	08006a48 	.word	0x08006a48
 8001624:	20000254 	.word	0x20000254
 8001628:	fffffeb8 	.word	0xfffffeb8
 800162c:	200002b9 	.word	0x200002b9
 8001630:	20000238 	.word	0x20000238
 8001634:	20000230 	.word	0x20000230
 8001638:	08006a78 	.word	0x08006a78
 800163c:	200002b8 	.word	0x200002b8
 8001640:	20000138 	.word	0x20000138
 8001644:	20000234 	.word	0x20000234
 8001648:	50000400 	.word	0x50000400

0800164c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b093      	sub	sp, #76	@ 0x4c
 8001650:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001652:	2414      	movs	r4, #20
 8001654:	193b      	adds	r3, r7, r4
 8001656:	0018      	movs	r0, r3
 8001658:	2334      	movs	r3, #52	@ 0x34
 800165a:	001a      	movs	r2, r3
 800165c:	2100      	movs	r1, #0
 800165e:	f004 fde9 	bl	8006234 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	0018      	movs	r0, r3
 8001666:	2310      	movs	r3, #16
 8001668:	001a      	movs	r2, r3
 800166a:	2100      	movs	r1, #0
 800166c:	f004 fde2 	bl	8006234 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	0018      	movs	r0, r3
 8001676:	f002 faab 	bl	8003bd0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800167a:	193b      	adds	r3, r7, r4
 800167c:	220a      	movs	r2, #10
 800167e:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001680:	193b      	adds	r3, r7, r4
 8001682:	2280      	movs	r2, #128	@ 0x80
 8001684:	0052      	lsls	r2, r2, #1
 8001686:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001688:	0021      	movs	r1, r4
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2240      	movs	r2, #64	@ 0x40
 8001694:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2201      	movs	r2, #1
 800169a:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169c:	187b      	adds	r3, r7, r1
 800169e:	2202      	movs	r2, #2
 80016a0:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	2202      	movs	r2, #2
 80016a6:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	2210      	movs	r2, #16
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2210      	movs	r2, #16
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	2280      	movs	r2, #128	@ 0x80
 80016b8:	0292      	lsls	r2, r2, #10
 80016ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2280      	movs	r2, #128	@ 0x80
 80016c0:	0592      	lsls	r2, r2, #22
 80016c2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	0018      	movs	r0, r3
 80016c8:	f002 face 	bl	8003c68 <HAL_RCC_OscConfig>
 80016cc:	1e03      	subs	r3, r0, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0x88>
		Error_Handler();
 80016d0:	f000 fa10 	bl	8001af4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2207      	movs	r2, #7
 80016d8:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2202      	movs	r2, #2
 80016de:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2102      	movs	r1, #2
 80016f0:	0018      	movs	r0, r3
 80016f2:	f002 fdc9 	bl	8004288 <HAL_RCC_ClockConfig>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0xb2>
		Error_Handler();
 80016fa:	f000 f9fb 	bl	8001af4 <Error_Handler>
	}
}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b013      	add	sp, #76	@ 0x4c
 8001704:	bd90      	pop	{r4, r7, pc}
	...

08001708 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	0018      	movs	r0, r3
 8001712:	230c      	movs	r3, #12
 8001714:	001a      	movs	r2, r3
 8001716:	2100      	movs	r1, #0
 8001718:	f004 fd8c 	bl	8006234 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800171c:	4b46      	ldr	r3, [pc, #280]	@ (8001838 <MX_ADC1_Init+0x130>)
 800171e:	4a47      	ldr	r2, [pc, #284]	@ (800183c <MX_ADC1_Init+0x134>)
 8001720:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001722:	4b45      	ldr	r3, [pc, #276]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	05d2      	lsls	r2, r2, #23
 8001728:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800172a:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <MX_ADC1_Init+0x130>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001730:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001736:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001738:	2280      	movs	r2, #128	@ 0x80
 800173a:	0392      	lsls	r2, r2, #14
 800173c:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800173e:	4b3e      	ldr	r3, [pc, #248]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001740:	2208      	movs	r2, #8
 8001742:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001744:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001746:	2200      	movs	r2, #0
 8001748:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800174a:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <MX_ADC1_Init+0x130>)
 800174c:	2200      	movs	r2, #0
 800174e:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001750:	4b39      	ldr	r3, [pc, #228]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001752:	2200      	movs	r2, #0
 8001754:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 4;
 8001756:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001758:	2204      	movs	r2, #4
 800175a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800175c:	4b36      	ldr	r3, [pc, #216]	@ (8001838 <MX_ADC1_Init+0x130>)
 800175e:	2220      	movs	r2, #32
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001764:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800176a:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <MX_ADC1_Init+0x130>)
 800176c:	2200      	movs	r2, #0
 800176e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001770:	4b31      	ldr	r3, [pc, #196]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001772:	222c      	movs	r2, #44	@ 0x2c
 8001774:	2101      	movs	r1, #1
 8001776:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001778:	4b2f      	ldr	r3, [pc, #188]	@ (8001838 <MX_ADC1_Init+0x130>)
 800177a:	2200      	movs	r2, #0
 800177c:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 800177e:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001780:	2203      	movs	r2, #3
 8001782:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 8001784:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001786:	2203      	movs	r2, #3
 8001788:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 800178a:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <MX_ADC1_Init+0x130>)
 800178c:	223c      	movs	r2, #60	@ 0x3c
 800178e:	2100      	movs	r1, #0
 8001790:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001792:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <MX_ADC1_Init+0x130>)
 8001794:	2200      	movs	r2, #0
 8001796:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <MX_ADC1_Init+0x130>)
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fe42 	bl	8002424 <HAL_ADC_Init>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC1_Init+0xa0>
		Error_Handler();
 80017a4:	f000 f9a6 	bl	8001af4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017ba:	1d3a      	adds	r2, r7, #4
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_ADC1_Init+0x130>)
 80017be:	0011      	movs	r1, r2
 80017c0:	0018      	movs	r0, r3
 80017c2:	f001 f875 	bl	80028b0 <HAL_ADC_ConfigChannel>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <MX_ADC1_Init+0xc6>
		Error_Handler();
 80017ca:	f000 f993 	bl	8001af4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001840 <MX_ADC1_Init+0x138>)
 80017d2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2204      	movs	r2, #4
 80017d8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017da:	1d3a      	adds	r2, r7, #4
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <MX_ADC1_Init+0x130>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f001 f865 	bl	80028b0 <HAL_ADC_ConfigChannel>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d001      	beq.n	80017ee <MX_ADC1_Init+0xe6>
		Error_Handler();
 80017ea:	f000 f983 	bl	8001af4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <MX_ADC1_Init+0x13c>)
 80017f2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2208      	movs	r2, #8
 80017f8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017fa:	1d3a      	adds	r2, r7, #4
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_ADC1_Init+0x130>)
 80017fe:	0011      	movs	r1, r2
 8001800:	0018      	movs	r0, r3
 8001802:	f001 f855 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d001      	beq.n	800180e <MX_ADC1_Init+0x106>
		Error_Handler();
 800180a:	f000 f973 	bl	8001af4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <MX_ADC1_Init+0x140>)
 8001812:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	220c      	movs	r2, #12
 8001818:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800181a:	1d3a      	adds	r2, r7, #4
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_ADC1_Init+0x130>)
 800181e:	0011      	movs	r1, r2
 8001820:	0018      	movs	r0, r3
 8001822:	f001 f845 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d001      	beq.n	800182e <MX_ADC1_Init+0x126>
		Error_Handler();
 800182a:	f000 f963 	bl	8001af4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b004      	add	sp, #16
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	20000078 	.word	0x20000078
 800183c:	40012400 	.word	0x40012400
 8001840:	18000040 	.word	0x18000040
 8001844:	20000100 	.word	0x20000100
 8001848:	1c000080 	.word	0x1c000080

0800184c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001850:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 8001852:	4a24      	ldr	r2, [pc, #144]	@ (80018e4 <MX_USART1_UART_Init+0x98>)
 8001854:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001856:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 8001858:	2296      	movs	r2, #150	@ 0x96
 800185a:	0192      	lsls	r2, r2, #6
 800185c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800186a:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001882:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001888:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 8001896:	0018      	movs	r0, r3
 8001898:	f002 ffc6 	bl	8004828 <HAL_UART_Init>
 800189c:	1e03      	subs	r3, r0, #0
 800189e:	d001      	beq.n	80018a4 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 80018a0:	f000 f928 	bl	8001af4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80018a4:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 80018a6:	2100      	movs	r1, #0
 80018a8:	0018      	movs	r0, r3
 80018aa:	f004 fb11 	bl	8005ed0 <HAL_UARTEx_SetTxFifoThreshold>
 80018ae:	1e03      	subs	r3, r0, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80018b2:	f000 f91f 	bl	8001af4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 80018b8:	2100      	movs	r1, #0
 80018ba:	0018      	movs	r0, r3
 80018bc:	f004 fb48 	bl	8005f50 <HAL_UARTEx_SetRxFifoThreshold>
 80018c0:	1e03      	subs	r3, r0, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80018c4:	f000 f916 	bl	8001af4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <MX_USART1_UART_Init+0x94>)
 80018ca:	0018      	movs	r0, r3
 80018cc:	f004 fac6 	bl	8005e5c <HAL_UARTEx_DisableFifoMode>
 80018d0:	1e03      	subs	r3, r0, #0
 80018d2:	d001      	beq.n	80018d8 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80018d4:	f000 f90e 	bl	8001af4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	20000138 	.word	0x20000138
 80018e4:	40013800 	.word	0x40013800

080018e8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <MX_DMA_Init+0x48>)
 80018f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <MX_DMA_Init+0x48>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <MX_DMA_Init+0x48>)
 80018fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018fe:	2201      	movs	r2, #1
 8001900:	4013      	ands	r3, r2
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2009      	movs	r0, #9
 800190c:	f001 fd5a 	bl	80033c4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001910:	2009      	movs	r0, #9
 8001912:	f001 fd6c 	bl	80033ee <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	200a      	movs	r0, #10
 800191c:	f001 fd52 	bl	80033c4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001920:	200a      	movs	r0, #10
 8001922:	f001 fd64 	bl	80033ee <HAL_NVIC_EnableIRQ>

}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b002      	add	sp, #8
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	40021000 	.word	0x40021000

08001934 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800193a:	240c      	movs	r4, #12
 800193c:	193b      	adds	r3, r7, r4
 800193e:	0018      	movs	r0, r3
 8001940:	2314      	movs	r3, #20
 8001942:	001a      	movs	r2, r3
 8001944:	2100      	movs	r1, #0
 8001946:	f004 fc75 	bl	8006234 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <MX_GPIO_Init+0xe0>)
 800194c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800194e:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <MX_GPIO_Init+0xe0>)
 8001950:	2101      	movs	r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	635a      	str	r2, [r3, #52]	@ 0x34
 8001956:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <MX_GPIO_Init+0xe0>)
 8001958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195a:	2201      	movs	r2, #1
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b2c      	ldr	r3, [pc, #176]	@ (8001a14 <MX_GPIO_Init+0xe0>)
 8001964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001966:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <MX_GPIO_Init+0xe0>)
 8001968:	2102      	movs	r1, #2
 800196a:	430a      	orrs	r2, r1
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
 800196e:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <MX_GPIO_Init+0xe0>)
 8001970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001972:	2202      	movs	r2, #2
 8001974:	4013      	ands	r3, r2
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800197a:	4927      	ldr	r1, [pc, #156]	@ (8001a18 <MX_GPIO_Init+0xe4>)
 800197c:	23a0      	movs	r3, #160	@ 0xa0
 800197e:	05db      	lsls	r3, r3, #23
 8001980:	2200      	movs	r2, #0
 8001982:	0018      	movs	r0, r3
 8001984:	f002 f906 	bl	8003b94 <HAL_GPIO_WritePin>
			LE_ATTENUATOR_Pin | CLK_ATTENUATOR_Pin | DATA_ATTENUATOR_Pin
					| DE_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <MX_GPIO_Init+0xe8>)
 800198a:	2200      	movs	r2, #0
 800198c:	2102      	movs	r1, #2
 800198e:	0018      	movs	r0, r3
 8001990:	f002 f900 	bl	8003b94 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LE_ATTENUATOR_Pin CLK_ATTENUATOR_Pin DATA_ATTENUATOR_Pin DE_Pin */
	GPIO_InitStruct.Pin = LE_ATTENUATOR_Pin | CLK_ATTENUATOR_Pin
 8001994:	193b      	adds	r3, r7, r4
 8001996:	4a20      	ldr	r2, [pc, #128]	@ (8001a18 <MX_GPIO_Init+0xe4>)
 8001998:	601a      	str	r2, [r3, #0]
			| DATA_ATTENUATOR_Pin | DE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	193b      	adds	r3, r7, r4
 800199c:	2201      	movs	r2, #1
 800199e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	193a      	adds	r2, r7, r4
 80019ae:	23a0      	movs	r3, #160	@ 0xa0
 80019b0:	05db      	lsls	r3, r3, #23
 80019b2:	0011      	movs	r1, r2
 80019b4:	0018      	movs	r0, r3
 80019b6:	f001 ff89 	bl	80038cc <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	220c      	movs	r2, #12
 80019be:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2202      	movs	r2, #2
 80019c4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	193b      	adds	r3, r7, r4
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	2201      	movs	r2, #1
 80019d6:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	193a      	adds	r2, r7, r4
 80019da:	23a0      	movs	r3, #160	@ 0xa0
 80019dc:	05db      	lsls	r3, r3, #23
 80019de:	0011      	movs	r1, r2
 80019e0:	0018      	movs	r0, r3
 80019e2:	f001 ff73 	bl	80038cc <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80019e6:	0021      	movs	r1, r4
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2201      	movs	r2, #1
 80019f2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <MX_GPIO_Init+0xe8>)
 8001a04:	0019      	movs	r1, r3
 8001a06:	0010      	movs	r0, r2
 8001a08:	f001 ff60 	bl	80038cc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0c:	46c0      	nop			@ (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b009      	add	sp, #36	@ 0x24
 8001a12:	bd90      	pop	{r4, r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	00008032 	.word	0x00008032
 8001a1c:	50000400 	.word	0x50000400

08001a20 <uart_clean_buffer>:

/* USER CODE BEGIN 4 */

void uart_clean_buffer() {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	memset((uint8_t*) UART1_rxBuffer, 0, RX_UART1_BUFFLEN);
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <uart_clean_buffer+0x30>)
 8001a26:	2219      	movs	r2, #25
 8001a28:	2100      	movs	r1, #0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f004 fc02 	bl	8006234 <memset>

	memset(UART1_txBuffer, 0, TX_UART1_BUFFLEN);
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <uart_clean_buffer+0x34>)
 8001a32:	2264      	movs	r2, #100	@ 0x64
 8001a34:	2100      	movs	r1, #0
 8001a36:	0018      	movs	r0, r3
 8001a38:	f004 fbfc 	bl	8006234 <memset>
	tx_buffer_size = 0;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <uart_clean_buffer+0x38>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
	uart1_rcv_counter = 0;
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <uart_clean_buffer+0x3c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
}
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	20000238 	.word	0x20000238
 8001a54:	20000254 	.word	0x20000254
 8001a58:	200002b8 	.word	0x200002b8
 8001a5c:	20000251 	.word	0x20000251

08001a60 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
// TODO : se puede reemplazar leyendo el flag del registro

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);
 8001a68:	4904      	ldr	r1, [pc, #16]	@ (8001a7c <HAL_ADC_ConvCpltCallback+0x1c>)
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_ADC_ConvCpltCallback+0x20>)
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fe80 	bl	8002774 <HAL_ADC_Start_DMA>

}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000228 	.word	0x20000228
 8001a80:	20000078 	.word	0x20000078

08001a84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
// Read received data from UART1

	/* Read received data from UART1 */
	if (uart1_rcv_counter >= RX_UART1_BUFFLEN) {
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x5c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b18      	cmp	r3, #24
 8001a92:	d908      	bls.n	8001aa6 <HAL_UART_RxCpltCallback+0x22>
		memset((uint8_t*) UART1_rxBuffer, 0, RX_UART1_BUFFLEN);
 8001a94:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x60>)
 8001a96:	2219      	movs	r2, #25
 8001a98:	2100      	movs	r1, #0
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f004 fbca 	bl	8006234 <memset>
		uart1_rcv_counter = 0;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x5c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001aa6:	4910      	ldr	r1, [pc, #64]	@ (8001ae8 <HAL_UART_RxCpltCallback+0x64>)
 8001aa8:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_UART_RxCpltCallback+0x68>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	0018      	movs	r0, r3
 8001aae:	f002 ffb5 	bl	8004a1c <HAL_UART_Receive_IT>
	UART1_rxBuffer[uart1_rcv_counter++] = rxData;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x5c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	b2d1      	uxtb	r1, r2
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x5c>)
 8001abc:	7011      	strb	r1, [r2, #0]
 8001abe:	001a      	movs	r2, r3
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_UART_RxCpltCallback+0x64>)
 8001ac2:	7819      	ldrb	r1, [r3, #0]
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x60>)
 8001ac6:	5499      	strb	r1, [r3, r2]
	if (rxData == 0x7F)
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <HAL_UART_RxCpltCallback+0x64>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ace:	d102      	bne.n	8001ad6 <HAL_UART_RxCpltCallback+0x52>
		isDataReady = true;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <HAL_UART_RxCpltCallback+0x6c>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]

}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	20000251 	.word	0x20000251
 8001ae4:	20000238 	.word	0x20000238
 8001ae8:	20000252 	.word	0x20000252
 8001aec:	20000138 	.word	0x20000138
 8001af0:	200002b9 	.word	0x200002b9

08001af4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001afc:	46c0      	nop			@ (mov r8, r8)
 8001afe:	e7fd      	b.n	8001afc <Error_Handler+0x8>

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	2201      	movs	r2, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	0549      	lsls	r1, r1, #21
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	055b      	lsls	r3, r3, #21
 8001b34:	4013      	ands	r3, r2
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b08b      	sub	sp, #44	@ 0x2c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	2414      	movs	r4, #20
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	0018      	movs	r0, r3
 8001b56:	2314      	movs	r3, #20
 8001b58:	001a      	movs	r2, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f004 fb6a 	bl	8006234 <memset>
  if(hadc->Instance==ADC1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a3b      	ldr	r2, [pc, #236]	@ (8001c54 <HAL_ADC_MspInit+0x10c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d16f      	bne.n	8001c4a <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <HAL_ADC_MspInit+0x110>)
 8001b6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c58 <HAL_ADC_MspInit+0x110>)
 8001b70:	2180      	movs	r1, #128	@ 0x80
 8001b72:	0349      	lsls	r1, r1, #13
 8001b74:	430a      	orrs	r2, r1
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b78:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_ADC_MspInit+0x110>)
 8001b7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	035b      	lsls	r3, r3, #13
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <HAL_ADC_MspInit+0x110>)
 8001b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b8a:	4b33      	ldr	r3, [pc, #204]	@ (8001c58 <HAL_ADC_MspInit+0x110>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b92:	4b31      	ldr	r3, [pc, #196]	@ (8001c58 <HAL_ADC_MspInit+0x110>)
 8001b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <HAL_ADC_MspInit+0x110>)
 8001ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c58 <HAL_ADC_MspInit+0x110>)
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001baa:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <HAL_ADC_MspInit+0x110>)
 8001bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bae:	2202      	movs	r2, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Pout_Volt_Pin|Current_Volt_Pin|Volt_Volt_Pin;
 8001bb6:	193b      	adds	r3, r7, r4
 8001bb8:	22c1      	movs	r2, #193	@ 0xc1
 8001bba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbc:	193b      	adds	r3, r7, r4
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	193b      	adds	r3, r7, r4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	193a      	adds	r2, r7, r4
 8001bca:	23a0      	movs	r3, #160	@ 0xa0
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	0011      	movs	r1, r2
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f001 fe7b 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AGC_Volt_Pin;
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	193b      	adds	r3, r7, r4
 8001bde:	2203      	movs	r2, #3
 8001be0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AGC_Volt_GPIO_Port, &GPIO_InitStruct);
 8001be8:	193b      	adds	r3, r7, r4
 8001bea:	4a1c      	ldr	r2, [pc, #112]	@ (8001c5c <HAL_ADC_MspInit+0x114>)
 8001bec:	0019      	movs	r1, r3
 8001bee:	0010      	movs	r0, r2
 8001bf0:	f001 fe6c 	bl	80038cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c64 <HAL_ADC_MspInit+0x11c>)
 8001bf8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c00:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c06:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c0e:	2280      	movs	r2, #128	@ 0x80
 8001c10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c14:	2280      	movs	r2, #128	@ 0x80
 8001c16:	0052      	lsls	r2, r2, #1
 8001c18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	00d2      	lsls	r2, r2, #3
 8001c20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c30:	0018      	movs	r0, r3
 8001c32:	f001 fbf9 	bl	8003428 <HAL_DMA_Init>
 8001c36:	1e03      	subs	r3, r0, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001c3a:	f7ff ff5b 	bl	8001af4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c42:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_ADC_MspInit+0x118>)
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b00b      	add	sp, #44	@ 0x2c
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	40012400 	.word	0x40012400
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	50000400 	.word	0x50000400
 8001c60:	200000dc 	.word	0x200000dc
 8001c64:	40020030 	.word	0x40020030

08001c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b091      	sub	sp, #68	@ 0x44
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	232c      	movs	r3, #44	@ 0x2c
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	0018      	movs	r0, r3
 8001c76:	2314      	movs	r3, #20
 8001c78:	001a      	movs	r2, r3
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	f004 fada 	bl	8006234 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c80:	2414      	movs	r4, #20
 8001c82:	193b      	adds	r3, r7, r4
 8001c84:	0018      	movs	r0, r3
 8001c86:	2318      	movs	r3, #24
 8001c88:	001a      	movs	r2, r3
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	f004 fad2 	bl	8006234 <memset>
  if(huart->Instance==USART1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a38      	ldr	r2, [pc, #224]	@ (8001d78 <HAL_UART_MspInit+0x110>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d169      	bne.n	8001d6e <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ca0:	193b      	adds	r3, r7, r4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f002 fc97 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	1e03      	subs	r3, r0, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cb2:	f7ff ff1f 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cb6:	4b31      	ldr	r3, [pc, #196]	@ (8001d7c <HAL_UART_MspInit+0x114>)
 8001cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cba:	4b30      	ldr	r3, [pc, #192]	@ (8001d7c <HAL_UART_MspInit+0x114>)
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	01c9      	lsls	r1, r1, #7
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <HAL_UART_MspInit+0x114>)
 8001cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	01db      	lsls	r3, r3, #7
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_UART_MspInit+0x114>)
 8001cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cd6:	4b29      	ldr	r3, [pc, #164]	@ (8001d7c <HAL_UART_MspInit+0x114>)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cde:	4b27      	ldr	r3, [pc, #156]	@ (8001d7c <HAL_UART_MspInit+0x114>)
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cea:	212c      	movs	r1, #44	@ 0x2c
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	22c0      	movs	r2, #192	@ 0xc0
 8001cf0:	00d2      	lsls	r2, r2, #3
 8001cf2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2201      	movs	r2, #1
 8001d0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	187a      	adds	r2, r7, r1
 8001d0e:	23a0      	movs	r3, #160	@ 0xa0
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	0011      	movs	r1, r2
 8001d14:	0018      	movs	r0, r3
 8001d16:	f001 fdd9 	bl	80038cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d1c:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <HAL_UART_MspInit+0x11c>)
 8001d1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d20:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d22:	2232      	movs	r2, #50	@ 0x32
 8001d24:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d32:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d34:	2280      	movs	r2, #128	@ 0x80
 8001d36:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d52:	0018      	movs	r0, r3
 8001d54:	f001 fb68 	bl	8003428 <HAL_DMA_Init>
 8001d58:	1e03      	subs	r3, r0, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001d5c:	f7ff feca 	bl	8001af4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2180      	movs	r1, #128	@ 0x80
 8001d64:	4a06      	ldr	r2, [pc, #24]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d66:	505a      	str	r2, [r3, r1]
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_UART_MspInit+0x118>)
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b011      	add	sp, #68	@ 0x44
 8001d74:	bd90      	pop	{r4, r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	200001cc 	.word	0x200001cc
 8001d84:	40020008 	.word	0x40020008

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8c:	46c0      	nop			@ (mov r8, r8)
 8001d8e:	e7fd      	b.n	8001d8c <NMI_Handler+0x4>

08001d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	e7fd      	b.n	8001d94 <HardFault_Handler+0x4>

08001d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d9c:	46c0      	nop			@ (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f000 f9a0 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <DMA1_Channel1_IRQHandler+0x14>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f001 fc40 	bl	8003648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	200001cc 	.word	0x200001cc

08001dd4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dd8:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f001 fc34 	bl	8003648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001de0:	46c0      	nop			@ (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	200000dc 	.word	0x200000dc

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	@ (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	18d3      	adds	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f004 fa24 	bl	8006268 <__errno>
 8001e20:	0003      	movs	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	18d2      	adds	r2, r2, r3
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <_sbrk+0x64>)
 8001e3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b006      	add	sp, #24
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20002000 	.word	0x20002000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	200002bc 	.word	0x200002bc
 8001e54:	20000410 	.word	0x20000410

08001e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 8001e70:	23a0      	movs	r3, #160	@ 0xa0
 8001e72:	05db      	lsls	r3, r3, #23
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	23a0      	movs	r3, #160	@ 0xa0
 8001e78:	05db      	lsls	r3, r3, #23
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	0209      	lsls	r1, r1, #8
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <uart1_write+0x58>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2280      	movs	r2, #128	@ 0x80
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0fa      	beq.n	8001e84 <uart1_write+0x20>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <uart1_write+0x58>)
 8001e90:	1dfa      	adds	r2, r7, #7
 8001e92:	7812      	ldrb	r2, [r2, #0]
 8001e94:	629a      	str	r2, [r3, #40]	@ 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <uart1_write+0x58>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2240      	movs	r2, #64	@ 0x40
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d0fa      	beq.n	8001e98 <uart1_write+0x34>
		;

	CLEAR_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 8001ea2:	23a0      	movs	r3, #160	@ 0xa0
 8001ea4:	05db      	lsls	r3, r3, #23
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	23a0      	movs	r3, #160	@ 0xa0
 8001eaa:	05db      	lsls	r3, r3, #23
 8001eac:	4904      	ldr	r1, [pc, #16]	@ (8001ec0 <uart1_write+0x5c>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	615a      	str	r2, [r3, #20]
}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	ffff7fff 	.word	0xffff7fff

08001ec4 <uart1_write_frame>:
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
		uart1_write(str[i]);
}

void uart1_write_frame(char *str, uint8_t len) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	000a      	movs	r2, r1
 8001ece:	1cfb      	adds	r3, r7, #3
 8001ed0:	701a      	strb	r2, [r3, #0]
	if (len > 0) {
 8001ed2:	1cfb      	adds	r3, r7, #3
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d011      	beq.n	8001efe <uart1_write_frame+0x3a>
		for (int i = 0; i < len; i++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e009      	b.n	8001ef4 <uart1_write_frame+0x30>
			uart1_write(str[i]);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	18d3      	adds	r3, r2, r3
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff ffbb 	bl	8001e64 <uart1_write>
		for (int i = 0; i < len; i++)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	1cfb      	adds	r3, r7, #3
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbf0      	blt.n	8001ee0 <uart1_write_frame+0x1c>
	}
}
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b004      	add	sp, #16
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <crc_get>:
#include "utils.h"

uint16_t crc_get(uint8_t* buffer, uint8_t buff_len) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	000a      	movs	r2, r1
 8001f12:	1cfb      	adds	r3, r7, #3
 8001f14:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 8001f16:	230a      	movs	r3, #10
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc8 <crc_get+0xc0>)
 8001f1c:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 8001f1e:	230c      	movs	r3, #12
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	2200      	movs	r2, #0
 8001f24:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 8001f26:	230f      	movs	r3, #15
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e03c      	b.n	8001faa <crc_get+0xa2>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8001f30:	230f      	movs	r3, #15
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	18d3      	adds	r3, r2, r3
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b299      	uxth	r1, r3
 8001f40:	220c      	movs	r2, #12
 8001f42:	18bb      	adds	r3, r7, r2
 8001f44:	18ba      	adds	r2, r7, r2
 8001f46:	8812      	ldrh	r2, [r2, #0]
 8001f48:	404a      	eors	r2, r1
 8001f4a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8001f4c:	230e      	movs	r3, #14
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e01e      	b.n	8001f94 <crc_get+0x8c>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8001f56:	210c      	movs	r1, #12
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	5e9b      	ldrsh	r3, [r3, r2]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da0c      	bge.n	8001f7c <crc_get+0x74>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2000      	movs	r0, #0
 8001f70:	5e1b      	ldrsh	r3, [r3, r0]
 8001f72:	4053      	eors	r3, r2
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	801a      	strh	r2, [r3, #0]
 8001f7a:	e005      	b.n	8001f88 <crc_get+0x80>
			else
				crc <<= 1;
 8001f7c:	230c      	movs	r3, #12
 8001f7e:	18fa      	adds	r2, r7, r3
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	18db      	adds	r3, r3, r3
 8001f86:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 8001f88:	210e      	movs	r1, #14
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	3201      	adds	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	230e      	movs	r3, #14
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b07      	cmp	r3, #7
 8001f9c:	d9db      	bls.n	8001f56 <crc_get+0x4e>
	for (b = 0; b < buff_len; b++) {
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	3201      	adds	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	230f      	movs	r3, #15
 8001fac:	18fa      	adds	r2, r7, r3
 8001fae:	1cfb      	adds	r3, r7, #3
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d3bb      	bcc.n	8001f30 <crc_get+0x28>
		}
	}
	return (crc);
 8001fb8:	230c      	movs	r3, #12
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	881b      	ldrh	r3, [r3, #0]
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	00001021 	.word	0x00001021

08001fcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fcc:	480d      	ldr	r0, [pc, #52]	@ (8002004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fd0:	f7ff ff42 	bl	8001e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001fd4:	480c      	ldr	r0, [pc, #48]	@ (8002008 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fd6:	490d      	ldr	r1, [pc, #52]	@ (800200c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <LoopForever+0xe>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fec:	4c0a      	ldr	r4, [pc, #40]	@ (8002018 <LoopForever+0x16>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ffa:	f004 f93b 	bl	8006274 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ffe:	f7fe ffe9 	bl	8000fd4 <main>

08002002 <LoopForever>:

LoopForever:
  b LoopForever
 8002002:	e7fe      	b.n	8002002 <LoopForever>
  ldr   r0, =_estack
 8002004:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002010:	08006bdc 	.word	0x08006bdc
  ldr r2, =_sbss
 8002014:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002018:	2000040c 	.word	0x2000040c

0800201c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC1_IRQHandler>
	...

08002020 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_Init+0x3c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_Init+0x3c>)
 8002032:	2180      	movs	r1, #128	@ 0x80
 8002034:	0049      	lsls	r1, r1, #1
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203a:	2003      	movs	r0, #3
 800203c:	f000 f810 	bl	8002060 <HAL_InitTick>
 8002040:	1e03      	subs	r3, r0, #0
 8002042:	d003      	beq.n	800204c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	e001      	b.n	8002050 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800204c:	f7ff fd58 	bl	8001b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	781b      	ldrb	r3, [r3, #0]
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b002      	add	sp, #8
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40022000 	.word	0x40022000

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002070:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <HAL_InitTick+0x88>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d02b      	beq.n	80020d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002078:	4b1c      	ldr	r3, [pc, #112]	@ (80020ec <HAL_InitTick+0x8c>)
 800207a:	681c      	ldr	r4, [r3, #0]
 800207c:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_InitTick+0x88>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	0019      	movs	r1, r3
 8002082:	23fa      	movs	r3, #250	@ 0xfa
 8002084:	0098      	lsls	r0, r3, #2
 8002086:	f7fe f845 	bl	8000114 <__udivsi3>
 800208a:	0003      	movs	r3, r0
 800208c:	0019      	movs	r1, r3
 800208e:	0020      	movs	r0, r4
 8002090:	f7fe f840 	bl	8000114 <__udivsi3>
 8002094:	0003      	movs	r3, r0
 8002096:	0018      	movs	r0, r3
 8002098:	f001 f9b9 	bl	800340e <HAL_SYSTICK_Config>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d112      	bne.n	80020c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d80a      	bhi.n	80020bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	2301      	movs	r3, #1
 80020aa:	425b      	negs	r3, r3
 80020ac:	2200      	movs	r2, #0
 80020ae:	0018      	movs	r0, r3
 80020b0:	f001 f988 	bl	80033c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_InitTick+0x90>)
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	e00d      	b.n	80020d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80020bc:	230f      	movs	r3, #15
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e008      	b.n	80020d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020c6:	230f      	movs	r3, #15
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e003      	b.n	80020d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020d0:	230f      	movs	r3, #15
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020d8:	230f      	movs	r3, #15
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b005      	add	sp, #20
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000004 	.word	0x20000004

080020f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f8:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <HAL_IncTick+0x1c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	001a      	movs	r2, r3
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_IncTick+0x20>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	18d2      	adds	r2, r2, r3
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <HAL_IncTick+0x20>)
 8002106:	601a      	str	r2, [r3, #0]
}
 8002108:	46c0      	nop			@ (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	20000008 	.word	0x20000008
 8002114:	200002c0 	.word	0x200002c0

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b02      	ldr	r3, [pc, #8]	@ (8002128 <HAL_GetTick+0x10>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	200002c0 	.word	0x200002c0

0800212c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff fff0 	bl	8002118 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3301      	adds	r3, #1
 8002144:	d005      	beq.n	8002152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002146:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <HAL_Delay+0x44>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	001a      	movs	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	189b      	adds	r3, r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	f7ff ffe0 	bl	8002118 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	d8f7      	bhi.n	8002154 <HAL_Delay+0x28>
  {
  }
}
 8002164:	46c0      	nop			@ (mov r8, r8)
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b004      	add	sp, #16
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	20000008 	.word	0x20000008

08002174 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002184:	401a      	ands	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	fe3fffff 	.word	0xfe3fffff

0800219c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	23e0      	movs	r3, #224	@ 0xe0
 80021aa:	045b      	lsls	r3, r3, #17
 80021ac:	4013      	ands	r3, r2
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	2104      	movs	r1, #4
 80021ca:	400a      	ands	r2, r1
 80021cc:	2107      	movs	r1, #7
 80021ce:	4091      	lsls	r1, r2
 80021d0:	000a      	movs	r2, r1
 80021d2:	43d2      	mvns	r2, r2
 80021d4:	401a      	ands	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2104      	movs	r1, #4
 80021da:	400b      	ands	r3, r1
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4099      	lsls	r1, r3
 80021e0:	000b      	movs	r3, r1
 80021e2:	431a      	orrs	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80021e8:	46c0      	nop			@ (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b004      	add	sp, #16
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	2104      	movs	r1, #4
 8002202:	400a      	ands	r2, r1
 8002204:	2107      	movs	r1, #7
 8002206:	4091      	lsls	r1, r2
 8002208:	000a      	movs	r2, r1
 800220a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2104      	movs	r1, #4
 8002210:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002212:	40da      	lsrs	r2, r3
 8002214:	0013      	movs	r3, r2
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b002      	add	sp, #8
 800221c:	bd80      	pop	{r7, pc}

0800221e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	23c0      	movs	r3, #192	@ 0xc0
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	4013      	ands	r3, r2
 8002230:	d101      	bne.n	8002236 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002236:	2300      	movs	r3, #0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	211f      	movs	r1, #31
 8002254:	400a      	ands	r2, r1
 8002256:	210f      	movs	r1, #15
 8002258:	4091      	lsls	r1, r2
 800225a:	000a      	movs	r2, r1
 800225c:	43d2      	mvns	r2, r2
 800225e:	401a      	ands	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	210f      	movs	r1, #15
 8002266:	4019      	ands	r1, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	201f      	movs	r0, #31
 800226c:	4003      	ands	r3, r0
 800226e:	4099      	lsls	r1, r3
 8002270:	000b      	movs	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002278:	46c0      	nop			@ (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}

08002280 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	035b      	lsls	r3, r3, #13
 8002292:	0b5b      	lsrs	r3, r3, #13
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	0352      	lsls	r2, r2, #13
 80022b4:	0b52      	lsrs	r2, r2, #13
 80022b6:	43d2      	mvns	r2, r2
 80022b8:	401a      	ands	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	0212      	lsls	r2, r2, #8
 80022dc:	43d2      	mvns	r2, r2
 80022de:	401a      	ands	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	400b      	ands	r3, r1
 80022e8:	4904      	ldr	r1, [pc, #16]	@ (80022fc <LL_ADC_SetChannelSamplingTime+0x34>)
 80022ea:	400b      	ands	r3, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	07ffff00 	.word	0x07ffff00

08002300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <LL_ADC_EnableInternalRegulator+0x24>)
 800230e:	4013      	ands	r3, r2
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	0552      	lsls	r2, r2, #21
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	6fffffe8 	.word	0x6fffffe8

08002328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	055b      	lsls	r3, r3, #21
 8002338:	401a      	ands	r2, r3
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	055b      	lsls	r3, r3, #21
 800233e:	429a      	cmp	r2, r3
 8002340:	d101      	bne.n	8002346 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002346:	2300      	movs	r3, #0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <LL_ADC_Enable+0x20>)
 800235e:	4013      	ands	r3, r2
 8002360:	2201      	movs	r2, #1
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002368:	46c0      	nop			@ (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}
 8002370:	7fffffe8 	.word	0x7fffffe8

08002374 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <LL_ADC_Disable+0x20>)
 8002382:	4013      	ands	r3, r2
 8002384:	2202      	movs	r2, #2
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800238c:	46c0      	nop			@ (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}
 8002394:	7fffffe8 	.word	0x7fffffe8

08002398 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <LL_ADC_IsEnabled+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_ADC_IsEnabled+0x1a>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b002      	add	sp, #8
 80023b8:	bd80      	pop	{r7, pc}

080023ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d101      	bne.n	80023d2 <LL_ADC_IsDisableOngoing+0x18>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <LL_ADC_IsDisableOngoing+0x1a>
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <LL_ADC_REG_StartConversion+0x20>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	2204      	movs	r2, #4
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023f4:	46c0      	nop			@ (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	7fffffe8 	.word	0x7fffffe8

08002400 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2204      	movs	r2, #4
 800240e:	4013      	ands	r3, r2
 8002410:	2b04      	cmp	r3, #4
 8002412:	d101      	bne.n	8002418 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002418:	2300      	movs	r3, #0
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242c:	231f      	movs	r3, #31
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e17f      	b.n	800274a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff fb77 	bl	8001b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2254      	movs	r2, #84	@ 0x54
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff ff5b 	bl	8002328 <LL_ADC_IsInternalRegulatorEnabled>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d115      	bne.n	80024a2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0018      	movs	r0, r3
 800247c:	f7ff ff40 	bl	8002300 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002480:	4bb4      	ldr	r3, [pc, #720]	@ (8002754 <HAL_ADC_Init+0x330>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	49b4      	ldr	r1, [pc, #720]	@ (8002758 <HAL_ADC_Init+0x334>)
 8002486:	0018      	movs	r0, r3
 8002488:	f7fd fe44 	bl	8000114 <__udivsi3>
 800248c:	0003      	movs	r3, r0
 800248e:	3301      	adds	r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002494:	e002      	b.n	800249c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3b01      	subs	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f9      	bne.n	8002496 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff ff3e 	bl	8002328 <LL_ADC_IsInternalRegulatorEnabled>
 80024ac:	1e03      	subs	r3, r0, #0
 80024ae:	d10f      	bne.n	80024d0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	2210      	movs	r2, #16
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	2201      	movs	r2, #1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024c8:	231f      	movs	r3, #31
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff ff93 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 80024da:	0003      	movs	r3, r0
 80024dc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e2:	2210      	movs	r2, #16
 80024e4:	4013      	ands	r3, r2
 80024e6:	d000      	beq.n	80024ea <HAL_ADC_Init+0xc6>
 80024e8:	e122      	b.n	8002730 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d000      	beq.n	80024f2 <HAL_ADC_Init+0xce>
 80024f0:	e11e      	b.n	8002730 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	4a99      	ldr	r2, [pc, #612]	@ (800275c <HAL_ADC_Init+0x338>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	2202      	movs	r2, #2
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff ff46 	bl	8002398 <LL_ADC_IsEnabled>
 800250c:	1e03      	subs	r3, r0, #0
 800250e:	d000      	beq.n	8002512 <HAL_ADC_Init+0xee>
 8002510:	e0ad      	b.n	800266e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7e1b      	ldrb	r3, [r3, #24]
 800251a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800251c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7e5b      	ldrb	r3, [r3, #25]
 8002522:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002524:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7e9b      	ldrb	r3, [r3, #26]
 800252a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800252c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_ADC_Init+0x118>
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	015b      	lsls	r3, r3, #5
 800253a:	e000      	b.n	800253e <HAL_ADC_Init+0x11a>
 800253c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800253e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002544:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	da04      	bge.n	8002558 <HAL_ADC_Init+0x134>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	e001      	b.n	800255c <HAL_ADC_Init+0x138>
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800255c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	212c      	movs	r1, #44	@ 0x2c
 8002562:	5c5b      	ldrb	r3, [r3, r1]
 8002564:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002566:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	5c9b      	ldrb	r3, [r3, r2]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d115      	bne.n	80025a4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7e9b      	ldrb	r3, [r3, #26]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	0252      	lsls	r2, r2, #9
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e00b      	b.n	80025a4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	2220      	movs	r2, #32
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259c:	2201      	movs	r2, #1
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025b0:	23e0      	movs	r3, #224	@ 0xe0
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80025ba:	4313      	orrs	r3, r2
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a65      	ldr	r2, [pc, #404]	@ (8002760 <HAL_ADC_Init+0x33c>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	0f9b      	lsrs	r3, r3, #30
 80025de:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025e4:	4313      	orrs	r3, r2
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	223c      	movs	r2, #60	@ 0x3c
 80025f0:	5c9b      	ldrb	r3, [r3, r2]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d111      	bne.n	800261a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0f9b      	lsrs	r3, r3, #30
 80025fc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002602:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002608:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800260e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	2201      	movs	r2, #1
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	4a50      	ldr	r2, [pc, #320]	@ (8002764 <HAL_ADC_Init+0x340>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	430a      	orrs	r2, r1
 800262e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	23c0      	movs	r3, #192	@ 0xc0
 8002636:	061b      	lsls	r3, r3, #24
 8002638:	429a      	cmp	r2, r3
 800263a:	d018      	beq.n	800266e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002640:	2380      	movs	r3, #128	@ 0x80
 8002642:	05db      	lsls	r3, r3, #23
 8002644:	429a      	cmp	r2, r3
 8002646:	d012      	beq.n	800266e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	061b      	lsls	r3, r3, #24
 8002650:	429a      	cmp	r2, r3
 8002652:	d00c      	beq.n	800266e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002654:	4b44      	ldr	r3, [pc, #272]	@ (8002768 <HAL_ADC_Init+0x344>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a44      	ldr	r2, [pc, #272]	@ (800276c <HAL_ADC_Init+0x348>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	23f0      	movs	r3, #240	@ 0xf0
 8002664:	039b      	lsls	r3, r3, #14
 8002666:	401a      	ands	r2, r3
 8002668:	4b3f      	ldr	r3, [pc, #252]	@ (8002768 <HAL_ADC_Init+0x344>)
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002676:	001a      	movs	r2, r3
 8002678:	2100      	movs	r1, #0
 800267a:	f7ff fd9c 	bl	80021b6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002686:	493a      	ldr	r1, [pc, #232]	@ (8002770 <HAL_ADC_Init+0x34c>)
 8002688:	001a      	movs	r2, r3
 800268a:	f7ff fd94 	bl	80021b6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2110      	movs	r1, #16
 80026a2:	4249      	negs	r1, r1
 80026a4:	430a      	orrs	r2, r1
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80026a8:	e018      	b.n	80026dc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	039b      	lsls	r3, r3, #14
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d112      	bne.n	80026dc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	221c      	movs	r2, #28
 80026c6:	4013      	ands	r3, r2
 80026c8:	2210      	movs	r2, #16
 80026ca:	4252      	negs	r2, r2
 80026cc:	409a      	lsls	r2, r3
 80026ce:	0011      	movs	r1, r2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2100      	movs	r1, #0
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7ff fd84 	bl	80021f0 <LL_ADC_GetSamplingTimeCommonChannels>
 80026e8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d10b      	bne.n	800270a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	2203      	movs	r2, #3
 80026fe:	4393      	bics	r3, r2
 8002700:	2201      	movs	r2, #1
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002708:	e01c      	b.n	8002744 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270e:	2212      	movs	r2, #18
 8002710:	4393      	bics	r3, r2
 8002712:	2210      	movs	r2, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	2201      	movs	r2, #1
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002726:	231f      	movs	r3, #31
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800272e:	e009      	b.n	8002744 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	2210      	movs	r2, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800273c:	231f      	movs	r3, #31
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002744:	231f      	movs	r3, #31
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	781b      	ldrb	r3, [r3, #0]
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b008      	add	sp, #32
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	20000000 	.word	0x20000000
 8002758:	00030d40 	.word	0x00030d40
 800275c:	fffffefd 	.word	0xfffffefd
 8002760:	ffde0201 	.word	0xffde0201
 8002764:	1ffffc02 	.word	0x1ffffc02
 8002768:	40012708 	.word	0x40012708
 800276c:	ffc3ffff 	.word	0xffc3ffff
 8002770:	07ffff04 	.word	0x07ffff04

08002774 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff fe3b 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d16c      	bne.n	8002868 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2254      	movs	r2, #84	@ 0x54
 8002792:	5c9b      	ldrb	r3, [r3, r2]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_ADC_Start_DMA+0x28>
 8002798:	2302      	movs	r3, #2
 800279a:	e06c      	b.n	8002876 <HAL_ADC_Start_DMA+0x102>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2254      	movs	r2, #84	@ 0x54
 80027a0:	2101      	movs	r1, #1
 80027a2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	4013      	ands	r3, r2
 80027ae:	d113      	bne.n	80027d8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff fdef 	bl	8002398 <LL_ADC_IsEnabled>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7ff fdd6 	bl	8002374 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2101      	movs	r1, #1
 80027d4:	430a      	orrs	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027d8:	2517      	movs	r5, #23
 80027da:	197c      	adds	r4, r7, r5
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 fa3e 	bl	8002c60 <ADC_Enable>
 80027e4:	0003      	movs	r3, r0
 80027e6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027e8:	002c      	movs	r4, r5
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d13e      	bne.n	8002870 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	4a22      	ldr	r2, [pc, #136]	@ (8002880 <HAL_ADC_Start_DMA+0x10c>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	0052      	lsls	r2, r2, #1
 80027fe:	431a      	orrs	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800280e:	4a1d      	ldr	r2, [pc, #116]	@ (8002884 <HAL_ADC_Start_DMA+0x110>)
 8002810:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_ADC_Start_DMA+0x114>)
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281e:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <HAL_ADC_Start_DMA+0x118>)
 8002820:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	221c      	movs	r2, #28
 8002828:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2254      	movs	r2, #84	@ 0x54
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2110      	movs	r1, #16
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	3340      	adds	r3, #64	@ 0x40
 800284c:	0019      	movs	r1, r3
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	193c      	adds	r4, r7, r4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f000 fe72 	bl	800353c <HAL_DMA_Start_IT>
 8002858:	0003      	movs	r3, r0
 800285a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0018      	movs	r0, r3
 8002862:	f7ff fdbb 	bl	80023dc <LL_ADC_REG_StartConversion>
 8002866:	e003      	b.n	8002870 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002868:	2317      	movs	r3, #23
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002870:	2317      	movs	r3, #23
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	781b      	ldrb	r3, [r3, #0]
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b006      	add	sp, #24
 800287c:	bdb0      	pop	{r4, r5, r7, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	fffff0fe 	.word	0xfffff0fe
 8002884:	08002e29 	.word	0x08002e29
 8002888:	08002ef1 	.word	0x08002ef1
 800288c:	08002f0f 	.word	0x08002f0f

08002890 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028a8:	46c0      	nop			@ (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ba:	2317      	movs	r3, #23
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2254      	movs	r2, #84	@ 0x54
 80028ca:	5c9b      	ldrb	r3, [r3, r2]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x24>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e1c0      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x3a6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2254      	movs	r2, #84	@ 0x54
 80028d8:	2101      	movs	r1, #1
 80028da:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7ff fd8d 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d000      	beq.n	80028ec <HAL_ADC_ConfigChannel+0x3c>
 80028ea:	e1a3      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d100      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x46>
 80028f4:	e143      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	2380      	movs	r3, #128	@ 0x80
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	429a      	cmp	r2, r3
 8002900:	d004      	beq.n	800290c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002906:	4ac1      	ldr	r2, [pc, #772]	@ (8002c0c <HAL_ADC_ConfigChannel+0x35c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d108      	bne.n	800291e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0019      	movs	r1, r3
 8002916:	0010      	movs	r0, r2
 8002918:	f7ff fcb2 	bl	8002280 <LL_ADC_REG_SetSequencerChAdd>
 800291c:	e0c9      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	211f      	movs	r1, #31
 8002928:	400b      	ands	r3, r1
 800292a:	210f      	movs	r1, #15
 800292c:	4099      	lsls	r1, r3
 800292e:	000b      	movs	r3, r1
 8002930:	43db      	mvns	r3, r3
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	035b      	lsls	r3, r3, #13
 800293c:	0b5b      	lsrs	r3, r3, #13
 800293e:	d105      	bne.n	800294c <HAL_ADC_ConfigChannel+0x9c>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0e9b      	lsrs	r3, r3, #26
 8002946:	221f      	movs	r2, #31
 8002948:	4013      	ands	r3, r2
 800294a:	e098      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	d000      	beq.n	8002958 <HAL_ADC_ConfigChannel+0xa8>
 8002956:	e091      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x1cc>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d000      	beq.n	8002964 <HAL_ADC_ConfigChannel+0xb4>
 8002962:	e089      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x1c8>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2204      	movs	r2, #4
 800296a:	4013      	ands	r3, r2
 800296c:	d000      	beq.n	8002970 <HAL_ADC_ConfigChannel+0xc0>
 800296e:	e081      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x1c4>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2208      	movs	r2, #8
 8002976:	4013      	ands	r3, r2
 8002978:	d000      	beq.n	800297c <HAL_ADC_ConfigChannel+0xcc>
 800297a:	e079      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x1c0>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2210      	movs	r2, #16
 8002982:	4013      	ands	r3, r2
 8002984:	d000      	beq.n	8002988 <HAL_ADC_ConfigChannel+0xd8>
 8002986:	e071      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x1bc>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2220      	movs	r2, #32
 800298e:	4013      	ands	r3, r2
 8002990:	d000      	beq.n	8002994 <HAL_ADC_ConfigChannel+0xe4>
 8002992:	e069      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x1b8>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2240      	movs	r2, #64	@ 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	d000      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0xf0>
 800299e:	e061      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x1b4>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	4013      	ands	r3, r2
 80029a8:	d000      	beq.n	80029ac <HAL_ADC_ConfigChannel+0xfc>
 80029aa:	e059      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x1b0>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d151      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x1ac>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4013      	ands	r3, r2
 80029c2:	d149      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x1a8>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4013      	ands	r3, r2
 80029ce:	d141      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x1a4>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4013      	ands	r3, r2
 80029da:	d139      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1a0>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	015b      	lsls	r3, r3, #5
 80029e4:	4013      	ands	r3, r2
 80029e6:	d131      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x19c>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	019b      	lsls	r3, r3, #6
 80029f0:	4013      	ands	r3, r2
 80029f2:	d129      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x198>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	01db      	lsls	r3, r3, #7
 80029fc:	4013      	ands	r3, r2
 80029fe:	d121      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x194>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d119      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x190>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	025b      	lsls	r3, r3, #9
 8002a14:	4013      	ands	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x18c>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	029b      	lsls	r3, r3, #10
 8002a20:	4013      	ands	r3, r2
 8002a22:	d109      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x188>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	02db      	lsls	r3, r3, #11
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d001      	beq.n	8002a34 <HAL_ADC_ConfigChannel+0x184>
 8002a30:	2312      	movs	r3, #18
 8002a32:	e024      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a34:	2300      	movs	r3, #0
 8002a36:	e022      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a38:	2311      	movs	r3, #17
 8002a3a:	e020      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	e01e      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a40:	230f      	movs	r3, #15
 8002a42:	e01c      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a44:	230e      	movs	r3, #14
 8002a46:	e01a      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a48:	230d      	movs	r3, #13
 8002a4a:	e018      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a4c:	230c      	movs	r3, #12
 8002a4e:	e016      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a50:	230b      	movs	r3, #11
 8002a52:	e014      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a54:	230a      	movs	r3, #10
 8002a56:	e012      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a58:	2309      	movs	r3, #9
 8002a5a:	e010      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	e00e      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a60:	2307      	movs	r3, #7
 8002a62:	e00c      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a64:	2306      	movs	r3, #6
 8002a66:	e00a      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a68:	2305      	movs	r3, #5
 8002a6a:	e008      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	e006      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a70:	2303      	movs	r3, #3
 8002a72:	e004      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e002      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1ce>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	6852      	ldr	r2, [r2, #4]
 8002a82:	201f      	movs	r0, #31
 8002a84:	4002      	ands	r2, r0
 8002a86:	4093      	lsls	r3, r2
 8002a88:	000a      	movs	r2, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d808      	bhi.n	8002ab2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	001a      	movs	r2, r3
 8002aae:	f7ff fbc7 	bl	8002240 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	001a      	movs	r2, r3
 8002ac0:	f7ff fc02 	bl	80022c8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db00      	blt.n	8002ace <HAL_ADC_ConfigChannel+0x21e>
 8002acc:	e0bc      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ace:	4b50      	ldr	r3, [pc, #320]	@ (8002c10 <HAL_ADC_ConfigChannel+0x360>)
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7ff fb63 	bl	800219c <LL_ADC_GetCommonPathInternalCh>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a4d      	ldr	r2, [pc, #308]	@ (8002c14 <HAL_ADC_ConfigChannel+0x364>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d122      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002aec:	d11d      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2280      	movs	r2, #128	@ 0x80
 8002af2:	0412      	lsls	r2, r2, #16
 8002af4:	4313      	orrs	r3, r2
 8002af6:	4a46      	ldr	r2, [pc, #280]	@ (8002c10 <HAL_ADC_ConfigChannel+0x360>)
 8002af8:	0019      	movs	r1, r3
 8002afa:	0010      	movs	r0, r2
 8002afc:	f7ff fb3a 	bl	8002174 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b00:	4b45      	ldr	r3, [pc, #276]	@ (8002c18 <HAL_ADC_ConfigChannel+0x368>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4945      	ldr	r1, [pc, #276]	@ (8002c1c <HAL_ADC_ConfigChannel+0x36c>)
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7fd fb04 	bl	8000114 <__udivsi3>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	0013      	movs	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	189b      	adds	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b1a:	e002      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f9      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b28:	e08e      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c20 <HAL_ADC_ConfigChannel+0x370>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10e      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	045b      	lsls	r3, r3, #17
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d109      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2280      	movs	r2, #128	@ 0x80
 8002b42:	0452      	lsls	r2, r2, #17
 8002b44:	4313      	orrs	r3, r2
 8002b46:	4a32      	ldr	r2, [pc, #200]	@ (8002c10 <HAL_ADC_ConfigChannel+0x360>)
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f7ff fb12 	bl	8002174 <LL_ADC_SetCommonPathInternalCh>
 8002b50:	e07a      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a33      	ldr	r2, [pc, #204]	@ (8002c24 <HAL_ADC_ConfigChannel+0x374>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d000      	beq.n	8002b5e <HAL_ADC_ConfigChannel+0x2ae>
 8002b5c:	e074      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	03db      	lsls	r3, r3, #15
 8002b64:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b66:	d000      	beq.n	8002b6a <HAL_ADC_ConfigChannel+0x2ba>
 8002b68:	e06e      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	03d2      	lsls	r2, r2, #15
 8002b70:	4313      	orrs	r3, r2
 8002b72:	4a27      	ldr	r2, [pc, #156]	@ (8002c10 <HAL_ADC_ConfigChannel+0x360>)
 8002b74:	0019      	movs	r1, r3
 8002b76:	0010      	movs	r0, r2
 8002b78:	f7ff fafc 	bl	8002174 <LL_ADC_SetCommonPathInternalCh>
 8002b7c:	e064      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d004      	beq.n	8002b94 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c0c <HAL_ADC_ConfigChannel+0x35c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	0010      	movs	r0, r2
 8002ba0:	f7ff fb7f 	bl	80022a2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da4d      	bge.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bac:	4b18      	ldr	r3, [pc, #96]	@ (8002c10 <HAL_ADC_ConfigChannel+0x360>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7ff faf4 	bl	800219c <LL_ADC_GetCommonPathInternalCh>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a15      	ldr	r2, [pc, #84]	@ (8002c14 <HAL_ADC_ConfigChannel+0x364>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d108      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4a18      	ldr	r2, [pc, #96]	@ (8002c28 <HAL_ADC_ConfigChannel+0x378>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	4a11      	ldr	r2, [pc, #68]	@ (8002c10 <HAL_ADC_ConfigChannel+0x360>)
 8002bca:	0019      	movs	r1, r3
 8002bcc:	0010      	movs	r0, r2
 8002bce:	f7ff fad1 	bl	8002174 <LL_ADC_SetCommonPathInternalCh>
 8002bd2:	e039      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a11      	ldr	r2, [pc, #68]	@ (8002c20 <HAL_ADC_ConfigChannel+0x370>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d108      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4a12      	ldr	r2, [pc, #72]	@ (8002c2c <HAL_ADC_ConfigChannel+0x37c>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c10 <HAL_ADC_ConfigChannel+0x360>)
 8002be6:	0019      	movs	r1, r3
 8002be8:	0010      	movs	r0, r2
 8002bea:	f7ff fac3 	bl	8002174 <LL_ADC_SetCommonPathInternalCh>
 8002bee:	e02b      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8002c24 <HAL_ADC_ConfigChannel+0x374>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d126      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c30 <HAL_ADC_ConfigChannel+0x380>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	4a03      	ldr	r2, [pc, #12]	@ (8002c10 <HAL_ADC_ConfigChannel+0x360>)
 8002c02:	0019      	movs	r1, r3
 8002c04:	0010      	movs	r0, r2
 8002c06:	f7ff fab5 	bl	8002174 <LL_ADC_SetCommonPathInternalCh>
 8002c0a:	e01d      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x398>
 8002c0c:	80000004 	.word	0x80000004
 8002c10:	40012708 	.word	0x40012708
 8002c14:	b0001000 	.word	0xb0001000
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	00030d40 	.word	0x00030d40
 8002c20:	b8004000 	.word	0xb8004000
 8002c24:	b4002000 	.word	0xb4002000
 8002c28:	ff7fffff 	.word	0xff7fffff
 8002c2c:	feffffff 	.word	0xfeffffff
 8002c30:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c38:	2220      	movs	r2, #32
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c40:	2317      	movs	r3, #23
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2254      	movs	r2, #84	@ 0x54
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002c50:	2317      	movs	r3, #23
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	781b      	ldrb	r3, [r3, #0]
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b006      	add	sp, #24
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)

08002c60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff fb91 	bl	8002398 <LL_ADC_IsEnabled>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d000      	beq.n	8002c7c <ADC_Enable+0x1c>
 8002c7a:	e069      	b.n	8002d50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4a36      	ldr	r2, [pc, #216]	@ (8002d5c <ADC_Enable+0xfc>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	d00d      	beq.n	8002ca4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	2201      	movs	r2, #1
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e056      	b.n	8002d52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff fb51 	bl	8002350 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002cae:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <ADC_Enable+0x100>)
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7ff fa73 	bl	800219c <LL_ADC_GetCommonPathInternalCh>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	041b      	lsls	r3, r3, #16
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d00f      	beq.n	8002ce0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc0:	4b28      	ldr	r3, [pc, #160]	@ (8002d64 <ADC_Enable+0x104>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4928      	ldr	r1, [pc, #160]	@ (8002d68 <ADC_Enable+0x108>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fd fa24 	bl	8000114 <__udivsi3>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002cd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cd2:	e002      	b.n	8002cda <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f9      	bne.n	8002cd4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7e5b      	ldrb	r3, [r3, #25]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d033      	beq.n	8002d50 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002ce8:	f7ff fa16 	bl	8002118 <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf0:	e027      	b.n	8002d42 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7ff fb4e 	bl	8002398 <LL_ADC_IsEnabled>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d104      	bne.n	8002d0a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff fb23 	bl	8002350 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d0a:	f7ff fa05 	bl	8002118 <HAL_GetTick>
 8002d0e:	0002      	movs	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d914      	bls.n	8002d42 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d00d      	beq.n	8002d42 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	2201      	movs	r2, #1
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d1d0      	bne.n	8002cf2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b004      	add	sp, #16
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	80000017 	.word	0x80000017
 8002d60:	40012708 	.word	0x40012708
 8002d64:	20000000 	.word	0x20000000
 8002d68:	00030d40 	.word	0x00030d40

08002d6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f7ff fb1e 	bl	80023ba <LL_ADC_IsDisableOngoing>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f7ff fb06 	bl	8002398 <LL_ADC_IsEnabled>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d046      	beq.n	8002e1e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d143      	bne.n	8002e1e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2205      	movs	r2, #5
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10d      	bne.n	8002dc0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff fae3 	bl	8002374 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2203      	movs	r2, #3
 8002db4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002db6:	f7ff f9af 	bl	8002118 <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dbe:	e028      	b.n	8002e12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e021      	b.n	8002e20 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ddc:	f7ff f99c 	bl	8002118 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d913      	bls.n	8002e12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2201      	movs	r2, #1
 8002df2:	4013      	ands	r3, r2
 8002df4:	d00d      	beq.n	8002e12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e06:	2201      	movs	r2, #1
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e006      	b.n	8002e20 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d1de      	bne.n	8002ddc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b004      	add	sp, #16
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	2250      	movs	r2, #80	@ 0x50
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d141      	bne.n	8002ec4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	2280      	movs	r2, #128	@ 0x80
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7ff f9e3 	bl	800221e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e58:	1e03      	subs	r3, r0, #0
 8002e5a:	d02e      	beq.n	8002eba <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	7e9b      	ldrb	r3, [r3, #26]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d12a      	bne.n	8002eba <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d123      	bne.n	8002eba <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7ff fac2 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 8002e7c:	1e03      	subs	r3, r0, #0
 8002e7e:	d110      	bne.n	8002ea2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	210c      	movs	r1, #12
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e94:	4a15      	ldr	r2, [pc, #84]	@ (8002eec <ADC_DMAConvCplt+0xc4>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	2201      	movs	r2, #1
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ea0:	e00b      	b.n	8002eba <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7fe fdcf 	bl	8001a60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ec2:	e00f      	b.n	8002ee4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	2210      	movs	r2, #16
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7ff fce5 	bl	80028a0 <HAL_ADC_ErrorCallback>
}
 8002ed6:	e005      	b.n	8002ee4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	0010      	movs	r0, r2
 8002ee2:	4798      	blx	r3
}
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	fffffefe 	.word	0xfffffefe

08002ef0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7ff fcc5 	bl	8002890 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f20:	2240      	movs	r2, #64	@ 0x40
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7ff fcb2 	bl	80028a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b004      	add	sp, #16
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <LL_ADC_GetCommonClock>:
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	23f0      	movs	r3, #240	@ 0xf0
 8002f52:	039b      	lsls	r3, r3, #14
 8002f54:	4013      	ands	r3, r2
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b002      	add	sp, #8
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <LL_ADC_GetClock>:
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	0f9b      	lsrs	r3, r3, #30
 8002f6c:	079b      	lsls	r3, r3, #30
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <LL_ADC_SetCalibrationFactor>:
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	22b4      	movs	r2, #180	@ 0xb4
 8002f84:	589b      	ldr	r3, [r3, r2]
 8002f86:	227f      	movs	r2, #127	@ 0x7f
 8002f88:	4393      	bics	r3, r2
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	21b4      	movs	r1, #180	@ 0xb4
 8002f94:	505a      	str	r2, [r3, r1]
}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <LL_ADC_GetCalibrationFactor>:
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	22b4      	movs	r2, #180	@ 0xb4
 8002faa:	589b      	ldr	r3, [r3, r2]
 8002fac:	227f      	movs	r2, #127	@ 0x7f
 8002fae:	4013      	ands	r3, r2
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <LL_ADC_Enable>:
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <LL_ADC_Enable+0x20>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2201      	movs	r2, #1
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	46c0      	nop			@ (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b002      	add	sp, #8
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	7fffffe8 	.word	0x7fffffe8

08002fdc <LL_ADC_Disable>:
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a04      	ldr	r2, [pc, #16]	@ (8002ffc <LL_ADC_Disable+0x20>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	2202      	movs	r2, #2
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
}
 8002ff4:	46c0      	nop			@ (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	7fffffe8 	.word	0x7fffffe8

08003000 <LL_ADC_IsEnabled>:
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2201      	movs	r2, #1
 800300e:	4013      	ands	r3, r2
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <LL_ADC_IsEnabled+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_IsEnabled+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <LL_ADC_StartCalibration>:
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a05      	ldr	r2, [pc, #20]	@ (8003048 <LL_ADC_StartCalibration+0x24>)
 8003032:	4013      	ands	r3, r2
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	0612      	lsls	r2, r2, #24
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b002      	add	sp, #8
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	7fffffe8 	.word	0x7fffffe8

0800304c <LL_ADC_IsCalibrationOnGoing>:
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	0fdb      	lsrs	r3, r3, #31
 800305a:	07da      	lsls	r2, r3, #31
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	429a      	cmp	r2, r3
 8003062:	d101      	bne.n	8003068 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003068:	2300      	movs	r3, #0
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b002      	add	sp, #8
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b08b      	sub	sp, #44	@ 0x2c
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2254      	movs	r2, #84	@ 0x54
 8003088:	5c9b      	ldrb	r3, [r3, r2]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADCEx_Calibration_Start+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e0dd      	b.n	800324e <HAL_ADCEx_Calibration_Start+0x1da>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2254      	movs	r2, #84	@ 0x54
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800309a:	231f      	movs	r3, #31
 800309c:	18fc      	adds	r4, r7, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff fe63 	bl	8002d6c <ADC_Disable>
 80030a6:	0003      	movs	r3, r0
 80030a8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff ffa6 	bl	8003000 <LL_ADC_IsEnabled>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	d000      	beq.n	80030ba <HAL_ADCEx_Calibration_Start+0x46>
 80030b8:	e0bc      	b.n	8003234 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	4a66      	ldr	r2, [pc, #408]	@ (8003258 <HAL_ADCEx_Calibration_Start+0x1e4>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	2202      	movs	r2, #2
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a62      	ldr	r2, [pc, #392]	@ (800325c <HAL_ADCEx_Calibration_Start+0x1e8>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	495f      	ldr	r1, [pc, #380]	@ (8003260 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ea:	e02d      	b.n	8003148 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff ff97 	bl	8003024 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030f6:	e014      	b.n	8003122 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3301      	adds	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d90d      	bls.n	8003122 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310a:	2212      	movs	r2, #18
 800310c:	4393      	bics	r3, r2
 800310e:	2210      	movs	r2, #16
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2254      	movs	r2, #84	@ 0x54
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e095      	b.n	800324e <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0018      	movs	r0, r3
 8003128:	f7ff ff90 	bl	800304c <LL_ADC_IsCalibrationOnGoing>
 800312c:	1e03      	subs	r3, r0, #0
 800312e:	d1e3      	bne.n	80030f8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff ff32 	bl	8002f9e <LL_ADC_GetCalibrationFactor>
 800313a:	0002      	movs	r2, r0
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	189b      	adds	r3, r3, r2
 8003140:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	3301      	adds	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	2b07      	cmp	r3, #7
 800314c:	d9ce      	bls.n	80030ec <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800314e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003150:	6a38      	ldr	r0, [r7, #32]
 8003152:	f7fc ffdf 	bl	8000114 <__udivsi3>
 8003156:	0003      	movs	r3, r0
 8003158:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0018      	movs	r0, r3
 8003160:	f7ff ff2a 	bl	8002fb8 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0018      	movs	r0, r3
 800316a:	f7ff fef8 	bl	8002f5e <LL_ADC_GetClock>
 800316e:	1e03      	subs	r3, r0, #0
 8003170:	d11b      	bne.n	80031aa <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003172:	4b3d      	ldr	r3, [pc, #244]	@ (8003268 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8003174:	0018      	movs	r0, r3
 8003176:	f7ff fee5 	bl	8002f44 <LL_ADC_GetCommonClock>
 800317a:	0003      	movs	r3, r0
 800317c:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	23e0      	movs	r3, #224	@ 0xe0
 8003182:	035b      	lsls	r3, r3, #13
 8003184:	429a      	cmp	r2, r3
 8003186:	d310      	bcc.n	80031aa <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	3b03      	subs	r3, #3
 800318e:	2201      	movs	r2, #1
 8003190:	409a      	lsls	r2, r3
 8003192:	0013      	movs	r3, r2
 8003194:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800319c:	e002      	b.n	80031a4 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f9      	bne.n	800319e <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a3a      	ldr	r2, [r7, #32]
 80031b0:	0011      	movs	r1, r2
 80031b2:	0018      	movs	r0, r3
 80031b4:	f7ff fedf 	bl	8002f76 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7ff ff0d 	bl	8002fdc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031c2:	f7fe ffa9 	bl	8002118 <HAL_GetTick>
 80031c6:	0003      	movs	r3, r0
 80031c8:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031ca:	e01b      	b.n	8003204 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031cc:	f7fe ffa4 	bl	8002118 <HAL_GetTick>
 80031d0:	0002      	movs	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d914      	bls.n	8003204 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	0018      	movs	r0, r3
 80031e0:	f7ff ff0e 	bl	8003000 <LL_ADC_IsEnabled>
 80031e4:	1e03      	subs	r3, r0, #0
 80031e6:	d00d      	beq.n	8003204 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ec:	2210      	movs	r2, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f8:	2201      	movs	r2, #1
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e024      	b.n	800324e <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0018      	movs	r0, r3
 800320a:	f7ff fef9 	bl	8003000 <LL_ADC_IsEnabled>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d1dc      	bne.n	80031cc <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68d9      	ldr	r1, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	430a      	orrs	r2, r1
 8003220:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	2203      	movs	r2, #3
 8003228:	4393      	bics	r3, r2
 800322a:	2201      	movs	r2, #1
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	659a      	str	r2, [r3, #88]	@ 0x58
 8003232:	e005      	b.n	8003240 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	2210      	movs	r2, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2254      	movs	r2, #84	@ 0x54
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003248:	231f      	movs	r3, #31
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	781b      	ldrb	r3, [r3, #0]
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b00b      	add	sp, #44	@ 0x2c
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	fffffefd 	.word	0xfffffefd
 800325c:	00008003 	.word	0x00008003
 8003260:	ffff7ffc 	.word	0xffff7ffc
 8003264:	0002f1ff 	.word	0x0002f1ff
 8003268:	40012708 	.word	0x40012708

0800326c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	0002      	movs	r2, r0
 8003274:	1dfb      	adds	r3, r7, #7
 8003276:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003278:	1dfb      	adds	r3, r7, #7
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b7f      	cmp	r3, #127	@ 0x7f
 800327e:	d809      	bhi.n	8003294 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003280:	1dfb      	adds	r3, r7, #7
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	001a      	movs	r2, r3
 8003286:	231f      	movs	r3, #31
 8003288:	401a      	ands	r2, r3
 800328a:	4b04      	ldr	r3, [pc, #16]	@ (800329c <__NVIC_EnableIRQ+0x30>)
 800328c:	2101      	movs	r1, #1
 800328e:	4091      	lsls	r1, r2
 8003290:	000a      	movs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003294:	46c0      	nop			@ (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}
 800329c:	e000e100 	.word	0xe000e100

080032a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	0002      	movs	r2, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	1dfb      	adds	r3, r7, #7
 80032ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032ae:	1dfb      	adds	r3, r7, #7
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80032b4:	d828      	bhi.n	8003308 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003374 <__NVIC_SetPriority+0xd4>)
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	33c0      	adds	r3, #192	@ 0xc0
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	589b      	ldr	r3, [r3, r2]
 80032c6:	1dfa      	adds	r2, r7, #7
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	0011      	movs	r1, r2
 80032cc:	2203      	movs	r2, #3
 80032ce:	400a      	ands	r2, r1
 80032d0:	00d2      	lsls	r2, r2, #3
 80032d2:	21ff      	movs	r1, #255	@ 0xff
 80032d4:	4091      	lsls	r1, r2
 80032d6:	000a      	movs	r2, r1
 80032d8:	43d2      	mvns	r2, r2
 80032da:	401a      	ands	r2, r3
 80032dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	019b      	lsls	r3, r3, #6
 80032e2:	22ff      	movs	r2, #255	@ 0xff
 80032e4:	401a      	ands	r2, r3
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	0018      	movs	r0, r3
 80032ec:	2303      	movs	r3, #3
 80032ee:	4003      	ands	r3, r0
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032f4:	481f      	ldr	r0, [pc, #124]	@ (8003374 <__NVIC_SetPriority+0xd4>)
 80032f6:	1dfb      	adds	r3, r7, #7
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b25b      	sxtb	r3, r3
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	430a      	orrs	r2, r1
 8003300:	33c0      	adds	r3, #192	@ 0xc0
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003306:	e031      	b.n	800336c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003308:	4a1b      	ldr	r2, [pc, #108]	@ (8003378 <__NVIC_SetPriority+0xd8>)
 800330a:	1dfb      	adds	r3, r7, #7
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	0019      	movs	r1, r3
 8003310:	230f      	movs	r3, #15
 8003312:	400b      	ands	r3, r1
 8003314:	3b08      	subs	r3, #8
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3306      	adds	r3, #6
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	18d3      	adds	r3, r2, r3
 800331e:	3304      	adds	r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1dfa      	adds	r2, r7, #7
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	0011      	movs	r1, r2
 8003328:	2203      	movs	r2, #3
 800332a:	400a      	ands	r2, r1
 800332c:	00d2      	lsls	r2, r2, #3
 800332e:	21ff      	movs	r1, #255	@ 0xff
 8003330:	4091      	lsls	r1, r2
 8003332:	000a      	movs	r2, r1
 8003334:	43d2      	mvns	r2, r2
 8003336:	401a      	ands	r2, r3
 8003338:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	22ff      	movs	r2, #255	@ 0xff
 8003340:	401a      	ands	r2, r3
 8003342:	1dfb      	adds	r3, r7, #7
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	0018      	movs	r0, r3
 8003348:	2303      	movs	r3, #3
 800334a:	4003      	ands	r3, r0
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003350:	4809      	ldr	r0, [pc, #36]	@ (8003378 <__NVIC_SetPriority+0xd8>)
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	001c      	movs	r4, r3
 8003358:	230f      	movs	r3, #15
 800335a:	4023      	ands	r3, r4
 800335c:	3b08      	subs	r3, #8
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	430a      	orrs	r2, r1
 8003362:	3306      	adds	r3, #6
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	18c3      	adds	r3, r0, r3
 8003368:	3304      	adds	r3, #4
 800336a:	601a      	str	r2, [r3, #0]
}
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b003      	add	sp, #12
 8003372:	bd90      	pop	{r4, r7, pc}
 8003374:	e000e100 	.word	0xe000e100
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	1e5a      	subs	r2, r3, #1
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	045b      	lsls	r3, r3, #17
 800338c:	429a      	cmp	r2, r3
 800338e:	d301      	bcc.n	8003394 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003390:	2301      	movs	r3, #1
 8003392:	e010      	b.n	80033b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003394:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <SysTick_Config+0x44>)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	3a01      	subs	r2, #1
 800339a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339c:	2301      	movs	r3, #1
 800339e:	425b      	negs	r3, r3
 80033a0:	2103      	movs	r1, #3
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff ff7c 	bl	80032a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a8:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <SysTick_Config+0x44>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ae:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <SysTick_Config+0x44>)
 80033b0:	2207      	movs	r2, #7
 80033b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b002      	add	sp, #8
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	e000e010 	.word	0xe000e010

080033c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	210f      	movs	r1, #15
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	1c02      	adds	r2, r0, #0
 80033d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b25b      	sxtb	r3, r3
 80033de:	0011      	movs	r1, r2
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7ff ff5d 	bl	80032a0 <__NVIC_SetPriority>
}
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b004      	add	sp, #16
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	0002      	movs	r2, r0
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b25b      	sxtb	r3, r3
 8003400:	0018      	movs	r0, r3
 8003402:	f7ff ff33 	bl	800326c <__NVIC_EnableIRQ>
}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0018      	movs	r0, r3
 800341a:	f7ff ffaf 	bl	800337c <SysTick_Config>
 800341e:	0003      	movs	r3, r0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e077      	b.n	800352a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3d      	ldr	r2, [pc, #244]	@ (8003534 <HAL_DMA_Init+0x10c>)
 8003440:	4694      	mov	ip, r2
 8003442:	4463      	add	r3, ip
 8003444:	2114      	movs	r1, #20
 8003446:	0018      	movs	r0, r3
 8003448:	f7fc fe64 	bl	8000114 <__udivsi3>
 800344c:	0003      	movs	r3, r0
 800344e:	009a      	lsls	r2, r3, #2
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2225      	movs	r2, #37	@ 0x25
 8003458:	2102      	movs	r1, #2
 800345a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4934      	ldr	r1, [pc, #208]	@ (8003538 <HAL_DMA_Init+0x110>)
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 f9c1 	bl	800382c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	2380      	movs	r3, #128	@ 0x80
 80034b0:	01db      	lsls	r3, r3, #7
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d102      	bne.n	80034bc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c4:	213f      	movs	r1, #63	@ 0x3f
 80034c6:	400a      	ands	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d011      	beq.n	8003500 <HAL_DMA_Init+0xd8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d80d      	bhi.n	8003500 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	0018      	movs	r0, r3
 80034e8:	f000 f9cc 	bl	8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	e008      	b.n	8003512 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2225      	movs	r2, #37	@ 0x25
 800351c:	2101      	movs	r1, #1
 800351e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	@ 0x24
 8003524:	2100      	movs	r1, #0
 8003526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	b002      	add	sp, #8
 8003530:	bd80      	pop	{r7, pc}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	bffdfff8 	.word	0xbffdfff8
 8003538:	ffff800f 	.word	0xffff800f

0800353c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2317      	movs	r3, #23
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2224      	movs	r2, #36	@ 0x24
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_DMA_Start_IT+0x24>
 800355c:	2302      	movs	r3, #2
 800355e:	e06f      	b.n	8003640 <HAL_DMA_Start_IT+0x104>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2224      	movs	r2, #36	@ 0x24
 8003564:	2101      	movs	r1, #1
 8003566:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2225      	movs	r2, #37	@ 0x25
 800356c:	5c9b      	ldrb	r3, [r3, r2]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d157      	bne.n	8003624 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2225      	movs	r2, #37	@ 0x25
 8003578:	2102      	movs	r1, #2
 800357a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2101      	movs	r1, #1
 800358e:	438a      	bics	r2, r1
 8003590:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f907 	bl	80037ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	210e      	movs	r1, #14
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e00f      	b.n	80035d8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2104      	movs	r1, #4
 80035c4:	438a      	bics	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	210a      	movs	r1, #10
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	2380      	movs	r3, #128	@ 0x80
 80035e0:	025b      	lsls	r3, r3, #9
 80035e2:	4013      	ands	r3, r2
 80035e4:	d008      	beq.n	80035f8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	2180      	movs	r1, #128	@ 0x80
 80035f2:	0049      	lsls	r1, r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360a:	2180      	movs	r1, #128	@ 0x80
 800360c:	0049      	lsls	r1, r1, #1
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2101      	movs	r1, #1
 800361e:	430a      	orrs	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e00a      	b.n	800363a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2280      	movs	r2, #128	@ 0x80
 8003628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2224      	movs	r2, #36	@ 0x24
 800362e:	2100      	movs	r1, #0
 8003630:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003632:	2317      	movs	r3, #23
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800363a:	2317      	movs	r3, #23
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	781b      	ldrb	r3, [r3, #0]
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003650:	4b55      	ldr	r3, [pc, #340]	@ (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	221c      	movs	r2, #28
 8003664:	4013      	ands	r3, r2
 8003666:	2204      	movs	r2, #4
 8003668:	409a      	lsls	r2, r3
 800366a:	0013      	movs	r3, r2
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4013      	ands	r3, r2
 8003670:	d027      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x7a>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2204      	movs	r2, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d023      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2220      	movs	r2, #32
 8003682:	4013      	ands	r3, r2
 8003684:	d107      	bne.n	8003696 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2104      	movs	r1, #4
 8003692:	438a      	bics	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003696:	4b44      	ldr	r3, [pc, #272]	@ (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	221c      	movs	r2, #28
 80036a0:	4013      	ands	r3, r2
 80036a2:	2204      	movs	r2, #4
 80036a4:	409a      	lsls	r2, r3
 80036a6:	4b40      	ldr	r3, [pc, #256]	@ (80037a8 <HAL_DMA_IRQHandler+0x160>)
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d100      	bne.n	80036b6 <HAL_DMA_IRQHandler+0x6e>
 80036b4:	e073      	b.n	800379e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	0010      	movs	r0, r2
 80036be:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80036c0:	e06d      	b.n	800379e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	221c      	movs	r2, #28
 80036c8:	4013      	ands	r3, r2
 80036ca:	2202      	movs	r2, #2
 80036cc:	409a      	lsls	r2, r3
 80036ce:	0013      	movs	r3, r2
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	d02e      	beq.n	8003734 <HAL_DMA_IRQHandler+0xec>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2202      	movs	r2, #2
 80036da:	4013      	ands	r3, r2
 80036dc:	d02a      	beq.n	8003734 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2220      	movs	r2, #32
 80036e6:	4013      	ands	r3, r2
 80036e8:	d10b      	bne.n	8003702 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	210a      	movs	r1, #10
 80036f6:	438a      	bics	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2225      	movs	r2, #37	@ 0x25
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003702:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	221c      	movs	r2, #28
 800370c:	4013      	ands	r3, r2
 800370e:	2202      	movs	r2, #2
 8003710:	409a      	lsls	r2, r3
 8003712:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	@ 0x24
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03a      	beq.n	800379e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	0010      	movs	r0, r2
 8003730:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003732:	e034      	b.n	800379e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	221c      	movs	r2, #28
 800373a:	4013      	ands	r3, r2
 800373c:	2208      	movs	r2, #8
 800373e:	409a      	lsls	r2, r3
 8003740:	0013      	movs	r3, r2
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4013      	ands	r3, r2
 8003746:	d02b      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x158>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2208      	movs	r2, #8
 800374c:	4013      	ands	r3, r2
 800374e:	d027      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	210e      	movs	r1, #14
 800375c:	438a      	bics	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003760:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	221c      	movs	r2, #28
 800376a:	4013      	ands	r3, r2
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2225      	movs	r2, #37	@ 0x25
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	@ 0x24
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	0010      	movs	r0, r2
 800379c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	46c0      	nop			@ (mov r8, r8)
}
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b004      	add	sp, #16
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40020000 	.word	0x40020000

080037ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037d4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80037d6:	4b14      	ldr	r3, [pc, #80]	@ (8003828 <DMA_SetConfig+0x7c>)
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	221c      	movs	r2, #28
 80037e0:	4013      	ands	r3, r2
 80037e2:	2201      	movs	r2, #1
 80037e4:	409a      	lsls	r2, r3
 80037e6:	4b10      	ldr	r3, [pc, #64]	@ (8003828 <DMA_SetConfig+0x7c>)
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d108      	bne.n	800380e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800380c:	e007      	b.n	800381e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	60da      	str	r2, [r3, #12]
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	40020000 	.word	0x40020000

0800382c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	4a10      	ldr	r2, [pc, #64]	@ (800387c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800383c:	4694      	mov	ip, r2
 800383e:	4463      	add	r3, ip
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	001a      	movs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	001a      	movs	r2, r3
 800384e:	23ff      	movs	r3, #255	@ 0xff
 8003850:	4013      	ands	r3, r2
 8003852:	3b08      	subs	r3, #8
 8003854:	2114      	movs	r1, #20
 8003856:	0018      	movs	r0, r3
 8003858:	f7fc fc5c 	bl	8000114 <__udivsi3>
 800385c:	0003      	movs	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a07      	ldr	r2, [pc, #28]	@ (8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003864:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	221f      	movs	r2, #31
 800386a:	4013      	ands	r3, r2
 800386c:	2201      	movs	r2, #1
 800386e:	409a      	lsls	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003874:	46c0      	nop			@ (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	10008200 	.word	0x10008200
 8003880:	40020880 	.word	0x40020880

08003884 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	223f      	movs	r2, #63	@ 0x3f
 8003892:	4013      	ands	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a0a      	ldr	r2, [pc, #40]	@ (80038c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800389a:	4694      	mov	ip, r2
 800389c:	4463      	add	r3, ip
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	001a      	movs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a07      	ldr	r2, [pc, #28]	@ (80038c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	4013      	ands	r3, r2
 80038b4:	2201      	movs	r2, #1
 80038b6:	409a      	lsls	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b004      	add	sp, #16
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	1000823f 	.word	0x1000823f
 80038c8:	40020940 	.word	0x40020940

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038da:	e147      	b.n	8003b6c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4091      	lsls	r1, r2
 80038e6:	000a      	movs	r2, r1
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d100      	bne.n	80038f4 <HAL_GPIO_Init+0x28>
 80038f2:	e138      	b.n	8003b66 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d005      	beq.n	800390c <HAL_GPIO_Init+0x40>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2203      	movs	r2, #3
 8003906:	4013      	ands	r3, r2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d130      	bne.n	800396e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	409a      	lsls	r2, r3
 800391a:	0013      	movs	r3, r2
 800391c:	43da      	mvns	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	409a      	lsls	r2, r3
 800392e:	0013      	movs	r3, r2
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003942:	2201      	movs	r2, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	409a      	lsls	r2, r3
 8003948:	0013      	movs	r3, r2
 800394a:	43da      	mvns	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	2201      	movs	r2, #1
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2203      	movs	r2, #3
 8003974:	4013      	ands	r3, r2
 8003976:	2b03      	cmp	r3, #3
 8003978:	d017      	beq.n	80039aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	2203      	movs	r2, #3
 8003986:	409a      	lsls	r2, r3
 8003988:	0013      	movs	r3, r2
 800398a:	43da      	mvns	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d123      	bne.n	80039fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	08da      	lsrs	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3208      	adds	r2, #8
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	58d3      	ldr	r3, [r2, r3]
 80039c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2207      	movs	r2, #7
 80039c8:	4013      	ands	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	220f      	movs	r2, #15
 80039ce:	409a      	lsls	r2, r3
 80039d0:	0013      	movs	r3, r2
 80039d2:	43da      	mvns	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2107      	movs	r1, #7
 80039e2:	400b      	ands	r3, r1
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	409a      	lsls	r2, r3
 80039e8:	0013      	movs	r3, r2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	08da      	lsrs	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3208      	adds	r2, #8
 80039f8:	0092      	lsls	r2, r2, #2
 80039fa:	6939      	ldr	r1, [r7, #16]
 80039fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	23c0      	movs	r3, #192	@ 0xc0
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d100      	bne.n	8003a40 <HAL_GPIO_Init+0x174>
 8003a3e:	e092      	b.n	8003b66 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a40:	4a50      	ldr	r2, [pc, #320]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3318      	adds	r3, #24
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	589b      	ldr	r3, [r3, r2]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2203      	movs	r2, #3
 8003a52:	4013      	ands	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	220f      	movs	r2, #15
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	23a0      	movs	r3, #160	@ 0xa0
 8003a68:	05db      	lsls	r3, r3, #23
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0x1ca>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a45      	ldr	r2, [pc, #276]	@ (8003b88 <HAL_GPIO_Init+0x2bc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_Init+0x1c6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a44      	ldr	r2, [pc, #272]	@ (8003b8c <HAL_GPIO_Init+0x2c0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_Init+0x1c2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a43      	ldr	r2, [pc, #268]	@ (8003b90 <HAL_GPIO_Init+0x2c4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_Init+0x1be>
 8003a86:	2303      	movs	r3, #3
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	e004      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a96:	2300      	movs	r3, #0
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	2103      	movs	r1, #3
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	00d2      	lsls	r2, r2, #3
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003aa8:	4936      	ldr	r1, [pc, #216]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3318      	adds	r3, #24
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab6:	4b33      	ldr	r3, [pc, #204]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	035b      	lsls	r3, r3, #13
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ada:	4b2a      	ldr	r3, [pc, #168]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ae0:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	2380      	movs	r3, #128	@ 0x80
 8003af6:	039b      	lsls	r3, r3, #14
 8003af8:	4013      	ands	r3, r2
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b04:	4b1f      	ldr	r3, [pc, #124]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b0c:	2384      	movs	r3, #132	@ 0x84
 8003b0e:	58d3      	ldr	r3, [r2, r3]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	43da      	mvns	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	2380      	movs	r3, #128	@ 0x80
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	4013      	ands	r3, r2
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b30:	4914      	ldr	r1, [pc, #80]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b32:	2284      	movs	r2, #132	@ 0x84
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b38:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	58d3      	ldr	r3, [r2, r3]
 8003b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	43da      	mvns	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	2380      	movs	r3, #128	@ 0x80
 8003b50:	025b      	lsls	r3, r3, #9
 8003b52:	4013      	ands	r3, r2
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b5e:	4909      	ldr	r1, [pc, #36]	@ (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b60:	2280      	movs	r2, #128	@ 0x80
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	40da      	lsrs	r2, r3
 8003b74:	1e13      	subs	r3, r2, #0
 8003b76:	d000      	beq.n	8003b7a <HAL_GPIO_Init+0x2ae>
 8003b78:	e6b0      	b.n	80038dc <HAL_GPIO_Init+0x10>
  }
}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b006      	add	sp, #24
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021800 	.word	0x40021800
 8003b88:	50000400 	.word	0x50000400
 8003b8c:	50000800 	.word	0x50000800
 8003b90:	50000c00 	.word	0x50000c00

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	0008      	movs	r0, r1
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	1cbb      	adds	r3, r7, #2
 8003ba2:	1c02      	adds	r2, r0, #0
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	1c7b      	adds	r3, r7, #1
 8003ba8:	1c0a      	adds	r2, r1, #0
 8003baa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bac:	1c7b      	adds	r3, r7, #1
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb4:	1cbb      	adds	r3, r7, #2
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bbc:	e003      	b.n	8003bc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bbe:	1cbb      	adds	r3, r7, #2
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003bd8:	4b19      	ldr	r3, [pc, #100]	@ (8003c40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a19      	ldr	r2, [pc, #100]	@ (8003c44 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	0019      	movs	r1, r3
 8003be2:	4b17      	ldr	r3, [pc, #92]	@ (8003c40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d11f      	bne.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003bf4:	4b14      	ldr	r3, [pc, #80]	@ (8003c48 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	0013      	movs	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	189b      	adds	r3, r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4912      	ldr	r1, [pc, #72]	@ (8003c4c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c02:	0018      	movs	r0, r3
 8003c04:	f7fc fa86 	bl	8000114 <__udivsi3>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c0e:	e008      	b.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e001      	b.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e009      	b.n	8003c36 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c22:	4b07      	ldr	r3, [pc, #28]	@ (8003c40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	2380      	movs	r3, #128	@ 0x80
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	2380      	movs	r3, #128	@ 0x80
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d0ed      	beq.n	8003c10 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	40007000 	.word	0x40007000
 8003c44:	fffff9ff 	.word	0xfffff9ff
 8003c48:	20000000 	.word	0x20000000
 8003c4c:	000f4240 	.word	0x000f4240

08003c50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c54:	4b03      	ldr	r3, [pc, #12]	@ (8003c64 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	23e0      	movs	r3, #224	@ 0xe0
 8003c5a:	01db      	lsls	r3, r3, #7
 8003c5c:	4013      	ands	r3, r2
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000

08003c68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e2f3      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	4013      	ands	r3, r2
 8003c82:	d100      	bne.n	8003c86 <HAL_RCC_OscConfig+0x1e>
 8003c84:	e07c      	b.n	8003d80 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c86:	4bc3      	ldr	r3, [pc, #780]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2238      	movs	r2, #56	@ 0x38
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c90:	4bc0      	ldr	r3, [pc, #768]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2203      	movs	r2, #3
 8003c96:	4013      	ands	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d102      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x3e>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d002      	beq.n	8003cac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cac:	4bb9      	ldr	r3, [pc, #740]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	@ 0x80
 8003cb2:	029b      	lsls	r3, r3, #10
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d062      	beq.n	8003d7e <HAL_RCC_OscConfig+0x116>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d15e      	bne.n	8003d7e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e2ce      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	025b      	lsls	r3, r3, #9
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d107      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x78>
 8003cd0:	4bb0      	ldr	r3, [pc, #704]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4baf      	ldr	r3, [pc, #700]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	2180      	movs	r1, #128	@ 0x80
 8003cd8:	0249      	lsls	r1, r1, #9
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e020      	b.n	8003d22 <HAL_RCC_OscConfig+0xba>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	23a0      	movs	r3, #160	@ 0xa0
 8003ce6:	02db      	lsls	r3, r3, #11
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d10e      	bne.n	8003d0a <HAL_RCC_OscConfig+0xa2>
 8003cec:	4ba9      	ldr	r3, [pc, #676]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4ba8      	ldr	r3, [pc, #672]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003cf2:	2180      	movs	r1, #128	@ 0x80
 8003cf4:	02c9      	lsls	r1, r1, #11
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	4ba6      	ldr	r3, [pc, #664]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4ba5      	ldr	r3, [pc, #660]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	2180      	movs	r1, #128	@ 0x80
 8003d02:	0249      	lsls	r1, r1, #9
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e00b      	b.n	8003d22 <HAL_RCC_OscConfig+0xba>
 8003d0a:	4ba2      	ldr	r3, [pc, #648]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4ba1      	ldr	r3, [pc, #644]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003d10:	49a1      	ldr	r1, [pc, #644]	@ (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003d12:	400a      	ands	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	4b9f      	ldr	r3, [pc, #636]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4b9e      	ldr	r3, [pc, #632]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003d1c:	499f      	ldr	r1, [pc, #636]	@ (8003f9c <HAL_RCC_OscConfig+0x334>)
 8003d1e:	400a      	ands	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d014      	beq.n	8003d54 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fe f9f5 	bl	8002118 <HAL_GetTick>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe f9f0 	bl	8002118 <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	@ 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e28d      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d46:	4b93      	ldr	r3, [pc, #588]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	@ 0x80
 8003d4c:	029b      	lsls	r3, r3, #10
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0xcc>
 8003d52:	e015      	b.n	8003d80 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fe f9e0 	bl	8002118 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5e:	f7fe f9db 	bl	8002118 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b64      	cmp	r3, #100	@ 0x64
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e278      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d70:	4b88      	ldr	r3, [pc, #544]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	029b      	lsls	r3, r3, #10
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCC_OscConfig+0xf6>
 8003d7c:	e000      	b.n	8003d80 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2202      	movs	r2, #2
 8003d86:	4013      	ands	r3, r2
 8003d88:	d100      	bne.n	8003d8c <HAL_RCC_OscConfig+0x124>
 8003d8a:	e099      	b.n	8003ec0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d8c:	4b81      	ldr	r3, [pc, #516]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2238      	movs	r2, #56	@ 0x38
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d96:	4b7f      	ldr	r3, [pc, #508]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d102      	bne.n	8003dac <HAL_RCC_OscConfig+0x144>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d002      	beq.n	8003db2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d135      	bne.n	8003e1e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db2:	4b78      	ldr	r3, [pc, #480]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	2380      	movs	r3, #128	@ 0x80
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d005      	beq.n	8003dca <HAL_RCC_OscConfig+0x162>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e24b      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dca:	4b72      	ldr	r3, [pc, #456]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a74      	ldr	r2, [pc, #464]	@ (8003fa0 <HAL_RCC_OscConfig+0x338>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	021a      	lsls	r2, r3, #8
 8003dda:	4b6e      	ldr	r3, [pc, #440]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003de6:	4b6b      	ldr	r3, [pc, #428]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa4 <HAL_RCC_OscConfig+0x33c>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	0019      	movs	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	4b67      	ldr	r3, [pc, #412]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003dfa:	4b66      	ldr	r3, [pc, #408]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	0adb      	lsrs	r3, r3, #11
 8003e00:	2207      	movs	r2, #7
 8003e02:	4013      	ands	r3, r2
 8003e04:	4a68      	ldr	r2, [pc, #416]	@ (8003fa8 <HAL_RCC_OscConfig+0x340>)
 8003e06:	40da      	lsrs	r2, r3
 8003e08:	4b68      	ldr	r3, [pc, #416]	@ (8003fac <HAL_RCC_OscConfig+0x344>)
 8003e0a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e0c:	4b68      	ldr	r3, [pc, #416]	@ (8003fb0 <HAL_RCC_OscConfig+0x348>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7fe f925 	bl	8002060 <HAL_InitTick>
 8003e16:	1e03      	subs	r3, r0, #0
 8003e18:	d051      	beq.n	8003ebe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e221      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d030      	beq.n	8003e88 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e26:	4b5b      	ldr	r3, [pc, #364]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fa4 <HAL_RCC_OscConfig+0x33c>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	4b57      	ldr	r3, [pc, #348]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003e3a:	4b56      	ldr	r3, [pc, #344]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b55      	ldr	r3, [pc, #340]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003e40:	2180      	movs	r1, #128	@ 0x80
 8003e42:	0049      	lsls	r1, r1, #1
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe f966 	bl	8002118 <HAL_GetTick>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fe f961 	bl	8002118 <HAL_GetTick>
 8003e56:	0002      	movs	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1fe      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e64:	4b4b      	ldr	r3, [pc, #300]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b48      	ldr	r3, [pc, #288]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa0 <HAL_RCC_OscConfig+0x338>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	0019      	movs	r1, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	4b44      	ldr	r3, [pc, #272]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	e01b      	b.n	8003ec0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003e88:	4b42      	ldr	r3, [pc, #264]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b41      	ldr	r3, [pc, #260]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003e8e:	4949      	ldr	r1, [pc, #292]	@ (8003fb4 <HAL_RCC_OscConfig+0x34c>)
 8003e90:	400a      	ands	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe f940 	bl	8002118 <HAL_GetTick>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9e:	f7fe f93b 	bl	8002118 <HAL_GetTick>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e1d8      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eb0:	4b38      	ldr	r3, [pc, #224]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	2380      	movs	r3, #128	@ 0x80
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x236>
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ebe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d047      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003eca:	4b32      	ldr	r3, [pc, #200]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2238      	movs	r2, #56	@ 0x38
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b18      	cmp	r3, #24
 8003ed4:	d10a      	bne.n	8003eec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	2202      	movs	r2, #2
 8003edc:	4013      	ands	r3, r2
 8003ede:	d03c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2f2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d138      	bne.n	8003f5a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e1ba      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d019      	beq.n	8003f28 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003ef4:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003ef6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ef8:	4b26      	ldr	r3, [pc, #152]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003efa:	2101      	movs	r1, #1
 8003efc:	430a      	orrs	r2, r1
 8003efe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe f90a 	bl	8002118 <HAL_GetTick>
 8003f04:	0003      	movs	r3, r0
 8003f06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fe f905 	bl	8002118 <HAL_GetTick>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e1a2      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f20:	2202      	movs	r2, #2
 8003f22:	4013      	ands	r3, r2
 8003f24:	d0f1      	beq.n	8003f0a <HAL_RCC_OscConfig+0x2a2>
 8003f26:	e018      	b.n	8003f5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f28:	4b1a      	ldr	r3, [pc, #104]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f2c:	4b19      	ldr	r3, [pc, #100]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	438a      	bics	r2, r1
 8003f32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe f8f0 	bl	8002118 <HAL_GetTick>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3e:	f7fe f8eb 	bl	8002118 <HAL_GetTick>
 8003f42:	0002      	movs	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e188      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f50:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f54:	2202      	movs	r2, #2
 8003f56:	4013      	ands	r3, r2
 8003f58:	d1f1      	bne.n	8003f3e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	4013      	ands	r3, r2
 8003f62:	d100      	bne.n	8003f66 <HAL_RCC_OscConfig+0x2fe>
 8003f64:	e0c6      	b.n	80040f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	231f      	movs	r3, #31
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f6e:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2238      	movs	r2, #56	@ 0x38
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d11e      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <HAL_RCC_OscConfig+0x32c>)
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7e:	2202      	movs	r2, #2
 8003f80:	4013      	ands	r3, r2
 8003f82:	d100      	bne.n	8003f86 <HAL_RCC_OscConfig+0x31e>
 8003f84:	e0b6      	b.n	80040f4 <HAL_RCC_OscConfig+0x48c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d000      	beq.n	8003f90 <HAL_RCC_OscConfig+0x328>
 8003f8e:	e0b1      	b.n	80040f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e166      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
 8003f94:	40021000 	.word	0x40021000
 8003f98:	fffeffff 	.word	0xfffeffff
 8003f9c:	fffbffff 	.word	0xfffbffff
 8003fa0:	ffff80ff 	.word	0xffff80ff
 8003fa4:	ffffc7ff 	.word	0xffffc7ff
 8003fa8:	00f42400 	.word	0x00f42400
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	20000004 	.word	0x20000004
 8003fb4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fb8:	4bac      	ldr	r3, [pc, #688]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8003fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fbc:	2380      	movs	r3, #128	@ 0x80
 8003fbe:	055b      	lsls	r3, r3, #21
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x360>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x362>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d011      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	4ba7      	ldr	r3, [pc, #668]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8003fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fd2:	4ba6      	ldr	r3, [pc, #664]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8003fd4:	2180      	movs	r1, #128	@ 0x80
 8003fd6:	0549      	lsls	r1, r1, #21
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003fdc:	4ba3      	ldr	r3, [pc, #652]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8003fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	055b      	lsls	r3, r3, #21
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003fea:	231f      	movs	r3, #31
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff2:	4b9f      	ldr	r3, [pc, #636]	@ (8004270 <HAL_RCC_OscConfig+0x608>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	@ 0x80
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d11a      	bne.n	8004034 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffe:	4b9c      	ldr	r3, [pc, #624]	@ (8004270 <HAL_RCC_OscConfig+0x608>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b9b      	ldr	r3, [pc, #620]	@ (8004270 <HAL_RCC_OscConfig+0x608>)
 8004004:	2180      	movs	r1, #128	@ 0x80
 8004006:	0049      	lsls	r1, r1, #1
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800400c:	f7fe f884 	bl	8002118 <HAL_GetTick>
 8004010:	0003      	movs	r3, r0
 8004012:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004016:	f7fe f87f 	bl	8002118 <HAL_GetTick>
 800401a:	0002      	movs	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e11c      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004028:	4b91      	ldr	r3, [pc, #580]	@ (8004270 <HAL_RCC_OscConfig+0x608>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2380      	movs	r3, #128	@ 0x80
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4013      	ands	r3, r2
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x3e2>
 800403c:	4b8b      	ldr	r3, [pc, #556]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800403e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004040:	4b8a      	ldr	r3, [pc, #552]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004042:	2101      	movs	r1, #1
 8004044:	430a      	orrs	r2, r1
 8004046:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004048:	e01c      	b.n	8004084 <HAL_RCC_OscConfig+0x41c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b05      	cmp	r3, #5
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x404>
 8004052:	4b86      	ldr	r3, [pc, #536]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004054:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004056:	4b85      	ldr	r3, [pc, #532]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004058:	2104      	movs	r1, #4
 800405a:	430a      	orrs	r2, r1
 800405c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800405e:	4b83      	ldr	r3, [pc, #524]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004060:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004062:	4b82      	ldr	r3, [pc, #520]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004064:	2101      	movs	r1, #1
 8004066:	430a      	orrs	r2, r1
 8004068:	65da      	str	r2, [r3, #92]	@ 0x5c
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0x41c>
 800406c:	4b7f      	ldr	r3, [pc, #508]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800406e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004070:	4b7e      	ldr	r3, [pc, #504]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004072:	2101      	movs	r1, #1
 8004074:	438a      	bics	r2, r1
 8004076:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004078:	4b7c      	ldr	r3, [pc, #496]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800407a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800407c:	4b7b      	ldr	r3, [pc, #492]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800407e:	2104      	movs	r1, #4
 8004080:	438a      	bics	r2, r1
 8004082:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d014      	beq.n	80040b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe f844 	bl	8002118 <HAL_GetTick>
 8004090:	0003      	movs	r3, r0
 8004092:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004094:	e009      	b.n	80040aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fe f83f 	bl	8002118 <HAL_GetTick>
 800409a:	0002      	movs	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	4a74      	ldr	r2, [pc, #464]	@ (8004274 <HAL_RCC_OscConfig+0x60c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0db      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040aa:	4b70      	ldr	r3, [pc, #448]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	2202      	movs	r2, #2
 80040b0:	4013      	ands	r3, r2
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x42e>
 80040b4:	e013      	b.n	80040de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fe f82f 	bl	8002118 <HAL_GetTick>
 80040ba:	0003      	movs	r3, r0
 80040bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040be:	e009      	b.n	80040d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fe f82a 	bl	8002118 <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	4a6a      	ldr	r2, [pc, #424]	@ (8004274 <HAL_RCC_OscConfig+0x60c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e0c6      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d4:	4b65      	ldr	r3, [pc, #404]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80040d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d8:	2202      	movs	r2, #2
 80040da:	4013      	ands	r3, r2
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80040de:	231f      	movs	r3, #31
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b60      	ldr	r3, [pc, #384]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80040ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040ec:	4b5f      	ldr	r3, [pc, #380]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80040ee:	4962      	ldr	r1, [pc, #392]	@ (8004278 <HAL_RCC_OscConfig+0x610>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d100      	bne.n	80040fe <HAL_RCC_OscConfig+0x496>
 80040fc:	e0b0      	b.n	8004260 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040fe:	4b5b      	ldr	r3, [pc, #364]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2238      	movs	r2, #56	@ 0x38
 8004104:	4013      	ands	r3, r2
 8004106:	2b10      	cmp	r3, #16
 8004108:	d100      	bne.n	800410c <HAL_RCC_OscConfig+0x4a4>
 800410a:	e078      	b.n	80041fe <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d153      	bne.n	80041bc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004114:	4b55      	ldr	r3, [pc, #340]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b54      	ldr	r3, [pc, #336]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800411a:	4958      	ldr	r1, [pc, #352]	@ (800427c <HAL_RCC_OscConfig+0x614>)
 800411c:	400a      	ands	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd fffa 	bl	8002118 <HAL_GetTick>
 8004124:	0003      	movs	r3, r0
 8004126:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412a:	f7fd fff5 	bl	8002118 <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e092      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800413c:	4b4b      	ldr	r3, [pc, #300]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2380      	movs	r3, #128	@ 0x80
 8004142:	049b      	lsls	r3, r3, #18
 8004144:	4013      	ands	r3, r2
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004148:	4b48      	ldr	r3, [pc, #288]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a4c      	ldr	r2, [pc, #304]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 800414e:	4013      	ands	r3, r2
 8004150:	0019      	movs	r1, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	431a      	orrs	r2, r3
 8004170:	4b3e      	ldr	r3, [pc, #248]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004172:	430a      	orrs	r2, r1
 8004174:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004176:	4b3d      	ldr	r3, [pc, #244]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b3c      	ldr	r3, [pc, #240]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800417c:	2180      	movs	r1, #128	@ 0x80
 800417e:	0449      	lsls	r1, r1, #17
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004184:	4b39      	ldr	r3, [pc, #228]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	4b38      	ldr	r3, [pc, #224]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800418a:	2180      	movs	r1, #128	@ 0x80
 800418c:	0549      	lsls	r1, r1, #21
 800418e:	430a      	orrs	r2, r1
 8004190:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004192:	f7fd ffc1 	bl	8002118 <HAL_GetTick>
 8004196:	0003      	movs	r3, r0
 8004198:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419c:	f7fd ffbc 	bl	8002118 <HAL_GetTick>
 80041a0:	0002      	movs	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e059      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ae:	4b2f      	ldr	r3, [pc, #188]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	049b      	lsls	r3, r3, #18
 80041b6:	4013      	ands	r3, r2
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x534>
 80041ba:	e051      	b.n	8004260 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041bc:	4b2b      	ldr	r3, [pc, #172]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b2a      	ldr	r3, [pc, #168]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80041c2:	492e      	ldr	r1, [pc, #184]	@ (800427c <HAL_RCC_OscConfig+0x614>)
 80041c4:	400a      	ands	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fd ffa6 	bl	8002118 <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fd ffa1 	bl	8002118 <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e03e      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e4:	4b21      	ldr	r3, [pc, #132]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	049b      	lsls	r3, r3, #18
 80041ec:	4013      	ands	r3, r2
 80041ee:	d1f0      	bne.n	80041d2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80041f0:	4b1e      	ldr	r3, [pc, #120]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4b1d      	ldr	r3, [pc, #116]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 80041f6:	4923      	ldr	r1, [pc, #140]	@ (8004284 <HAL_RCC_OscConfig+0x61c>)
 80041f8:	400a      	ands	r2, r1
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	e030      	b.n	8004260 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e02b      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800420a:	4b18      	ldr	r3, [pc, #96]	@ (800426c <HAL_RCC_OscConfig+0x604>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2203      	movs	r2, #3
 8004214:	401a      	ands	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	429a      	cmp	r2, r3
 800421c:	d11e      	bne.n	800425c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2270      	movs	r2, #112	@ 0x70
 8004222:	401a      	ands	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d117      	bne.n	800425c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	23fe      	movs	r3, #254	@ 0xfe
 8004230:	01db      	lsls	r3, r3, #7
 8004232:	401a      	ands	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d10e      	bne.n	800425c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	23f8      	movs	r3, #248	@ 0xf8
 8004242:	039b      	lsls	r3, r3, #14
 8004244:	401a      	ands	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	0f5b      	lsrs	r3, r3, #29
 8004252:	075a      	lsls	r2, r3, #29
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b008      	add	sp, #32
 8004268:	bd80      	pop	{r7, pc}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	40021000 	.word	0x40021000
 8004270:	40007000 	.word	0x40007000
 8004274:	00001388 	.word	0x00001388
 8004278:	efffffff 	.word	0xefffffff
 800427c:	feffffff 	.word	0xfeffffff
 8004280:	1fc1808c 	.word	0x1fc1808c
 8004284:	effefffc 	.word	0xeffefffc

08004288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0e9      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b76      	ldr	r3, [pc, #472]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2207      	movs	r2, #7
 80042a2:	4013      	ands	r3, r2
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d91e      	bls.n	80042e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b73      	ldr	r3, [pc, #460]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2207      	movs	r2, #7
 80042b0:	4393      	bics	r3, r2
 80042b2:	0019      	movs	r1, r3
 80042b4:	4b70      	ldr	r3, [pc, #448]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042bc:	f7fd ff2c 	bl	8002118 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042c4:	e009      	b.n	80042da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c6:	f7fd ff27 	bl	8002118 <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	4a6a      	ldr	r2, [pc, #424]	@ (800447c <HAL_RCC_ClockConfig+0x1f4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0ca      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042da:	4b67      	ldr	r3, [pc, #412]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2207      	movs	r2, #7
 80042e0:	4013      	ands	r3, r2
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d1ee      	bne.n	80042c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2202      	movs	r2, #2
 80042ee:	4013      	ands	r3, r2
 80042f0:	d015      	beq.n	800431e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2204      	movs	r2, #4
 80042f8:	4013      	ands	r3, r2
 80042fa:	d006      	beq.n	800430a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042fc:	4b60      	ldr	r3, [pc, #384]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4b5f      	ldr	r3, [pc, #380]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 8004302:	21e0      	movs	r1, #224	@ 0xe0
 8004304:	01c9      	lsls	r1, r1, #7
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	4a5d      	ldr	r2, [pc, #372]	@ (8004484 <HAL_RCC_ClockConfig+0x1fc>)
 8004310:	4013      	ands	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	4b59      	ldr	r3, [pc, #356]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	4013      	ands	r3, r2
 8004326:	d057      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d107      	bne.n	8004340 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004330:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	@ 0x80
 8004336:	029b      	lsls	r3, r3, #10
 8004338:	4013      	ands	r3, r2
 800433a:	d12b      	bne.n	8004394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e097      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d107      	bne.n	8004358 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004348:	4b4d      	ldr	r3, [pc, #308]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	2380      	movs	r3, #128	@ 0x80
 800434e:	049b      	lsls	r3, r3, #18
 8004350:	4013      	ands	r3, r2
 8004352:	d11f      	bne.n	8004394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e08b      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d107      	bne.n	8004370 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004360:	4b47      	ldr	r3, [pc, #284]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4013      	ands	r3, r2
 800436a:	d113      	bne.n	8004394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e07f      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d106      	bne.n	8004386 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004378:	4b41      	ldr	r3, [pc, #260]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 800437a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437c:	2202      	movs	r2, #2
 800437e:	4013      	ands	r3, r2
 8004380:	d108      	bne.n	8004394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e074      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004386:	4b3e      	ldr	r3, [pc, #248]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 8004388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438a:	2202      	movs	r2, #2
 800438c:	4013      	ands	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e06d      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004394:	4b3a      	ldr	r3, [pc, #232]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2207      	movs	r2, #7
 800439a:	4393      	bics	r3, r2
 800439c:	0019      	movs	r1, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	4b37      	ldr	r3, [pc, #220]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 80043a4:	430a      	orrs	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a8:	f7fd feb6 	bl	8002118 <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b0:	e009      	b.n	80043c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b2:	f7fd feb1 	bl	8002118 <HAL_GetTick>
 80043b6:	0002      	movs	r2, r0
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	4a2f      	ldr	r2, [pc, #188]	@ (800447c <HAL_RCC_ClockConfig+0x1f4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e054      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2238      	movs	r2, #56	@ 0x38
 80043cc:	401a      	ands	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1ec      	bne.n	80043b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d8:	4b27      	ldr	r3, [pc, #156]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2207      	movs	r2, #7
 80043de:	4013      	ands	r3, r2
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d21e      	bcs.n	8004424 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b24      	ldr	r3, [pc, #144]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2207      	movs	r2, #7
 80043ec:	4393      	bics	r3, r2
 80043ee:	0019      	movs	r1, r3
 80043f0:	4b21      	ldr	r3, [pc, #132]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043f8:	f7fd fe8e 	bl	8002118 <HAL_GetTick>
 80043fc:	0003      	movs	r3, r0
 80043fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004400:	e009      	b.n	8004416 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004402:	f7fd fe89 	bl	8002118 <HAL_GetTick>
 8004406:	0002      	movs	r2, r0
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	4a1b      	ldr	r2, [pc, #108]	@ (800447c <HAL_RCC_ClockConfig+0x1f4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e02c      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004416:	4b18      	ldr	r3, [pc, #96]	@ (8004478 <HAL_RCC_ClockConfig+0x1f0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2207      	movs	r2, #7
 800441c:	4013      	ands	r3, r2
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d1ee      	bne.n	8004402 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2204      	movs	r2, #4
 800442a:	4013      	ands	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800442e:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4a15      	ldr	r2, [pc, #84]	@ (8004488 <HAL_RCC_ClockConfig+0x200>)
 8004434:	4013      	ands	r3, r2
 8004436:	0019      	movs	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004442:	f000 f829 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8004446:	0001      	movs	r1, r0
 8004448:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <HAL_RCC_ClockConfig+0x1f8>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	220f      	movs	r2, #15
 8004450:	401a      	ands	r2, r3
 8004452:	4b0e      	ldr	r3, [pc, #56]	@ (800448c <HAL_RCC_ClockConfig+0x204>)
 8004454:	0092      	lsls	r2, r2, #2
 8004456:	58d3      	ldr	r3, [r2, r3]
 8004458:	221f      	movs	r2, #31
 800445a:	4013      	ands	r3, r2
 800445c:	000a      	movs	r2, r1
 800445e:	40da      	lsrs	r2, r3
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <HAL_RCC_ClockConfig+0x208>)
 8004462:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004464:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <HAL_RCC_ClockConfig+0x20c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0018      	movs	r0, r3
 800446a:	f7fd fdf9 	bl	8002060 <HAL_InitTick>
 800446e:	0003      	movs	r3, r0
}
 8004470:	0018      	movs	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	b004      	add	sp, #16
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40022000 	.word	0x40022000
 800447c:	00001388 	.word	0x00001388
 8004480:	40021000 	.word	0x40021000
 8004484:	fffff0ff 	.word	0xfffff0ff
 8004488:	ffff8fff 	.word	0xffff8fff
 800448c:	08006b18 	.word	0x08006b18
 8004490:	20000000 	.word	0x20000000
 8004494:	20000004 	.word	0x20000004

08004498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800449e:	4b3c      	ldr	r3, [pc, #240]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2238      	movs	r2, #56	@ 0x38
 80044a4:	4013      	ands	r3, r2
 80044a6:	d10f      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80044a8:	4b39      	ldr	r3, [pc, #228]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	0adb      	lsrs	r3, r3, #11
 80044ae:	2207      	movs	r2, #7
 80044b0:	4013      	ands	r3, r2
 80044b2:	2201      	movs	r2, #1
 80044b4:	409a      	lsls	r2, r3
 80044b6:	0013      	movs	r3, r2
 80044b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	4835      	ldr	r0, [pc, #212]	@ (8004594 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044be:	f7fb fe29 	bl	8000114 <__udivsi3>
 80044c2:	0003      	movs	r3, r0
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	e05d      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c8:	4b31      	ldr	r3, [pc, #196]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2238      	movs	r2, #56	@ 0x38
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d102      	bne.n	80044da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044d4:	4b30      	ldr	r3, [pc, #192]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x100>)
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e054      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044da:	4b2d      	ldr	r3, [pc, #180]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2238      	movs	r2, #56	@ 0x38
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d138      	bne.n	8004558 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80044e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2203      	movs	r2, #3
 80044ec:	4013      	ands	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f0:	4b27      	ldr	r3, [pc, #156]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	2207      	movs	r2, #7
 80044f8:	4013      	ands	r3, r2
 80044fa:	3301      	adds	r3, #1
 80044fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d10d      	bne.n	8004520 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	4824      	ldr	r0, [pc, #144]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x100>)
 8004508:	f7fb fe04 	bl	8000114 <__udivsi3>
 800450c:	0003      	movs	r3, r0
 800450e:	0019      	movs	r1, r3
 8004510:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	227f      	movs	r2, #127	@ 0x7f
 8004518:	4013      	ands	r3, r2
 800451a:	434b      	muls	r3, r1
 800451c:	617b      	str	r3, [r7, #20]
        break;
 800451e:	e00d      	b.n	800453c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	481c      	ldr	r0, [pc, #112]	@ (8004594 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004524:	f7fb fdf6 	bl	8000114 <__udivsi3>
 8004528:	0003      	movs	r3, r0
 800452a:	0019      	movs	r1, r3
 800452c:	4b18      	ldr	r3, [pc, #96]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	227f      	movs	r2, #127	@ 0x7f
 8004534:	4013      	ands	r3, r2
 8004536:	434b      	muls	r3, r1
 8004538:	617b      	str	r3, [r7, #20]
        break;
 800453a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800453c:	4b14      	ldr	r3, [pc, #80]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	0f5b      	lsrs	r3, r3, #29
 8004542:	2207      	movs	r2, #7
 8004544:	4013      	ands	r3, r2
 8004546:	3301      	adds	r3, #1
 8004548:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	6978      	ldr	r0, [r7, #20]
 800454e:	f7fb fde1 	bl	8000114 <__udivsi3>
 8004552:	0003      	movs	r3, r0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	e015      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004558:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2238      	movs	r2, #56	@ 0x38
 800455e:	4013      	ands	r3, r2
 8004560:	2b20      	cmp	r3, #32
 8004562:	d103      	bne.n	800456c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004564:	2380      	movs	r3, #128	@ 0x80
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800456c:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xf8>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2238      	movs	r2, #56	@ 0x38
 8004572:	4013      	ands	r3, r2
 8004574:	2b18      	cmp	r3, #24
 8004576:	d103      	bne.n	8004580 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004578:	23fa      	movs	r3, #250	@ 0xfa
 800457a:	01db      	lsls	r3, r3, #7
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	e001      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004584:	693b      	ldr	r3, [r7, #16]
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b006      	add	sp, #24
 800458c:	bd80      	pop	{r7, pc}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	40021000 	.word	0x40021000
 8004594:	00f42400 	.word	0x00f42400
 8004598:	007a1200 	.word	0x007a1200

0800459c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a0:	4b02      	ldr	r3, [pc, #8]	@ (80045ac <HAL_RCC_GetHCLKFreq+0x10>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	20000000 	.word	0x20000000

080045b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b0:	b5b0      	push	{r4, r5, r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80045b4:	f7ff fff2 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045b8:	0004      	movs	r4, r0
 80045ba:	f7ff fb49 	bl	8003c50 <LL_RCC_GetAPB1Prescaler>
 80045be:	0003      	movs	r3, r0
 80045c0:	0b1a      	lsrs	r2, r3, #12
 80045c2:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045c4:	0092      	lsls	r2, r2, #2
 80045c6:	58d3      	ldr	r3, [r2, r3]
 80045c8:	221f      	movs	r2, #31
 80045ca:	4013      	ands	r3, r2
 80045cc:	40dc      	lsrs	r4, r3
 80045ce:	0023      	movs	r3, r4
}
 80045d0:	0018      	movs	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bdb0      	pop	{r4, r5, r7, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	08006b58 	.word	0x08006b58

080045dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80045e4:	2313      	movs	r3, #19
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045ec:	2312      	movs	r3, #18
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2380      	movs	r3, #128	@ 0x80
 80045fa:	029b      	lsls	r3, r3, #10
 80045fc:	4013      	ands	r3, r2
 80045fe:	d100      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004600:	e0a3      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004602:	2011      	movs	r0, #17
 8004604:	183b      	adds	r3, r7, r0
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460a:	4b7f      	ldr	r3, [pc, #508]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800460c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800460e:	2380      	movs	r3, #128	@ 0x80
 8004610:	055b      	lsls	r3, r3, #21
 8004612:	4013      	ands	r3, r2
 8004614:	d110      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004616:	4b7c      	ldr	r3, [pc, #496]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004618:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800461a:	4b7b      	ldr	r3, [pc, #492]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800461c:	2180      	movs	r1, #128	@ 0x80
 800461e:	0549      	lsls	r1, r1, #21
 8004620:	430a      	orrs	r2, r1
 8004622:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004624:	4b78      	ldr	r3, [pc, #480]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004628:	2380      	movs	r3, #128	@ 0x80
 800462a:	055b      	lsls	r3, r3, #21
 800462c:	4013      	ands	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004632:	183b      	adds	r3, r7, r0
 8004634:	2201      	movs	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004638:	4b74      	ldr	r3, [pc, #464]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b73      	ldr	r3, [pc, #460]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800463e:	2180      	movs	r1, #128	@ 0x80
 8004640:	0049      	lsls	r1, r1, #1
 8004642:	430a      	orrs	r2, r1
 8004644:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004646:	f7fd fd67 	bl	8002118 <HAL_GetTick>
 800464a:	0003      	movs	r3, r0
 800464c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800464e:	e00b      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004650:	f7fd fd62 	bl	8002118 <HAL_GetTick>
 8004654:	0002      	movs	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d904      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800465e:	2313      	movs	r3, #19
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	2203      	movs	r2, #3
 8004664:	701a      	strb	r2, [r3, #0]
        break;
 8004666:	e005      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004668:	4b68      	ldr	r3, [pc, #416]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	@ 0x80
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4013      	ands	r3, r2
 8004672:	d0ed      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004674:	2313      	movs	r3, #19
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d154      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800467e:	4b62      	ldr	r3, [pc, #392]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004680:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004682:	23c0      	movs	r3, #192	@ 0xc0
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4013      	ands	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d019      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	429a      	cmp	r2, r3
 8004698:	d014      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800469a:	4b5b      	ldr	r3, [pc, #364]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800469c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469e:	4a5c      	ldr	r2, [pc, #368]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046a4:	4b58      	ldr	r3, [pc, #352]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046a8:	4b57      	ldr	r3, [pc, #348]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046aa:	2180      	movs	r1, #128	@ 0x80
 80046ac:	0249      	lsls	r1, r1, #9
 80046ae:	430a      	orrs	r2, r1
 80046b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046b2:	4b55      	ldr	r3, [pc, #340]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046b6:	4b54      	ldr	r3, [pc, #336]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046b8:	4956      	ldr	r1, [pc, #344]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80046ba:	400a      	ands	r2, r1
 80046bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046be:	4b52      	ldr	r3, [pc, #328]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2201      	movs	r2, #1
 80046c8:	4013      	ands	r3, r2
 80046ca:	d016      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd fd24 	bl	8002118 <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d4:	e00c      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fd fd1f 	bl	8002118 <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d904      	bls.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80046e6:	2313      	movs	r3, #19
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	2203      	movs	r2, #3
 80046ec:	701a      	strb	r2, [r3, #0]
            break;
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f0:	4b45      	ldr	r3, [pc, #276]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f4:	2202      	movs	r2, #2
 80046f6:	4013      	ands	r3, r2
 80046f8:	d0ed      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80046fa:	2313      	movs	r3, #19
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004704:	4b40      	ldr	r3, [pc, #256]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004708:	4a41      	ldr	r2, [pc, #260]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800470a:	4013      	ands	r3, r2
 800470c:	0019      	movs	r1, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	4b3d      	ldr	r3, [pc, #244]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004714:	430a      	orrs	r2, r1
 8004716:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004718:	e00c      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800471a:	2312      	movs	r3, #18
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	2213      	movs	r2, #19
 8004720:	18ba      	adds	r2, r7, r2
 8004722:	7812      	ldrb	r2, [r2, #0]
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e005      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	2312      	movs	r3, #18
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	2213      	movs	r2, #19
 800472e:	18ba      	adds	r2, r7, r2
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004734:	2311      	movs	r3, #17
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d105      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800473e:	4b32      	ldr	r3, [pc, #200]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004742:	4b31      	ldr	r3, [pc, #196]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004744:	4935      	ldr	r1, [pc, #212]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004746:	400a      	ands	r2, r1
 8004748:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2201      	movs	r2, #1
 8004750:	4013      	ands	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004754:	4b2c      	ldr	r3, [pc, #176]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004758:	2203      	movs	r2, #3
 800475a:	4393      	bics	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004764:	430a      	orrs	r2, r1
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2220      	movs	r2, #32
 800476e:	4013      	ands	r3, r2
 8004770:	d009      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004772:	4b25      	ldr	r3, [pc, #148]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	4a2a      	ldr	r2, [pc, #168]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004778:	4013      	ands	r3, r2
 800477a:	0019      	movs	r1, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	4b21      	ldr	r3, [pc, #132]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004782:	430a      	orrs	r2, r1
 8004784:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	2380      	movs	r3, #128	@ 0x80
 800478c:	01db      	lsls	r3, r3, #7
 800478e:	4013      	ands	r3, r2
 8004790:	d015      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004792:	4b1d      	ldr	r3, [pc, #116]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	0899      	lsrs	r1, r3, #2
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047a0:	430a      	orrs	r2, r1
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	2380      	movs	r3, #128	@ 0x80
 80047aa:	05db      	lsls	r3, r3, #23
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d106      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047b0:	4b15      	ldr	r3, [pc, #84]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	4b14      	ldr	r3, [pc, #80]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	0249      	lsls	r1, r1, #9
 80047ba:	430a      	orrs	r2, r1
 80047bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	4013      	ands	r3, r2
 80047c8:	d016      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80047ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ce:	4a15      	ldr	r2, [pc, #84]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	0019      	movs	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047da:	430a      	orrs	r2, r1
 80047dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	2380      	movs	r3, #128	@ 0x80
 80047e4:	01db      	lsls	r3, r3, #7
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d106      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047ea:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047f0:	2180      	movs	r1, #128	@ 0x80
 80047f2:	0249      	lsls	r1, r1, #9
 80047f4:	430a      	orrs	r2, r1
 80047f6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80047f8:	2312      	movs	r3, #18
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	781b      	ldrb	r3, [r3, #0]
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b006      	add	sp, #24
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	40021000 	.word	0x40021000
 800480c:	40007000 	.word	0x40007000
 8004810:	fffffcff 	.word	0xfffffcff
 8004814:	fffeffff 	.word	0xfffeffff
 8004818:	00001388 	.word	0x00001388
 800481c:	efffffff 	.word	0xefffffff
 8004820:	ffffcfff 	.word	0xffffcfff
 8004824:	ffff3fff 	.word	0xffff3fff

08004828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e046      	b.n	80048c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2288      	movs	r2, #136	@ 0x88
 800483e:	589b      	ldr	r3, [r3, r2]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2284      	movs	r2, #132	@ 0x84
 8004848:	2100      	movs	r1, #0
 800484a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0018      	movs	r0, r3
 8004850:	f7fd fa0a 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2288      	movs	r2, #136	@ 0x88
 8004858:	2124      	movs	r1, #36	@ 0x24
 800485a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2101      	movs	r1, #1
 8004868:	438a      	bics	r2, r1
 800486a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	0018      	movs	r0, r3
 8004878:	f000 faa4 	bl	8004dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	0018      	movs	r0, r3
 8004880:	f000 f936 	bl	8004af0 <UART_SetConfig>
 8004884:	0003      	movs	r3, r0
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e01c      	b.n	80048c8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	490d      	ldr	r1, [pc, #52]	@ (80048d0 <HAL_UART_Init+0xa8>)
 800489a:	400a      	ands	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	212a      	movs	r1, #42	@ 0x2a
 80048aa:	438a      	bics	r2, r1
 80048ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2101      	movs	r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 fb33 	bl	8004f2c <UART_CheckIdleState>
 80048c6:	0003      	movs	r3, r0
}
 80048c8:	0018      	movs	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b002      	add	sp, #8
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	ffffb7ff 	.word	0xffffb7ff

080048d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	@ 0x28
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	1dbb      	adds	r3, r7, #6
 80048e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2288      	movs	r2, #136	@ 0x88
 80048e8:	589b      	ldr	r3, [r3, r2]
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d000      	beq.n	80048f0 <HAL_UART_Transmit+0x1c>
 80048ee:	e090      	b.n	8004a12 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_UART_Transmit+0x2a>
 80048f6:	1dbb      	adds	r3, r7, #6
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e088      	b.n	8004a14 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	2380      	movs	r3, #128	@ 0x80
 8004908:	015b      	lsls	r3, r3, #5
 800490a:	429a      	cmp	r2, r3
 800490c:	d109      	bne.n	8004922 <HAL_UART_Transmit+0x4e>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d105      	bne.n	8004922 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2201      	movs	r2, #1
 800491a:	4013      	ands	r3, r2
 800491c:	d001      	beq.n	8004922 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e078      	b.n	8004a14 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2290      	movs	r2, #144	@ 0x90
 8004926:	2100      	movs	r1, #0
 8004928:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2288      	movs	r2, #136	@ 0x88
 800492e:	2121      	movs	r1, #33	@ 0x21
 8004930:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004932:	f7fd fbf1 	bl	8002118 <HAL_GetTick>
 8004936:	0003      	movs	r3, r0
 8004938:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1dba      	adds	r2, r7, #6
 800493e:	2154      	movs	r1, #84	@ 0x54
 8004940:	8812      	ldrh	r2, [r2, #0]
 8004942:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1dba      	adds	r2, r7, #6
 8004948:	2156      	movs	r1, #86	@ 0x56
 800494a:	8812      	ldrh	r2, [r2, #0]
 800494c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	015b      	lsls	r3, r3, #5
 8004956:	429a      	cmp	r2, r3
 8004958:	d108      	bne.n	800496c <HAL_UART_Transmit+0x98>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d104      	bne.n	800496c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	e003      	b.n	8004974 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004974:	e030      	b.n	80049d8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	0013      	movs	r3, r2
 8004980:	2200      	movs	r2, #0
 8004982:	2180      	movs	r1, #128	@ 0x80
 8004984:	f000 fb7c 	bl	8005080 <UART_WaitOnFlagUntilTimeout>
 8004988:	1e03      	subs	r3, r0, #0
 800498a:	d005      	beq.n	8004998 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2288      	movs	r2, #136	@ 0x88
 8004990:	2120      	movs	r1, #32
 8004992:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e03d      	b.n	8004a14 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	001a      	movs	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	05d2      	lsls	r2, r2, #23
 80049aa:	0dd2      	lsrs	r2, r2, #23
 80049ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	3302      	adds	r3, #2
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	e007      	b.n	80049c6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	3301      	adds	r3, #1
 80049c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2256      	movs	r2, #86	@ 0x56
 80049ca:	5a9b      	ldrh	r3, [r3, r2]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b299      	uxth	r1, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2256      	movs	r2, #86	@ 0x56
 80049d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2256      	movs	r2, #86	@ 0x56
 80049dc:	5a9b      	ldrh	r3, [r3, r2]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1c8      	bne.n	8004976 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	0013      	movs	r3, r2
 80049ee:	2200      	movs	r2, #0
 80049f0:	2140      	movs	r1, #64	@ 0x40
 80049f2:	f000 fb45 	bl	8005080 <UART_WaitOnFlagUntilTimeout>
 80049f6:	1e03      	subs	r3, r0, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2288      	movs	r2, #136	@ 0x88
 80049fe:	2120      	movs	r1, #32
 8004a00:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e006      	b.n	8004a14 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2288      	movs	r2, #136	@ 0x88
 8004a0a:	2120      	movs	r1, #32
 8004a0c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e000      	b.n	8004a14 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
  }
}
 8004a14:	0018      	movs	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b008      	add	sp, #32
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	1dbb      	adds	r3, r7, #6
 8004a28:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	228c      	movs	r2, #140	@ 0x8c
 8004a2e:	589b      	ldr	r3, [r3, r2]
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d145      	bne.n	8004ac0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_UART_Receive_IT+0x26>
 8004a3a:	1dbb      	adds	r3, r7, #6
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e03d      	b.n	8004ac2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	015b      	lsls	r3, r3, #5
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d109      	bne.n	8004a66 <HAL_UART_Receive_IT+0x4a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d105      	bne.n	8004a66 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d001      	beq.n	8004a66 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e02d      	b.n	8004ac2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	2380      	movs	r3, #128	@ 0x80
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	4013      	ands	r3, r2
 8004a78:	d019      	beq.n	8004aae <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7e:	613b      	str	r3, [r7, #16]
  return(result);
 8004a80:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	2301      	movs	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f383 8810 	msr	PRIMASK, r3
}
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2180      	movs	r1, #128	@ 0x80
 8004a9c:	04c9      	lsls	r1, r1, #19
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f383 8810 	msr	PRIMASK, r3
}
 8004aac:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004aae:	1dbb      	adds	r3, r7, #6
 8004ab0:	881a      	ldrh	r2, [r3, #0]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f000 fb52 	bl	8005160 <UART_Start_Receive_IT>
 8004abc:	0003      	movs	r3, r0
 8004abe:	e000      	b.n	8004ac2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b008      	add	sp, #32
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b002      	add	sp, #8
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	000a      	movs	r2, r1
 8004ae4:	1cbb      	adds	r3, r7, #2
 8004ae6:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ae8:	46c0      	nop			@ (mov r8, r8)
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b002      	add	sp, #8
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004af8:	231a      	movs	r3, #26
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4aa1      	ldr	r2, [pc, #644]	@ (8004da4 <UART_SetConfig+0x2b4>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	0019      	movs	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4a9c      	ldr	r2, [pc, #624]	@ (8004da8 <UART_SetConfig+0x2b8>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a93      	ldr	r2, [pc, #588]	@ (8004dac <UART_SetConfig+0x2bc>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b72:	220f      	movs	r2, #15
 8004b74:	4393      	bics	r3, r2
 8004b76:	0019      	movs	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a89      	ldr	r2, [pc, #548]	@ (8004db0 <UART_SetConfig+0x2c0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d127      	bne.n	8004bde <UART_SetConfig+0xee>
 8004b8e:	4b89      	ldr	r3, [pc, #548]	@ (8004db4 <UART_SetConfig+0x2c4>)
 8004b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b92:	2203      	movs	r2, #3
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d017      	beq.n	8004bca <UART_SetConfig+0xda>
 8004b9a:	d81b      	bhi.n	8004bd4 <UART_SetConfig+0xe4>
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d00a      	beq.n	8004bb6 <UART_SetConfig+0xc6>
 8004ba0:	d818      	bhi.n	8004bd4 <UART_SetConfig+0xe4>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <UART_SetConfig+0xbc>
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d00a      	beq.n	8004bc0 <UART_SetConfig+0xd0>
 8004baa:	e013      	b.n	8004bd4 <UART_SetConfig+0xe4>
 8004bac:	231b      	movs	r3, #27
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e021      	b.n	8004bfa <UART_SetConfig+0x10a>
 8004bb6:	231b      	movs	r3, #27
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	2202      	movs	r2, #2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	e01c      	b.n	8004bfa <UART_SetConfig+0x10a>
 8004bc0:	231b      	movs	r3, #27
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e017      	b.n	8004bfa <UART_SetConfig+0x10a>
 8004bca:	231b      	movs	r3, #27
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	2208      	movs	r2, #8
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e012      	b.n	8004bfa <UART_SetConfig+0x10a>
 8004bd4:	231b      	movs	r3, #27
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	2210      	movs	r2, #16
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e00d      	b.n	8004bfa <UART_SetConfig+0x10a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a75      	ldr	r2, [pc, #468]	@ (8004db8 <UART_SetConfig+0x2c8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d104      	bne.n	8004bf2 <UART_SetConfig+0x102>
 8004be8:	231b      	movs	r3, #27
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e003      	b.n	8004bfa <UART_SetConfig+0x10a>
 8004bf2:	231b      	movs	r3, #27
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d000      	beq.n	8004c08 <UART_SetConfig+0x118>
 8004c06:	e065      	b.n	8004cd4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004c08:	231b      	movs	r3, #27
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d015      	beq.n	8004c3e <UART_SetConfig+0x14e>
 8004c12:	dc18      	bgt.n	8004c46 <UART_SetConfig+0x156>
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d00d      	beq.n	8004c34 <UART_SetConfig+0x144>
 8004c18:	dc15      	bgt.n	8004c46 <UART_SetConfig+0x156>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <UART_SetConfig+0x134>
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d005      	beq.n	8004c2e <UART_SetConfig+0x13e>
 8004c22:	e010      	b.n	8004c46 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7ff fcc4 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	617b      	str	r3, [r7, #20]
        break;
 8004c2c:	e012      	b.n	8004c54 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c2e:	4b63      	ldr	r3, [pc, #396]	@ (8004dbc <UART_SetConfig+0x2cc>)
 8004c30:	617b      	str	r3, [r7, #20]
        break;
 8004c32:	e00f      	b.n	8004c54 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c34:	f7ff fc30 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	617b      	str	r3, [r7, #20]
        break;
 8004c3c:	e00a      	b.n	8004c54 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	2380      	movs	r3, #128	@ 0x80
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	617b      	str	r3, [r7, #20]
        break;
 8004c44:	e006      	b.n	8004c54 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c4a:	231a      	movs	r3, #26
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
        break;
 8004c52:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d100      	bne.n	8004c5c <UART_SetConfig+0x16c>
 8004c5a:	e08d      	b.n	8004d78 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c60:	4b57      	ldr	r3, [pc, #348]	@ (8004dc0 <UART_SetConfig+0x2d0>)
 8004c62:	0052      	lsls	r2, r2, #1
 8004c64:	5ad3      	ldrh	r3, [r2, r3]
 8004c66:	0019      	movs	r1, r3
 8004c68:	6978      	ldr	r0, [r7, #20]
 8004c6a:	f7fb fa53 	bl	8000114 <__udivsi3>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	005a      	lsls	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	18d2      	adds	r2, r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	0019      	movs	r1, r3
 8004c80:	0010      	movs	r0, r2
 8004c82:	f7fb fa47 	bl	8000114 <__udivsi3>
 8004c86:	0003      	movs	r3, r0
 8004c88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b0f      	cmp	r3, #15
 8004c8e:	d91c      	bls.n	8004cca <UART_SetConfig+0x1da>
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	2380      	movs	r3, #128	@ 0x80
 8004c94:	025b      	lsls	r3, r3, #9
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d217      	bcs.n	8004cca <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	200e      	movs	r0, #14
 8004ca0:	183b      	adds	r3, r7, r0
 8004ca2:	210f      	movs	r1, #15
 8004ca4:	438a      	bics	r2, r1
 8004ca6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2207      	movs	r2, #7
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b299      	uxth	r1, r3
 8004cb4:	183b      	adds	r3, r7, r0
 8004cb6:	183a      	adds	r2, r7, r0
 8004cb8:	8812      	ldrh	r2, [r2, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	183a      	adds	r2, r7, r0
 8004cc4:	8812      	ldrh	r2, [r2, #0]
 8004cc6:	60da      	str	r2, [r3, #12]
 8004cc8:	e056      	b.n	8004d78 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004cca:	231a      	movs	r3, #26
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e051      	b.n	8004d78 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cd4:	231b      	movs	r3, #27
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d015      	beq.n	8004d0a <UART_SetConfig+0x21a>
 8004cde:	dc18      	bgt.n	8004d12 <UART_SetConfig+0x222>
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d00d      	beq.n	8004d00 <UART_SetConfig+0x210>
 8004ce4:	dc15      	bgt.n	8004d12 <UART_SetConfig+0x222>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <UART_SetConfig+0x200>
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d005      	beq.n	8004cfa <UART_SetConfig+0x20a>
 8004cee:	e010      	b.n	8004d12 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7ff fc5e 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	617b      	str	r3, [r7, #20]
        break;
 8004cf8:	e012      	b.n	8004d20 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cfa:	4b30      	ldr	r3, [pc, #192]	@ (8004dbc <UART_SetConfig+0x2cc>)
 8004cfc:	617b      	str	r3, [r7, #20]
        break;
 8004cfe:	e00f      	b.n	8004d20 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d00:	f7ff fbca 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8004d04:	0003      	movs	r3, r0
 8004d06:	617b      	str	r3, [r7, #20]
        break;
 8004d08:	e00a      	b.n	8004d20 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0a:	2380      	movs	r3, #128	@ 0x80
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	617b      	str	r3, [r7, #20]
        break;
 8004d10:	e006      	b.n	8004d20 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d16:	231a      	movs	r3, #26
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
        break;
 8004d1e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d028      	beq.n	8004d78 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d2a:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <UART_SetConfig+0x2d0>)
 8004d2c:	0052      	lsls	r2, r2, #1
 8004d2e:	5ad3      	ldrh	r3, [r2, r3]
 8004d30:	0019      	movs	r1, r3
 8004d32:	6978      	ldr	r0, [r7, #20]
 8004d34:	f7fb f9ee 	bl	8000114 <__udivsi3>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	001a      	movs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	18d2      	adds	r2, r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	0019      	movs	r1, r3
 8004d4a:	0010      	movs	r0, r2
 8004d4c:	f7fb f9e2 	bl	8000114 <__udivsi3>
 8004d50:	0003      	movs	r3, r0
 8004d52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	d90a      	bls.n	8004d70 <UART_SetConfig+0x280>
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	2380      	movs	r3, #128	@ 0x80
 8004d5e:	025b      	lsls	r3, r3, #9
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d205      	bcs.n	8004d70 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	e003      	b.n	8004d78 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004d70:	231a      	movs	r3, #26
 8004d72:	18fb      	adds	r3, r7, r3
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	226a      	movs	r2, #106	@ 0x6a
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2268      	movs	r2, #104	@ 0x68
 8004d84:	2101      	movs	r1, #1
 8004d86:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d94:	231a      	movs	r3, #26
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	781b      	ldrb	r3, [r3, #0]
}
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b008      	add	sp, #32
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	cfff69f3 	.word	0xcfff69f3
 8004da8:	ffffcfff 	.word	0xffffcfff
 8004dac:	11fff4ff 	.word	0x11fff4ff
 8004db0:	40013800 	.word	0x40013800
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40004400 	.word	0x40004400
 8004dbc:	00f42400 	.word	0x00f42400
 8004dc0:	08006b78 	.word	0x08006b78

08004dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8004f08 <UART_AdvFeatureConfig+0x144>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	0019      	movs	r1, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df2:	2201      	movs	r2, #1
 8004df4:	4013      	ands	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4a43      	ldr	r2, [pc, #268]	@ (8004f0c <UART_AdvFeatureConfig+0x148>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	2202      	movs	r2, #2
 8004e16:	4013      	ands	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a3b      	ldr	r2, [pc, #236]	@ (8004f10 <UART_AdvFeatureConfig+0x14c>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	0019      	movs	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	2204      	movs	r2, #4
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4a34      	ldr	r2, [pc, #208]	@ (8004f14 <UART_AdvFeatureConfig+0x150>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	2210      	movs	r2, #16
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4a2c      	ldr	r2, [pc, #176]	@ (8004f18 <UART_AdvFeatureConfig+0x154>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4a25      	ldr	r2, [pc, #148]	@ (8004f1c <UART_AdvFeatureConfig+0x158>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	2240      	movs	r2, #64	@ 0x40
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f20 <UART_AdvFeatureConfig+0x15c>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ebe:	2380      	movs	r3, #128	@ 0x80
 8004ec0:	035b      	lsls	r3, r3, #13
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d10b      	bne.n	8004ede <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <UART_AdvFeatureConfig+0x160>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	2280      	movs	r2, #128	@ 0x80
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4a0e      	ldr	r2, [pc, #56]	@ (8004f28 <UART_AdvFeatureConfig+0x164>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }
}
 8004f00:	46c0      	nop			@ (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b002      	add	sp, #8
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	ffff7fff 	.word	0xffff7fff
 8004f0c:	fffdffff 	.word	0xfffdffff
 8004f10:	fffeffff 	.word	0xfffeffff
 8004f14:	fffbffff 	.word	0xfffbffff
 8004f18:	ffffefff 	.word	0xffffefff
 8004f1c:	ffffdfff 	.word	0xffffdfff
 8004f20:	ffefffff 	.word	0xffefffff
 8004f24:	ff9fffff 	.word	0xff9fffff
 8004f28:	fff7ffff 	.word	0xfff7ffff

08004f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b092      	sub	sp, #72	@ 0x48
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2290      	movs	r2, #144	@ 0x90
 8004f38:	2100      	movs	r1, #0
 8004f3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f3c:	f7fd f8ec 	bl	8002118 <HAL_GetTick>
 8004f40:	0003      	movs	r3, r0
 8004f42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d12d      	bne.n	8004fae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f54:	2280      	movs	r2, #128	@ 0x80
 8004f56:	0391      	lsls	r1, r2, #14
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4a47      	ldr	r2, [pc, #284]	@ (8005078 <UART_CheckIdleState+0x14c>)
 8004f5c:	9200      	str	r2, [sp, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f000 f88e 	bl	8005080 <UART_WaitOnFlagUntilTimeout>
 8004f64:	1e03      	subs	r3, r0, #0
 8004f66:	d022      	beq.n	8004fae <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f68:	f3ef 8310 	mrs	r3, PRIMASK
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f72:	2301      	movs	r3, #1
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	f383 8810 	msr	PRIMASK, r3
}
 8004f7c:	46c0      	nop			@ (mov r8, r8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2180      	movs	r1, #128	@ 0x80
 8004f8a:	438a      	bics	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f94:	f383 8810 	msr	PRIMASK, r3
}
 8004f98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2288      	movs	r2, #136	@ 0x88
 8004f9e:	2120      	movs	r1, #32
 8004fa0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2284      	movs	r2, #132	@ 0x84
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e060      	b.n	8005070 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d146      	bne.n	800504a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbe:	2280      	movs	r2, #128	@ 0x80
 8004fc0:	03d1      	lsls	r1, r2, #15
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005078 <UART_CheckIdleState+0x14c>)
 8004fc6:	9200      	str	r2, [sp, #0]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f000 f859 	bl	8005080 <UART_WaitOnFlagUntilTimeout>
 8004fce:	1e03      	subs	r3, r0, #0
 8004fd0:	d03b      	beq.n	800504a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fdc:	2301      	movs	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4922      	ldr	r1, [pc, #136]	@ (800507c <UART_CheckIdleState+0x150>)
 8004ff4:	400a      	ands	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f383 8810 	msr	PRIMASK, r3
}
 8005002:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005004:	f3ef 8310 	mrs	r3, PRIMASK
 8005008:	61bb      	str	r3, [r7, #24]
  return(result);
 800500a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500c:	633b      	str	r3, [r7, #48]	@ 0x30
 800500e:	2301      	movs	r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f383 8810 	msr	PRIMASK, r3
}
 8005018:	46c0      	nop			@ (mov r8, r8)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2101      	movs	r1, #1
 8005026:	438a      	bics	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f383 8810 	msr	PRIMASK, r3
}
 8005034:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	228c      	movs	r2, #140	@ 0x8c
 800503a:	2120      	movs	r1, #32
 800503c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2284      	movs	r2, #132	@ 0x84
 8005042:	2100      	movs	r1, #0
 8005044:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e012      	b.n	8005070 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2288      	movs	r2, #136	@ 0x88
 800504e:	2120      	movs	r1, #32
 8005050:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	228c      	movs	r2, #140	@ 0x8c
 8005056:	2120      	movs	r1, #32
 8005058:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2284      	movs	r2, #132	@ 0x84
 800506a:	2100      	movs	r1, #0
 800506c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	0018      	movs	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	b010      	add	sp, #64	@ 0x40
 8005076:	bd80      	pop	{r7, pc}
 8005078:	01ffffff 	.word	0x01ffffff
 800507c:	fffffedf 	.word	0xfffffedf

08005080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	1dfb      	adds	r3, r7, #7
 800508e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005090:	e051      	b.n	8005136 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3301      	adds	r3, #1
 8005096:	d04e      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005098:	f7fd f83e 	bl	8002118 <HAL_GetTick>
 800509c:	0002      	movs	r2, r0
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e051      	b.n	8005156 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2204      	movs	r2, #4
 80050ba:	4013      	ands	r3, r2
 80050bc:	d03b      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0xb6>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d038      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0xb6>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b40      	cmp	r3, #64	@ 0x40
 80050c8:	d035      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	2208      	movs	r2, #8
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d111      	bne.n	80050fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2208      	movs	r2, #8
 80050de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	0018      	movs	r0, r3
 80050e4:	f000 f960 	bl	80053a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2290      	movs	r2, #144	@ 0x90
 80050ec:	2108      	movs	r1, #8
 80050ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2284      	movs	r2, #132	@ 0x84
 80050f4:	2100      	movs	r1, #0
 80050f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e02c      	b.n	8005156 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	2380      	movs	r3, #128	@ 0x80
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	401a      	ands	r2, r3
 8005108:	2380      	movs	r3, #128	@ 0x80
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	429a      	cmp	r2, r3
 800510e:	d112      	bne.n	8005136 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2280      	movs	r2, #128	@ 0x80
 8005116:	0112      	lsls	r2, r2, #4
 8005118:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	0018      	movs	r0, r3
 800511e:	f000 f943 	bl	80053a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2290      	movs	r2, #144	@ 0x90
 8005126:	2120      	movs	r1, #32
 8005128:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2284      	movs	r2, #132	@ 0x84
 800512e:	2100      	movs	r1, #0
 8005130:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e00f      	b.n	8005156 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	425a      	negs	r2, r3
 8005146:	4153      	adcs	r3, r2
 8005148:	b2db      	uxtb	r3, r3
 800514a:	001a      	movs	r2, r3
 800514c:	1dfb      	adds	r3, r7, #7
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d09e      	beq.n	8005092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	0018      	movs	r0, r3
 8005158:	46bd      	mov	sp, r7
 800515a:	b004      	add	sp, #16
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b098      	sub	sp, #96	@ 0x60
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	1dbb      	adds	r3, r7, #6
 800516c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1dba      	adds	r2, r7, #6
 8005178:	215c      	movs	r1, #92	@ 0x5c
 800517a:	8812      	ldrh	r2, [r2, #0]
 800517c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1dba      	adds	r2, r7, #6
 8005182:	215e      	movs	r1, #94	@ 0x5e
 8005184:	8812      	ldrh	r2, [r2, #0]
 8005186:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	2380      	movs	r3, #128	@ 0x80
 8005194:	015b      	lsls	r3, r3, #5
 8005196:	429a      	cmp	r2, r3
 8005198:	d10d      	bne.n	80051b6 <UART_Start_Receive_IT+0x56>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <UART_Start_Receive_IT+0x4c>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2260      	movs	r2, #96	@ 0x60
 80051a6:	497b      	ldr	r1, [pc, #492]	@ (8005394 <UART_Start_Receive_IT+0x234>)
 80051a8:	5299      	strh	r1, [r3, r2]
 80051aa:	e02e      	b.n	800520a <UART_Start_Receive_IT+0xaa>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2260      	movs	r2, #96	@ 0x60
 80051b0:	21ff      	movs	r1, #255	@ 0xff
 80051b2:	5299      	strh	r1, [r3, r2]
 80051b4:	e029      	b.n	800520a <UART_Start_Receive_IT+0xaa>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10d      	bne.n	80051da <UART_Start_Receive_IT+0x7a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <UART_Start_Receive_IT+0x70>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2260      	movs	r2, #96	@ 0x60
 80051ca:	21ff      	movs	r1, #255	@ 0xff
 80051cc:	5299      	strh	r1, [r3, r2]
 80051ce:	e01c      	b.n	800520a <UART_Start_Receive_IT+0xaa>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2260      	movs	r2, #96	@ 0x60
 80051d4:	217f      	movs	r1, #127	@ 0x7f
 80051d6:	5299      	strh	r1, [r3, r2]
 80051d8:	e017      	b.n	800520a <UART_Start_Receive_IT+0xaa>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	2380      	movs	r3, #128	@ 0x80
 80051e0:	055b      	lsls	r3, r3, #21
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d10d      	bne.n	8005202 <UART_Start_Receive_IT+0xa2>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <UART_Start_Receive_IT+0x98>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2260      	movs	r2, #96	@ 0x60
 80051f2:	217f      	movs	r1, #127	@ 0x7f
 80051f4:	5299      	strh	r1, [r3, r2]
 80051f6:	e008      	b.n	800520a <UART_Start_Receive_IT+0xaa>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2260      	movs	r2, #96	@ 0x60
 80051fc:	213f      	movs	r1, #63	@ 0x3f
 80051fe:	5299      	strh	r1, [r3, r2]
 8005200:	e003      	b.n	800520a <UART_Start_Receive_IT+0xaa>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2260      	movs	r2, #96	@ 0x60
 8005206:	2100      	movs	r1, #0
 8005208:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2290      	movs	r2, #144	@ 0x90
 800520e:	2100      	movs	r1, #0
 8005210:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	228c      	movs	r2, #140	@ 0x8c
 8005216:	2122      	movs	r1, #34	@ 0x22
 8005218:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521a:	f3ef 8310 	mrs	r3, PRIMASK
 800521e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005224:	2301      	movs	r3, #1
 8005226:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522a:	f383 8810 	msr	PRIMASK, r3
}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2101      	movs	r1, #1
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005242:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005246:	f383 8810 	msr	PRIMASK, r3
}
 800524a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005250:	2380      	movs	r3, #128	@ 0x80
 8005252:	059b      	lsls	r3, r3, #22
 8005254:	429a      	cmp	r2, r3
 8005256:	d150      	bne.n	80052fa <UART_Start_Receive_IT+0x19a>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2268      	movs	r2, #104	@ 0x68
 800525c:	5a9b      	ldrh	r3, [r3, r2]
 800525e:	1dba      	adds	r2, r7, #6
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d349      	bcc.n	80052fa <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	2380      	movs	r3, #128	@ 0x80
 800526c:	015b      	lsls	r3, r3, #5
 800526e:	429a      	cmp	r2, r3
 8005270:	d107      	bne.n	8005282 <UART_Start_Receive_IT+0x122>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a46      	ldr	r2, [pc, #280]	@ (8005398 <UART_Start_Receive_IT+0x238>)
 800527e:	675a      	str	r2, [r3, #116]	@ 0x74
 8005280:	e002      	b.n	8005288 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4a45      	ldr	r2, [pc, #276]	@ (800539c <UART_Start_Receive_IT+0x23c>)
 8005286:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d019      	beq.n	80052c4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005290:	f3ef 8310 	mrs	r3, PRIMASK
 8005294:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8005296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800529a:	2301      	movs	r3, #1
 800529c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a0:	f383 8810 	msr	PRIMASK, r3
}
 80052a4:	46c0      	nop			@ (mov r8, r8)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2180      	movs	r1, #128	@ 0x80
 80052b2:	0049      	lsls	r1, r1, #1
 80052b4:	430a      	orrs	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052be:	f383 8810 	msr	PRIMASK, r3
}
 80052c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c4:	f3ef 8310 	mrs	r3, PRIMASK
 80052c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80052ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80052ce:	2301      	movs	r3, #1
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d4:	f383 8810 	msr	PRIMASK, r3
}
 80052d8:	46c0      	nop			@ (mov r8, r8)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2180      	movs	r1, #128	@ 0x80
 80052e6:	0549      	lsls	r1, r1, #21
 80052e8:	430a      	orrs	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	e047      	b.n	800538a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	2380      	movs	r3, #128	@ 0x80
 8005300:	015b      	lsls	r3, r3, #5
 8005302:	429a      	cmp	r2, r3
 8005304:	d107      	bne.n	8005316 <UART_Start_Receive_IT+0x1b6>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a23      	ldr	r2, [pc, #140]	@ (80053a0 <UART_Start_Receive_IT+0x240>)
 8005312:	675a      	str	r2, [r3, #116]	@ 0x74
 8005314:	e002      	b.n	800531c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <UART_Start_Receive_IT+0x244>)
 800531a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d019      	beq.n	8005358 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005324:	f3ef 8310 	mrs	r3, PRIMASK
 8005328:	61fb      	str	r3, [r7, #28]
  return(result);
 800532a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800532c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800532e:	2301      	movs	r3, #1
 8005330:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	f383 8810 	msr	PRIMASK, r3
}
 8005338:	46c0      	nop			@ (mov r8, r8)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2190      	movs	r1, #144	@ 0x90
 8005346:	0049      	lsls	r1, r1, #1
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	f383 8810 	msr	PRIMASK, r3
}
 8005356:	e018      	b.n	800538a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005358:	f3ef 8310 	mrs	r3, PRIMASK
 800535c:	613b      	str	r3, [r7, #16]
  return(result);
 800535e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005360:	653b      	str	r3, [r7, #80]	@ 0x50
 8005362:	2301      	movs	r3, #1
 8005364:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f383 8810 	msr	PRIMASK, r3
}
 800536c:	46c0      	nop			@ (mov r8, r8)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2120      	movs	r1, #32
 800537a:	430a      	orrs	r2, r1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f383 8810 	msr	PRIMASK, r3
}
 8005388:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b018      	add	sp, #96	@ 0x60
 8005392:	bd80      	pop	{r7, pc}
 8005394:	000001ff 	.word	0x000001ff
 8005398:	08005b15 	.word	0x08005b15
 800539c:	080057e5 	.word	0x080057e5
 80053a0:	0800562d 	.word	0x0800562d
 80053a4:	08005475 	.word	0x08005475

080053a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08e      	sub	sp, #56	@ 0x38
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b0:	f3ef 8310 	mrs	r3, PRIMASK
 80053b4:	617b      	str	r3, [r7, #20]
  return(result);
 80053b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ba:	2301      	movs	r3, #1
 80053bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f383 8810 	msr	PRIMASK, r3
}
 80053c4:	46c0      	nop			@ (mov r8, r8)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4926      	ldr	r1, [pc, #152]	@ (800546c <UART_EndRxTransfer+0xc4>)
 80053d2:	400a      	ands	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f383 8810 	msr	PRIMASK, r3
}
 80053e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e2:	f3ef 8310 	mrs	r3, PRIMASK
 80053e6:	623b      	str	r3, [r7, #32]
  return(result);
 80053e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ec:	2301      	movs	r3, #1
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	f383 8810 	msr	PRIMASK, r3
}
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	491b      	ldr	r1, [pc, #108]	@ (8005470 <UART_EndRxTransfer+0xc8>)
 8005404:	400a      	ands	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	f383 8810 	msr	PRIMASK, r3
}
 8005412:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005418:	2b01      	cmp	r3, #1
 800541a:	d118      	bne.n	800544e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541c:	f3ef 8310 	mrs	r3, PRIMASK
 8005420:	60bb      	str	r3, [r7, #8]
  return(result);
 8005422:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005426:	2301      	movs	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f383 8810 	msr	PRIMASK, r3
}
 8005430:	46c0      	nop			@ (mov r8, r8)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2110      	movs	r1, #16
 800543e:	438a      	bics	r2, r1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005444:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f383 8810 	msr	PRIMASK, r3
}
 800544c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	228c      	movs	r2, #140	@ 0x8c
 8005452:	2120      	movs	r1, #32
 8005454:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	b00e      	add	sp, #56	@ 0x38
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	fffffedf 	.word	0xfffffedf
 8005470:	effffffe 	.word	0xeffffffe

08005474 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b094      	sub	sp, #80	@ 0x50
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800547c:	204e      	movs	r0, #78	@ 0x4e
 800547e:	183b      	adds	r3, r7, r0
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	2160      	movs	r1, #96	@ 0x60
 8005484:	5a52      	ldrh	r2, [r2, r1]
 8005486:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	228c      	movs	r2, #140	@ 0x8c
 800548c:	589b      	ldr	r3, [r3, r2]
 800548e:	2b22      	cmp	r3, #34	@ 0x22
 8005490:	d000      	beq.n	8005494 <UART_RxISR_8BIT+0x20>
 8005492:	e0ba      	b.n	800560a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800549a:	214c      	movs	r1, #76	@ 0x4c
 800549c:	187b      	adds	r3, r7, r1
 800549e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	183b      	adds	r3, r7, r0
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b2d9      	uxtb	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b0:	400a      	ands	r2, r1
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	225e      	movs	r2, #94	@ 0x5e
 80054c4:	5a9b      	ldrh	r3, [r3, r2]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b299      	uxth	r1, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	225e      	movs	r2, #94	@ 0x5e
 80054d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	225e      	movs	r2, #94	@ 0x5e
 80054d6:	5a9b      	ldrh	r3, [r3, r2]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d000      	beq.n	80054e0 <UART_RxISR_8BIT+0x6c>
 80054de:	e09c      	b.n	800561a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e0:	f3ef 8310 	mrs	r3, PRIMASK
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ea:	2301      	movs	r3, #1
 80054ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	f383 8810 	msr	PRIMASK, r3
}
 80054f4:	46c0      	nop			@ (mov r8, r8)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4948      	ldr	r1, [pc, #288]	@ (8005624 <UART_RxISR_8BIT+0x1b0>)
 8005502:	400a      	ands	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550c:	f383 8810 	msr	PRIMASK, r3
}
 8005510:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005512:	f3ef 8310 	mrs	r3, PRIMASK
 8005516:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551a:	647b      	str	r3, [r7, #68]	@ 0x44
 800551c:	2301      	movs	r3, #1
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005522:	f383 8810 	msr	PRIMASK, r3
}
 8005526:	46c0      	nop			@ (mov r8, r8)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2101      	movs	r1, #1
 8005534:	438a      	bics	r2, r1
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553e:	f383 8810 	msr	PRIMASK, r3
}
 8005542:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	228c      	movs	r2, #140	@ 0x8c
 8005548:	2120      	movs	r1, #32
 800554a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	2380      	movs	r3, #128	@ 0x80
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	4013      	ands	r3, r2
 8005564:	d018      	beq.n	8005598 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005566:	f3ef 8310 	mrs	r3, PRIMASK
 800556a:	61bb      	str	r3, [r7, #24]
  return(result);
 800556c:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800556e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005570:	2301      	movs	r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f383 8810 	msr	PRIMASK, r3
}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4928      	ldr	r1, [pc, #160]	@ (8005628 <UART_RxISR_8BIT+0x1b4>)
 8005588:	400a      	ands	r2, r1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800558e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d12f      	bne.n	8005600 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a6:	f3ef 8310 	mrs	r3, PRIMASK
 80055aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80055ac:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b0:	2301      	movs	r3, #1
 80055b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f383 8810 	msr	PRIMASK, r3
}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2110      	movs	r1, #16
 80055c8:	438a      	bics	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f383 8810 	msr	PRIMASK, r3
}
 80055d6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	2210      	movs	r2, #16
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d103      	bne.n	80055ee <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2210      	movs	r2, #16
 80055ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	225c      	movs	r2, #92	@ 0x5c
 80055f2:	5a9a      	ldrh	r2, [r3, r2]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	0011      	movs	r1, r2
 80055f8:	0018      	movs	r0, r3
 80055fa:	f7ff fa6e 	bl	8004ada <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055fe:	e00c      	b.n	800561a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0018      	movs	r0, r3
 8005604:	f7fc fa3e 	bl	8001a84 <HAL_UART_RxCpltCallback>
}
 8005608:	e007      	b.n	800561a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2108      	movs	r1, #8
 8005616:	430a      	orrs	r2, r1
 8005618:	619a      	str	r2, [r3, #24]
}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b014      	add	sp, #80	@ 0x50
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			@ (mov r8, r8)
 8005624:	fffffedf 	.word	0xfffffedf
 8005628:	fbffffff 	.word	0xfbffffff

0800562c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b094      	sub	sp, #80	@ 0x50
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005634:	204e      	movs	r0, #78	@ 0x4e
 8005636:	183b      	adds	r3, r7, r0
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	2160      	movs	r1, #96	@ 0x60
 800563c:	5a52      	ldrh	r2, [r2, r1]
 800563e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	228c      	movs	r2, #140	@ 0x8c
 8005644:	589b      	ldr	r3, [r3, r2]
 8005646:	2b22      	cmp	r3, #34	@ 0x22
 8005648:	d000      	beq.n	800564c <UART_RxISR_16BIT+0x20>
 800564a:	e0ba      	b.n	80057c2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005652:	214c      	movs	r1, #76	@ 0x4c
 8005654:	187b      	adds	r3, r7, r1
 8005656:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800565e:	187b      	adds	r3, r7, r1
 8005660:	183a      	adds	r2, r7, r0
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	8812      	ldrh	r2, [r2, #0]
 8005666:	4013      	ands	r3, r2
 8005668:	b29a      	uxth	r2, r3
 800566a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800566c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005672:	1c9a      	adds	r2, r3, #2
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	225e      	movs	r2, #94	@ 0x5e
 800567c:	5a9b      	ldrh	r3, [r3, r2]
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b299      	uxth	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	225e      	movs	r2, #94	@ 0x5e
 8005688:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	225e      	movs	r2, #94	@ 0x5e
 800568e:	5a9b      	ldrh	r3, [r3, r2]
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d000      	beq.n	8005698 <UART_RxISR_16BIT+0x6c>
 8005696:	e09c      	b.n	80057d2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005698:	f3ef 8310 	mrs	r3, PRIMASK
 800569c:	623b      	str	r3, [r7, #32]
  return(result);
 800569e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056a2:	2301      	movs	r3, #1
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	f383 8810 	msr	PRIMASK, r3
}
 80056ac:	46c0      	nop			@ (mov r8, r8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4948      	ldr	r1, [pc, #288]	@ (80057dc <UART_RxISR_16BIT+0x1b0>)
 80056ba:	400a      	ands	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c4:	f383 8810 	msr	PRIMASK, r3
}
 80056c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ca:	f3ef 8310 	mrs	r3, PRIMASK
 80056ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80056d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d4:	2301      	movs	r3, #1
 80056d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2101      	movs	r1, #1
 80056ec:	438a      	bics	r2, r1
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	228c      	movs	r2, #140	@ 0x8c
 8005700:	2120      	movs	r1, #32
 8005702:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	4013      	ands	r3, r2
 800571c:	d018      	beq.n	8005750 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571e:	f3ef 8310 	mrs	r3, PRIMASK
 8005722:	617b      	str	r3, [r7, #20]
  return(result);
 8005724:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005728:	2301      	movs	r3, #1
 800572a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4928      	ldr	r1, [pc, #160]	@ (80057e0 <UART_RxISR_16BIT+0x1b4>)
 8005740:	400a      	ands	r2, r1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005746:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f383 8810 	msr	PRIMASK, r3
}
 800574e:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d12f      	bne.n	80057b8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575e:	f3ef 8310 	mrs	r3, PRIMASK
 8005762:	60bb      	str	r3, [r7, #8]
  return(result);
 8005764:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005768:	2301      	movs	r3, #1
 800576a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f383 8810 	msr	PRIMASK, r3
}
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2110      	movs	r1, #16
 8005780:	438a      	bics	r2, r1
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f383 8810 	msr	PRIMASK, r3
}
 800578e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	2210      	movs	r2, #16
 8005798:	4013      	ands	r3, r2
 800579a:	2b10      	cmp	r3, #16
 800579c:	d103      	bne.n	80057a6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2210      	movs	r2, #16
 80057a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	225c      	movs	r2, #92	@ 0x5c
 80057aa:	5a9a      	ldrh	r2, [r3, r2]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	0011      	movs	r1, r2
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff f992 	bl	8004ada <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057b6:	e00c      	b.n	80057d2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7fc f962 	bl	8001a84 <HAL_UART_RxCpltCallback>
}
 80057c0:	e007      	b.n	80057d2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2108      	movs	r1, #8
 80057ce:	430a      	orrs	r2, r1
 80057d0:	619a      	str	r2, [r3, #24]
}
 80057d2:	46c0      	nop			@ (mov r8, r8)
 80057d4:	46bd      	mov	sp, r7
 80057d6:	b014      	add	sp, #80	@ 0x50
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	fffffedf 	.word	0xfffffedf
 80057e0:	fbffffff 	.word	0xfbffffff

080057e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b0a0      	sub	sp, #128	@ 0x80
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80057ec:	237a      	movs	r3, #122	@ 0x7a
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	2160      	movs	r1, #96	@ 0x60
 80057f4:	5a52      	ldrh	r2, [r2, r1]
 80057f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	228c      	movs	r2, #140	@ 0x8c
 8005814:	589b      	ldr	r3, [r3, r2]
 8005816:	2b22      	cmp	r3, #34	@ 0x22
 8005818:	d000      	beq.n	800581c <UART_RxISR_8BIT_FIFOEN+0x38>
 800581a:	e165      	b.n	8005ae8 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800581c:	236e      	movs	r3, #110	@ 0x6e
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	2168      	movs	r1, #104	@ 0x68
 8005824:	5a52      	ldrh	r2, [r2, r1]
 8005826:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005828:	e10c      	b.n	8005a44 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005830:	216c      	movs	r1, #108	@ 0x6c
 8005832:	187b      	adds	r3, r7, r1
 8005834:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005836:	187b      	adds	r3, r7, r1
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	237a      	movs	r3, #122	@ 0x7a
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b2d9      	uxtb	r1, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005848:	400a      	ands	r2, r1
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	225e      	movs	r2, #94	@ 0x5e
 800585c:	5a9b      	ldrh	r3, [r3, r2]
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b299      	uxth	r1, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	225e      	movs	r2, #94	@ 0x5e
 8005868:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005872:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005874:	2207      	movs	r2, #7
 8005876:	4013      	ands	r3, r2
 8005878:	d049      	beq.n	800590e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800587a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800587c:	2201      	movs	r2, #1
 800587e:	4013      	ands	r3, r2
 8005880:	d010      	beq.n	80058a4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005882:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4013      	ands	r3, r2
 800588a:	d00b      	beq.n	80058a4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2201      	movs	r2, #1
 8005892:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2290      	movs	r2, #144	@ 0x90
 8005898:	589b      	ldr	r3, [r3, r2]
 800589a:	2201      	movs	r2, #1
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2190      	movs	r1, #144	@ 0x90
 80058a2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058a6:	2202      	movs	r2, #2
 80058a8:	4013      	ands	r3, r2
 80058aa:	d00f      	beq.n	80058cc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80058ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058ae:	2201      	movs	r2, #1
 80058b0:	4013      	ands	r3, r2
 80058b2:	d00b      	beq.n	80058cc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2202      	movs	r2, #2
 80058ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2290      	movs	r2, #144	@ 0x90
 80058c0:	589b      	ldr	r3, [r3, r2]
 80058c2:	2204      	movs	r2, #4
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2190      	movs	r1, #144	@ 0x90
 80058ca:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058ce:	2204      	movs	r2, #4
 80058d0:	4013      	ands	r3, r2
 80058d2:	d00f      	beq.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x110>
 80058d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058d6:	2201      	movs	r2, #1
 80058d8:	4013      	ands	r3, r2
 80058da:	d00b      	beq.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2204      	movs	r2, #4
 80058e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2290      	movs	r2, #144	@ 0x90
 80058e8:	589b      	ldr	r3, [r3, r2]
 80058ea:	2202      	movs	r2, #2
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2190      	movs	r1, #144	@ 0x90
 80058f2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2290      	movs	r2, #144	@ 0x90
 80058f8:	589b      	ldr	r3, [r3, r2]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f7ff f8e2 	bl	8004aca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2290      	movs	r2, #144	@ 0x90
 800590a:	2100      	movs	r1, #0
 800590c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	225e      	movs	r2, #94	@ 0x5e
 8005912:	5a9b      	ldrh	r3, [r3, r2]
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d000      	beq.n	800591c <UART_RxISR_8BIT_FIFOEN+0x138>
 800591a:	e093      	b.n	8005a44 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591c:	f3ef 8310 	mrs	r3, PRIMASK
 8005920:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005926:	2301      	movs	r3, #1
 8005928:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592c:	f383 8810 	msr	PRIMASK, r3
}
 8005930:	46c0      	nop			@ (mov r8, r8)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4970      	ldr	r1, [pc, #448]	@ (8005b00 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 800593e:	400a      	ands	r2, r1
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005944:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005948:	f383 8810 	msr	PRIMASK, r3
}
 800594c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594e:	f3ef 8310 	mrs	r3, PRIMASK
 8005952:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005956:	667b      	str	r3, [r7, #100]	@ 0x64
 8005958:	2301      	movs	r3, #1
 800595a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595e:	f383 8810 	msr	PRIMASK, r3
}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4965      	ldr	r1, [pc, #404]	@ (8005b04 <UART_RxISR_8BIT_FIFOEN+0x320>)
 8005970:	400a      	ands	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
 8005974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800597a:	f383 8810 	msr	PRIMASK, r3
}
 800597e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	228c      	movs	r2, #140	@ 0x8c
 8005984:	2120      	movs	r1, #32
 8005986:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	041b      	lsls	r3, r3, #16
 800599e:	4013      	ands	r3, r2
 80059a0:	d018      	beq.n	80059d4 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a2:	f3ef 8310 	mrs	r3, PRIMASK
 80059a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80059a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80059ac:	2301      	movs	r3, #1
 80059ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	f383 8810 	msr	PRIMASK, r3
}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4951      	ldr	r1, [pc, #324]	@ (8005b08 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80059c4:	400a      	ands	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ce:	f383 8810 	msr	PRIMASK, r3
}
 80059d2:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d12f      	bne.n	8005a3c <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e2:	f3ef 8310 	mrs	r3, PRIMASK
 80059e6:	623b      	str	r3, [r7, #32]
  return(result);
 80059e8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059ec:	2301      	movs	r3, #1
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	f383 8810 	msr	PRIMASK, r3
}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2110      	movs	r1, #16
 8005a04:	438a      	bics	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	f383 8810 	msr	PRIMASK, r3
}
 8005a12:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d103      	bne.n	8005a2a <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2210      	movs	r2, #16
 8005a28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	225c      	movs	r2, #92	@ 0x5c
 8005a2e:	5a9a      	ldrh	r2, [r3, r2]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	0011      	movs	r1, r2
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7ff f850 	bl	8004ada <HAL_UARTEx_RxEventCallback>
 8005a3a:	e003      	b.n	8005a44 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f7fc f820 	bl	8001a84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a44:	236e      	movs	r3, #110	@ 0x6e
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d004      	beq.n	8005a58 <UART_RxISR_8BIT_FIFOEN+0x274>
 8005a4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a50:	2220      	movs	r2, #32
 8005a52:	4013      	ands	r3, r2
 8005a54:	d000      	beq.n	8005a58 <UART_RxISR_8BIT_FIFOEN+0x274>
 8005a56:	e6e8      	b.n	800582a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a58:	205a      	movs	r0, #90	@ 0x5a
 8005a5a:	183b      	adds	r3, r7, r0
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	215e      	movs	r1, #94	@ 0x5e
 8005a60:	5a52      	ldrh	r2, [r2, r1]
 8005a62:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a64:	0001      	movs	r1, r0
 8005a66:	187b      	adds	r3, r7, r1
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d044      	beq.n	8005af8 <UART_RxISR_8BIT_FIFOEN+0x314>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2268      	movs	r2, #104	@ 0x68
 8005a72:	5a9b      	ldrh	r3, [r3, r2]
 8005a74:	187a      	adds	r2, r7, r1
 8005a76:	8812      	ldrh	r2, [r2, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d23d      	bcs.n	8005af8 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a80:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a82:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a84:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a86:	2301      	movs	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f383 8810 	msr	PRIMASK, r3
}
 8005a90:	46c0      	nop			@ (mov r8, r8)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	491b      	ldr	r1, [pc, #108]	@ (8005b0c <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005a9e:	400a      	ands	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a17      	ldr	r2, [pc, #92]	@ (8005b10 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005ab2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab8:	617b      	str	r3, [r7, #20]
  return(result);
 8005aba:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005abc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f383 8810 	msr	PRIMASK, r3
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2120      	movs	r1, #32
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005adc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	f383 8810 	msr	PRIMASK, r3
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ae6:	e007      	b.n	8005af8 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2108      	movs	r1, #8
 8005af4:	430a      	orrs	r2, r1
 8005af6:	619a      	str	r2, [r3, #24]
}
 8005af8:	46c0      	nop			@ (mov r8, r8)
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b020      	add	sp, #128	@ 0x80
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	fffffeff 	.word	0xfffffeff
 8005b04:	effffffe 	.word	0xeffffffe
 8005b08:	fbffffff 	.word	0xfbffffff
 8005b0c:	efffffff 	.word	0xefffffff
 8005b10:	08005475 	.word	0x08005475

08005b14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b0a2      	sub	sp, #136	@ 0x88
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005b1c:	2382      	movs	r3, #130	@ 0x82
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	2160      	movs	r1, #96	@ 0x60
 8005b24:	5a52      	ldrh	r2, [r2, r1]
 8005b26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	2284      	movs	r2, #132	@ 0x84
 8005b30:	18ba      	adds	r2, r7, r2
 8005b32:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	228c      	movs	r2, #140	@ 0x8c
 8005b48:	589b      	ldr	r3, [r3, r2]
 8005b4a:	2b22      	cmp	r3, #34	@ 0x22
 8005b4c:	d000      	beq.n	8005b50 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005b4e:	e16f      	b.n	8005e30 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b50:	2376      	movs	r3, #118	@ 0x76
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	2168      	movs	r1, #104	@ 0x68
 8005b58:	5a52      	ldrh	r2, [r2, r1]
 8005b5a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b5c:	e114      	b.n	8005d88 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b64:	2174      	movs	r1, #116	@ 0x74
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005b70:	187b      	adds	r3, r7, r1
 8005b72:	2282      	movs	r2, #130	@ 0x82
 8005b74:	18ba      	adds	r2, r7, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	8812      	ldrh	r2, [r2, #0]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	225e      	movs	r2, #94	@ 0x5e
 8005b90:	5a9b      	ldrh	r3, [r3, r2]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b299      	uxth	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	225e      	movs	r2, #94	@ 0x5e
 8005b9c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	2184      	movs	r1, #132	@ 0x84
 8005ba6:	187a      	adds	r2, r7, r1
 8005ba8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005baa:	187b      	adds	r3, r7, r1
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2207      	movs	r2, #7
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d04e      	beq.n	8005c52 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bb4:	187b      	adds	r3, r7, r1
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d010      	beq.n	8005be0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005bbe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005bc0:	2380      	movs	r3, #128	@ 0x80
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d00b      	beq.n	8005be0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2290      	movs	r2, #144	@ 0x90
 8005bd4:	589b      	ldr	r3, [r3, r2]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2190      	movs	r1, #144	@ 0x90
 8005bde:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be0:	2384      	movs	r3, #132	@ 0x84
 8005be2:	18fb      	adds	r3, r7, r3
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2202      	movs	r2, #2
 8005be8:	4013      	ands	r3, r2
 8005bea:	d00f      	beq.n	8005c0c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d00b      	beq.n	8005c0c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2290      	movs	r2, #144	@ 0x90
 8005c00:	589b      	ldr	r3, [r3, r2]
 8005c02:	2204      	movs	r2, #4
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2190      	movs	r1, #144	@ 0x90
 8005c0a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c0c:	2384      	movs	r3, #132	@ 0x84
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2204      	movs	r2, #4
 8005c14:	4013      	ands	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005c18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2204      	movs	r2, #4
 8005c26:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2290      	movs	r2, #144	@ 0x90
 8005c2c:	589b      	ldr	r3, [r3, r2]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2190      	movs	r1, #144	@ 0x90
 8005c36:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2290      	movs	r2, #144	@ 0x90
 8005c3c:	589b      	ldr	r3, [r3, r2]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7fe ff40 	bl	8004aca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2290      	movs	r2, #144	@ 0x90
 8005c4e:	2100      	movs	r1, #0
 8005c50:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	225e      	movs	r2, #94	@ 0x5e
 8005c56:	5a9b      	ldrh	r3, [r3, r2]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d000      	beq.n	8005c60 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005c5e:	e093      	b.n	8005d88 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c60:	f3ef 8310 	mrs	r3, PRIMASK
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c70:	f383 8810 	msr	PRIMASK, r3
}
 8005c74:	46c0      	nop			@ (mov r8, r8)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4971      	ldr	r1, [pc, #452]	@ (8005e48 <UART_RxISR_16BIT_FIFOEN+0x334>)
 8005c82:	400a      	ands	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c88:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c8c:	f383 8810 	msr	PRIMASK, r3
}
 8005c90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c92:	f3ef 8310 	mrs	r3, PRIMASK
 8005c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca2:	f383 8810 	msr	PRIMASK, r3
}
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4966      	ldr	r1, [pc, #408]	@ (8005e4c <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005cb4:	400a      	ands	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cbe:	f383 8810 	msr	PRIMASK, r3
}
 8005cc2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	228c      	movs	r2, #140	@ 0x8c
 8005cc8:	2120      	movs	r1, #32
 8005cca:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	2380      	movs	r3, #128	@ 0x80
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d018      	beq.n	8005d18 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf6:	f383 8810 	msr	PRIMASK, r3
}
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4952      	ldr	r1, [pc, #328]	@ (8005e50 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005d08:	400a      	ands	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d12:	f383 8810 	msr	PRIMASK, r3
}
 8005d16:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d12f      	bne.n	8005d80 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d26:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d30:	2301      	movs	r3, #1
 8005d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d36:	f383 8810 	msr	PRIMASK, r3
}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2110      	movs	r1, #16
 8005d48:	438a      	bics	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	f383 8810 	msr	PRIMASK, r3
}
 8005d56:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	2210      	movs	r2, #16
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d103      	bne.n	8005d6e <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2210      	movs	r2, #16
 8005d6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	225c      	movs	r2, #92	@ 0x5c
 8005d72:	5a9a      	ldrh	r2, [r3, r2]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0011      	movs	r1, r2
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7fe feae 	bl	8004ada <HAL_UARTEx_RxEventCallback>
 8005d7e:	e003      	b.n	8005d88 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	0018      	movs	r0, r3
 8005d84:	f7fb fe7e 	bl	8001a84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d88:	2376      	movs	r3, #118	@ 0x76
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d006      	beq.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8005d92:	2384      	movs	r3, #132	@ 0x84
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d000      	beq.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8005d9e:	e6de      	b.n	8005b5e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005da0:	205e      	movs	r0, #94	@ 0x5e
 8005da2:	183b      	adds	r3, r7, r0
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	215e      	movs	r1, #94	@ 0x5e
 8005da8:	5a52      	ldrh	r2, [r2, r1]
 8005daa:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005dac:	0001      	movs	r1, r0
 8005dae:	187b      	adds	r3, r7, r1
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d044      	beq.n	8005e40 <UART_RxISR_16BIT_FIFOEN+0x32c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2268      	movs	r2, #104	@ 0x68
 8005dba:	5a9b      	ldrh	r3, [r3, r2]
 8005dbc:	187a      	adds	r2, r7, r1
 8005dbe:	8812      	ldrh	r2, [r2, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d23d      	bcs.n	8005e40 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dce:	2301      	movs	r3, #1
 8005dd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f383 8810 	msr	PRIMASK, r3
}
 8005dd8:	46c0      	nop			@ (mov r8, r8)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	491b      	ldr	r1, [pc, #108]	@ (8005e54 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005de6:	400a      	ands	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]
 8005dea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f383 8810 	msr	PRIMASK, r3
}
 8005df4:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a17      	ldr	r2, [pc, #92]	@ (8005e58 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005dfa:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005e00:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e02:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e04:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e06:	2301      	movs	r3, #1
 8005e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			@ (mov r8, r8)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2120      	movs	r1, #32
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f383 8810 	msr	PRIMASK, r3
}
 8005e2c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e2e:	e007      	b.n	8005e40 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2108      	movs	r1, #8
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	619a      	str	r2, [r3, #24]
}
 8005e40:	46c0      	nop			@ (mov r8, r8)
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b022      	add	sp, #136	@ 0x88
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	fffffeff 	.word	0xfffffeff
 8005e4c:	effffffe 	.word	0xeffffffe
 8005e50:	fbffffff 	.word	0xfbffffff
 8005e54:	efffffff 	.word	0xefffffff
 8005e58:	0800562d 	.word	0x0800562d

08005e5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2284      	movs	r2, #132	@ 0x84
 8005e68:	5c9b      	ldrb	r3, [r3, r2]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e027      	b.n	8005ec2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2284      	movs	r2, #132	@ 0x84
 8005e76:	2101      	movs	r1, #1
 8005e78:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2288      	movs	r2, #136	@ 0x88
 8005e7e:	2124      	movs	r1, #36	@ 0x24
 8005e80:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2101      	movs	r1, #1
 8005e96:	438a      	bics	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8005ecc <HAL_UARTEx_DisableFifoMode+0x70>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2288      	movs	r2, #136	@ 0x88
 8005eb4:	2120      	movs	r1, #32
 8005eb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2284      	movs	r2, #132	@ 0x84
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b004      	add	sp, #16
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	dfffffff 	.word	0xdfffffff

08005ed0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2284      	movs	r2, #132	@ 0x84
 8005ede:	5c9b      	ldrb	r3, [r3, r2]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e02e      	b.n	8005f46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2284      	movs	r2, #132	@ 0x84
 8005eec:	2101      	movs	r1, #1
 8005eee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2288      	movs	r2, #136	@ 0x88
 8005ef4:	2124      	movs	r1, #36	@ 0x24
 8005ef6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	438a      	bics	r2, r1
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	08d9      	lsrs	r1, r3, #3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 f854 	bl	8005fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2288      	movs	r2, #136	@ 0x88
 8005f38:	2120      	movs	r1, #32
 8005f3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2284      	movs	r2, #132	@ 0x84
 8005f40:	2100      	movs	r1, #0
 8005f42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	0018      	movs	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b004      	add	sp, #16
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2284      	movs	r2, #132	@ 0x84
 8005f5e:	5c9b      	ldrb	r3, [r3, r2]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e02f      	b.n	8005fc8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2284      	movs	r2, #132	@ 0x84
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2288      	movs	r2, #136	@ 0x88
 8005f74:	2124      	movs	r1, #36	@ 0x24
 8005f76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	438a      	bics	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	4a0e      	ldr	r2, [pc, #56]	@ (8005fd0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	0019      	movs	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f000 f813 	bl	8005fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2288      	movs	r2, #136	@ 0x88
 8005fba:	2120      	movs	r1, #32
 8005fbc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2284      	movs	r2, #132	@ 0x84
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	0018      	movs	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b004      	add	sp, #16
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	f1ffffff 	.word	0xf1ffffff

08005fd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d108      	bne.n	8005ff6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	226a      	movs	r2, #106	@ 0x6a
 8005fe8:	2101      	movs	r1, #1
 8005fea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2268      	movs	r2, #104	@ 0x68
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ff4:	e043      	b.n	800607e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ff6:	260f      	movs	r6, #15
 8005ff8:	19bb      	adds	r3, r7, r6
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ffe:	200e      	movs	r0, #14
 8006000:	183b      	adds	r3, r7, r0
 8006002:	2208      	movs	r2, #8
 8006004:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	0e5b      	lsrs	r3, r3, #25
 800600e:	b2da      	uxtb	r2, r3
 8006010:	240d      	movs	r4, #13
 8006012:	193b      	adds	r3, r7, r4
 8006014:	2107      	movs	r1, #7
 8006016:	400a      	ands	r2, r1
 8006018:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	0f5b      	lsrs	r3, r3, #29
 8006022:	b2da      	uxtb	r2, r3
 8006024:	250c      	movs	r5, #12
 8006026:	197b      	adds	r3, r7, r5
 8006028:	2107      	movs	r1, #7
 800602a:	400a      	ands	r2, r1
 800602c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800602e:	183b      	adds	r3, r7, r0
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	197a      	adds	r2, r7, r5
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	4914      	ldr	r1, [pc, #80]	@ (8006088 <UARTEx_SetNbDataToProcess+0xb4>)
 8006038:	5c8a      	ldrb	r2, [r1, r2]
 800603a:	435a      	muls	r2, r3
 800603c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800603e:	197b      	adds	r3, r7, r5
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	4a12      	ldr	r2, [pc, #72]	@ (800608c <UARTEx_SetNbDataToProcess+0xb8>)
 8006044:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006046:	0019      	movs	r1, r3
 8006048:	f7fa f8ee 	bl	8000228 <__divsi3>
 800604c:	0003      	movs	r3, r0
 800604e:	b299      	uxth	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	226a      	movs	r2, #106	@ 0x6a
 8006054:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006056:	19bb      	adds	r3, r7, r6
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	193a      	adds	r2, r7, r4
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	490a      	ldr	r1, [pc, #40]	@ (8006088 <UARTEx_SetNbDataToProcess+0xb4>)
 8006060:	5c8a      	ldrb	r2, [r1, r2]
 8006062:	435a      	muls	r2, r3
 8006064:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006066:	193b      	adds	r3, r7, r4
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4a08      	ldr	r2, [pc, #32]	@ (800608c <UARTEx_SetNbDataToProcess+0xb8>)
 800606c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800606e:	0019      	movs	r1, r3
 8006070:	f7fa f8da 	bl	8000228 <__divsi3>
 8006074:	0003      	movs	r3, r0
 8006076:	b299      	uxth	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2268      	movs	r2, #104	@ 0x68
 800607c:	5299      	strh	r1, [r3, r2]
}
 800607e:	46c0      	nop			@ (mov r8, r8)
 8006080:	46bd      	mov	sp, r7
 8006082:	b005      	add	sp, #20
 8006084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	08006b90 	.word	0x08006b90
 800608c:	08006b98 	.word	0x08006b98

08006090 <sbrk_aligned>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4e0f      	ldr	r6, [pc, #60]	@ (80060d0 <sbrk_aligned+0x40>)
 8006094:	000d      	movs	r5, r1
 8006096:	6831      	ldr	r1, [r6, #0]
 8006098:	0004      	movs	r4, r0
 800609a:	2900      	cmp	r1, #0
 800609c:	d102      	bne.n	80060a4 <sbrk_aligned+0x14>
 800609e:	f000 f8d1 	bl	8006244 <_sbrk_r>
 80060a2:	6030      	str	r0, [r6, #0]
 80060a4:	0029      	movs	r1, r5
 80060a6:	0020      	movs	r0, r4
 80060a8:	f000 f8cc 	bl	8006244 <_sbrk_r>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d103      	bne.n	80060b8 <sbrk_aligned+0x28>
 80060b0:	2501      	movs	r5, #1
 80060b2:	426d      	negs	r5, r5
 80060b4:	0028      	movs	r0, r5
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	2303      	movs	r3, #3
 80060ba:	1cc5      	adds	r5, r0, #3
 80060bc:	439d      	bics	r5, r3
 80060be:	42a8      	cmp	r0, r5
 80060c0:	d0f8      	beq.n	80060b4 <sbrk_aligned+0x24>
 80060c2:	1a29      	subs	r1, r5, r0
 80060c4:	0020      	movs	r0, r4
 80060c6:	f000 f8bd 	bl	8006244 <_sbrk_r>
 80060ca:	3001      	adds	r0, #1
 80060cc:	d1f2      	bne.n	80060b4 <sbrk_aligned+0x24>
 80060ce:	e7ef      	b.n	80060b0 <sbrk_aligned+0x20>
 80060d0:	200002c4 	.word	0x200002c4

080060d4 <_malloc_r>:
 80060d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060d6:	2203      	movs	r2, #3
 80060d8:	1ccb      	adds	r3, r1, #3
 80060da:	4393      	bics	r3, r2
 80060dc:	3308      	adds	r3, #8
 80060de:	0005      	movs	r5, r0
 80060e0:	001f      	movs	r7, r3
 80060e2:	2b0c      	cmp	r3, #12
 80060e4:	d234      	bcs.n	8006150 <_malloc_r+0x7c>
 80060e6:	270c      	movs	r7, #12
 80060e8:	42b9      	cmp	r1, r7
 80060ea:	d833      	bhi.n	8006154 <_malloc_r+0x80>
 80060ec:	0028      	movs	r0, r5
 80060ee:	f000 f871 	bl	80061d4 <__malloc_lock>
 80060f2:	4e37      	ldr	r6, [pc, #220]	@ (80061d0 <_malloc_r+0xfc>)
 80060f4:	6833      	ldr	r3, [r6, #0]
 80060f6:	001c      	movs	r4, r3
 80060f8:	2c00      	cmp	r4, #0
 80060fa:	d12f      	bne.n	800615c <_malloc_r+0x88>
 80060fc:	0039      	movs	r1, r7
 80060fe:	0028      	movs	r0, r5
 8006100:	f7ff ffc6 	bl	8006090 <sbrk_aligned>
 8006104:	0004      	movs	r4, r0
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d15f      	bne.n	80061ca <_malloc_r+0xf6>
 800610a:	6834      	ldr	r4, [r6, #0]
 800610c:	9400      	str	r4, [sp, #0]
 800610e:	9b00      	ldr	r3, [sp, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d14a      	bne.n	80061aa <_malloc_r+0xd6>
 8006114:	2c00      	cmp	r4, #0
 8006116:	d052      	beq.n	80061be <_malloc_r+0xea>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	0028      	movs	r0, r5
 800611c:	18e3      	adds	r3, r4, r3
 800611e:	9900      	ldr	r1, [sp, #0]
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	f000 f88f 	bl	8006244 <_sbrk_r>
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	4283      	cmp	r3, r0
 800612a:	d148      	bne.n	80061be <_malloc_r+0xea>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	0028      	movs	r0, r5
 8006130:	1aff      	subs	r7, r7, r3
 8006132:	0039      	movs	r1, r7
 8006134:	f7ff ffac 	bl	8006090 <sbrk_aligned>
 8006138:	3001      	adds	r0, #1
 800613a:	d040      	beq.n	80061be <_malloc_r+0xea>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	19db      	adds	r3, r3, r7
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	6833      	ldr	r3, [r6, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	2a00      	cmp	r2, #0
 8006148:	d133      	bne.n	80061b2 <_malloc_r+0xde>
 800614a:	9b00      	ldr	r3, [sp, #0]
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	e019      	b.n	8006184 <_malloc_r+0xb0>
 8006150:	2b00      	cmp	r3, #0
 8006152:	dac9      	bge.n	80060e8 <_malloc_r+0x14>
 8006154:	230c      	movs	r3, #12
 8006156:	602b      	str	r3, [r5, #0]
 8006158:	2000      	movs	r0, #0
 800615a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800615c:	6821      	ldr	r1, [r4, #0]
 800615e:	1bc9      	subs	r1, r1, r7
 8006160:	d420      	bmi.n	80061a4 <_malloc_r+0xd0>
 8006162:	290b      	cmp	r1, #11
 8006164:	d90a      	bls.n	800617c <_malloc_r+0xa8>
 8006166:	19e2      	adds	r2, r4, r7
 8006168:	6027      	str	r7, [r4, #0]
 800616a:	42a3      	cmp	r3, r4
 800616c:	d104      	bne.n	8006178 <_malloc_r+0xa4>
 800616e:	6032      	str	r2, [r6, #0]
 8006170:	6863      	ldr	r3, [r4, #4]
 8006172:	6011      	str	r1, [r2, #0]
 8006174:	6053      	str	r3, [r2, #4]
 8006176:	e005      	b.n	8006184 <_malloc_r+0xb0>
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	e7f9      	b.n	8006170 <_malloc_r+0x9c>
 800617c:	6862      	ldr	r2, [r4, #4]
 800617e:	42a3      	cmp	r3, r4
 8006180:	d10e      	bne.n	80061a0 <_malloc_r+0xcc>
 8006182:	6032      	str	r2, [r6, #0]
 8006184:	0028      	movs	r0, r5
 8006186:	f000 f82d 	bl	80061e4 <__malloc_unlock>
 800618a:	0020      	movs	r0, r4
 800618c:	2207      	movs	r2, #7
 800618e:	300b      	adds	r0, #11
 8006190:	1d23      	adds	r3, r4, #4
 8006192:	4390      	bics	r0, r2
 8006194:	1ac2      	subs	r2, r0, r3
 8006196:	4298      	cmp	r0, r3
 8006198:	d0df      	beq.n	800615a <_malloc_r+0x86>
 800619a:	1a1b      	subs	r3, r3, r0
 800619c:	50a3      	str	r3, [r4, r2]
 800619e:	e7dc      	b.n	800615a <_malloc_r+0x86>
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	e7ef      	b.n	8006184 <_malloc_r+0xb0>
 80061a4:	0023      	movs	r3, r4
 80061a6:	6864      	ldr	r4, [r4, #4]
 80061a8:	e7a6      	b.n	80060f8 <_malloc_r+0x24>
 80061aa:	9c00      	ldr	r4, [sp, #0]
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	e7ad      	b.n	800610e <_malloc_r+0x3a>
 80061b2:	001a      	movs	r2, r3
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	d1fb      	bne.n	80061b2 <_malloc_r+0xde>
 80061ba:	2300      	movs	r3, #0
 80061bc:	e7da      	b.n	8006174 <_malloc_r+0xa0>
 80061be:	230c      	movs	r3, #12
 80061c0:	0028      	movs	r0, r5
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	f000 f80e 	bl	80061e4 <__malloc_unlock>
 80061c8:	e7c6      	b.n	8006158 <_malloc_r+0x84>
 80061ca:	6007      	str	r7, [r0, #0]
 80061cc:	e7da      	b.n	8006184 <_malloc_r+0xb0>
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	200002c8 	.word	0x200002c8

080061d4 <__malloc_lock>:
 80061d4:	b510      	push	{r4, lr}
 80061d6:	4802      	ldr	r0, [pc, #8]	@ (80061e0 <__malloc_lock+0xc>)
 80061d8:	f000 f870 	bl	80062bc <__retarget_lock_acquire_recursive>
 80061dc:	bd10      	pop	{r4, pc}
 80061de:	46c0      	nop			@ (mov r8, r8)
 80061e0:	20000408 	.word	0x20000408

080061e4 <__malloc_unlock>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4802      	ldr	r0, [pc, #8]	@ (80061f0 <__malloc_unlock+0xc>)
 80061e8:	f000 f869 	bl	80062be <__retarget_lock_release_recursive>
 80061ec:	bd10      	pop	{r4, pc}
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	20000408 	.word	0x20000408

080061f4 <siprintf>:
 80061f4:	b40e      	push	{r1, r2, r3}
 80061f6:	b500      	push	{lr}
 80061f8:	490b      	ldr	r1, [pc, #44]	@ (8006228 <siprintf+0x34>)
 80061fa:	b09c      	sub	sp, #112	@ 0x70
 80061fc:	ab1d      	add	r3, sp, #116	@ 0x74
 80061fe:	9002      	str	r0, [sp, #8]
 8006200:	9006      	str	r0, [sp, #24]
 8006202:	9107      	str	r1, [sp, #28]
 8006204:	9104      	str	r1, [sp, #16]
 8006206:	4809      	ldr	r0, [pc, #36]	@ (800622c <siprintf+0x38>)
 8006208:	4909      	ldr	r1, [pc, #36]	@ (8006230 <siprintf+0x3c>)
 800620a:	cb04      	ldmia	r3!, {r2}
 800620c:	9105      	str	r1, [sp, #20]
 800620e:	6800      	ldr	r0, [r0, #0]
 8006210:	a902      	add	r1, sp, #8
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	f000 f912 	bl	800643c <_svfiprintf_r>
 8006218:	2200      	movs	r2, #0
 800621a:	9b02      	ldr	r3, [sp, #8]
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	b01c      	add	sp, #112	@ 0x70
 8006220:	bc08      	pop	{r3}
 8006222:	b003      	add	sp, #12
 8006224:	4718      	bx	r3
 8006226:	46c0      	nop			@ (mov r8, r8)
 8006228:	7fffffff 	.word	0x7fffffff
 800622c:	2000000c 	.word	0x2000000c
 8006230:	ffff0208 	.word	0xffff0208

08006234 <memset>:
 8006234:	0003      	movs	r3, r0
 8006236:	1882      	adds	r2, r0, r2
 8006238:	4293      	cmp	r3, r2
 800623a:	d100      	bne.n	800623e <memset+0xa>
 800623c:	4770      	bx	lr
 800623e:	7019      	strb	r1, [r3, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	e7f9      	b.n	8006238 <memset+0x4>

08006244 <_sbrk_r>:
 8006244:	2300      	movs	r3, #0
 8006246:	b570      	push	{r4, r5, r6, lr}
 8006248:	4d06      	ldr	r5, [pc, #24]	@ (8006264 <_sbrk_r+0x20>)
 800624a:	0004      	movs	r4, r0
 800624c:	0008      	movs	r0, r1
 800624e:	602b      	str	r3, [r5, #0]
 8006250:	f7fb fdcc 	bl	8001dec <_sbrk>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d103      	bne.n	8006260 <_sbrk_r+0x1c>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d000      	beq.n	8006260 <_sbrk_r+0x1c>
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	bd70      	pop	{r4, r5, r6, pc}
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	20000404 	.word	0x20000404

08006268 <__errno>:
 8006268:	4b01      	ldr	r3, [pc, #4]	@ (8006270 <__errno+0x8>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	4770      	bx	lr
 800626e:	46c0      	nop			@ (mov r8, r8)
 8006270:	2000000c 	.word	0x2000000c

08006274 <__libc_init_array>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	2600      	movs	r6, #0
 8006278:	4c0c      	ldr	r4, [pc, #48]	@ (80062ac <__libc_init_array+0x38>)
 800627a:	4d0d      	ldr	r5, [pc, #52]	@ (80062b0 <__libc_init_array+0x3c>)
 800627c:	1b64      	subs	r4, r4, r5
 800627e:	10a4      	asrs	r4, r4, #2
 8006280:	42a6      	cmp	r6, r4
 8006282:	d109      	bne.n	8006298 <__libc_init_array+0x24>
 8006284:	2600      	movs	r6, #0
 8006286:	f000 fb9f 	bl	80069c8 <_init>
 800628a:	4c0a      	ldr	r4, [pc, #40]	@ (80062b4 <__libc_init_array+0x40>)
 800628c:	4d0a      	ldr	r5, [pc, #40]	@ (80062b8 <__libc_init_array+0x44>)
 800628e:	1b64      	subs	r4, r4, r5
 8006290:	10a4      	asrs	r4, r4, #2
 8006292:	42a6      	cmp	r6, r4
 8006294:	d105      	bne.n	80062a2 <__libc_init_array+0x2e>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	00b3      	lsls	r3, r6, #2
 800629a:	58eb      	ldr	r3, [r5, r3]
 800629c:	4798      	blx	r3
 800629e:	3601      	adds	r6, #1
 80062a0:	e7ee      	b.n	8006280 <__libc_init_array+0xc>
 80062a2:	00b3      	lsls	r3, r6, #2
 80062a4:	58eb      	ldr	r3, [r5, r3]
 80062a6:	4798      	blx	r3
 80062a8:	3601      	adds	r6, #1
 80062aa:	e7f2      	b.n	8006292 <__libc_init_array+0x1e>
 80062ac:	08006bd4 	.word	0x08006bd4
 80062b0:	08006bd4 	.word	0x08006bd4
 80062b4:	08006bd8 	.word	0x08006bd8
 80062b8:	08006bd4 	.word	0x08006bd4

080062bc <__retarget_lock_acquire_recursive>:
 80062bc:	4770      	bx	lr

080062be <__retarget_lock_release_recursive>:
 80062be:	4770      	bx	lr

080062c0 <memchr>:
 80062c0:	b2c9      	uxtb	r1, r1
 80062c2:	1882      	adds	r2, r0, r2
 80062c4:	4290      	cmp	r0, r2
 80062c6:	d101      	bne.n	80062cc <memchr+0xc>
 80062c8:	2000      	movs	r0, #0
 80062ca:	4770      	bx	lr
 80062cc:	7803      	ldrb	r3, [r0, #0]
 80062ce:	428b      	cmp	r3, r1
 80062d0:	d0fb      	beq.n	80062ca <memchr+0xa>
 80062d2:	3001      	adds	r0, #1
 80062d4:	e7f6      	b.n	80062c4 <memchr+0x4>

080062d6 <memcpy>:
 80062d6:	2300      	movs	r3, #0
 80062d8:	b510      	push	{r4, lr}
 80062da:	429a      	cmp	r2, r3
 80062dc:	d100      	bne.n	80062e0 <memcpy+0xa>
 80062de:	bd10      	pop	{r4, pc}
 80062e0:	5ccc      	ldrb	r4, [r1, r3]
 80062e2:	54c4      	strb	r4, [r0, r3]
 80062e4:	3301      	adds	r3, #1
 80062e6:	e7f8      	b.n	80062da <memcpy+0x4>

080062e8 <_free_r>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	0005      	movs	r5, r0
 80062ec:	1e0c      	subs	r4, r1, #0
 80062ee:	d010      	beq.n	8006312 <_free_r+0x2a>
 80062f0:	3c04      	subs	r4, #4
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	da00      	bge.n	80062fa <_free_r+0x12>
 80062f8:	18e4      	adds	r4, r4, r3
 80062fa:	0028      	movs	r0, r5
 80062fc:	f7ff ff6a 	bl	80061d4 <__malloc_lock>
 8006300:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <_free_r+0x90>)
 8006302:	6813      	ldr	r3, [r2, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d105      	bne.n	8006314 <_free_r+0x2c>
 8006308:	6063      	str	r3, [r4, #4]
 800630a:	6014      	str	r4, [r2, #0]
 800630c:	0028      	movs	r0, r5
 800630e:	f7ff ff69 	bl	80061e4 <__malloc_unlock>
 8006312:	bd70      	pop	{r4, r5, r6, pc}
 8006314:	42a3      	cmp	r3, r4
 8006316:	d908      	bls.n	800632a <_free_r+0x42>
 8006318:	6820      	ldr	r0, [r4, #0]
 800631a:	1821      	adds	r1, r4, r0
 800631c:	428b      	cmp	r3, r1
 800631e:	d1f3      	bne.n	8006308 <_free_r+0x20>
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	1809      	adds	r1, r1, r0
 8006326:	6021      	str	r1, [r4, #0]
 8006328:	e7ee      	b.n	8006308 <_free_r+0x20>
 800632a:	001a      	movs	r2, r3
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <_free_r+0x4e>
 8006332:	42a3      	cmp	r3, r4
 8006334:	d9f9      	bls.n	800632a <_free_r+0x42>
 8006336:	6811      	ldr	r1, [r2, #0]
 8006338:	1850      	adds	r0, r2, r1
 800633a:	42a0      	cmp	r0, r4
 800633c:	d10b      	bne.n	8006356 <_free_r+0x6e>
 800633e:	6820      	ldr	r0, [r4, #0]
 8006340:	1809      	adds	r1, r1, r0
 8006342:	1850      	adds	r0, r2, r1
 8006344:	6011      	str	r1, [r2, #0]
 8006346:	4283      	cmp	r3, r0
 8006348:	d1e0      	bne.n	800630c <_free_r+0x24>
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	1841      	adds	r1, r0, r1
 8006350:	6011      	str	r1, [r2, #0]
 8006352:	6053      	str	r3, [r2, #4]
 8006354:	e7da      	b.n	800630c <_free_r+0x24>
 8006356:	42a0      	cmp	r0, r4
 8006358:	d902      	bls.n	8006360 <_free_r+0x78>
 800635a:	230c      	movs	r3, #12
 800635c:	602b      	str	r3, [r5, #0]
 800635e:	e7d5      	b.n	800630c <_free_r+0x24>
 8006360:	6820      	ldr	r0, [r4, #0]
 8006362:	1821      	adds	r1, r4, r0
 8006364:	428b      	cmp	r3, r1
 8006366:	d103      	bne.n	8006370 <_free_r+0x88>
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	1809      	adds	r1, r1, r0
 800636e:	6021      	str	r1, [r4, #0]
 8006370:	6063      	str	r3, [r4, #4]
 8006372:	6054      	str	r4, [r2, #4]
 8006374:	e7ca      	b.n	800630c <_free_r+0x24>
 8006376:	46c0      	nop			@ (mov r8, r8)
 8006378:	200002c8 	.word	0x200002c8

0800637c <__ssputs_r>:
 800637c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637e:	688e      	ldr	r6, [r1, #8]
 8006380:	b085      	sub	sp, #20
 8006382:	001f      	movs	r7, r3
 8006384:	000c      	movs	r4, r1
 8006386:	680b      	ldr	r3, [r1, #0]
 8006388:	9002      	str	r0, [sp, #8]
 800638a:	9203      	str	r2, [sp, #12]
 800638c:	42be      	cmp	r6, r7
 800638e:	d830      	bhi.n	80063f2 <__ssputs_r+0x76>
 8006390:	210c      	movs	r1, #12
 8006392:	5e62      	ldrsh	r2, [r4, r1]
 8006394:	2190      	movs	r1, #144	@ 0x90
 8006396:	00c9      	lsls	r1, r1, #3
 8006398:	420a      	tst	r2, r1
 800639a:	d028      	beq.n	80063ee <__ssputs_r+0x72>
 800639c:	2003      	movs	r0, #3
 800639e:	6921      	ldr	r1, [r4, #16]
 80063a0:	1a5b      	subs	r3, r3, r1
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	6963      	ldr	r3, [r4, #20]
 80063a6:	4343      	muls	r3, r0
 80063a8:	9801      	ldr	r0, [sp, #4]
 80063aa:	0fdd      	lsrs	r5, r3, #31
 80063ac:	18ed      	adds	r5, r5, r3
 80063ae:	1c7b      	adds	r3, r7, #1
 80063b0:	181b      	adds	r3, r3, r0
 80063b2:	106d      	asrs	r5, r5, #1
 80063b4:	42ab      	cmp	r3, r5
 80063b6:	d900      	bls.n	80063ba <__ssputs_r+0x3e>
 80063b8:	001d      	movs	r5, r3
 80063ba:	0552      	lsls	r2, r2, #21
 80063bc:	d528      	bpl.n	8006410 <__ssputs_r+0x94>
 80063be:	0029      	movs	r1, r5
 80063c0:	9802      	ldr	r0, [sp, #8]
 80063c2:	f7ff fe87 	bl	80060d4 <_malloc_r>
 80063c6:	1e06      	subs	r6, r0, #0
 80063c8:	d02c      	beq.n	8006424 <__ssputs_r+0xa8>
 80063ca:	9a01      	ldr	r2, [sp, #4]
 80063cc:	6921      	ldr	r1, [r4, #16]
 80063ce:	f7ff ff82 	bl	80062d6 <memcpy>
 80063d2:	89a2      	ldrh	r2, [r4, #12]
 80063d4:	4b18      	ldr	r3, [pc, #96]	@ (8006438 <__ssputs_r+0xbc>)
 80063d6:	401a      	ands	r2, r3
 80063d8:	2380      	movs	r3, #128	@ 0x80
 80063da:	4313      	orrs	r3, r2
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	6126      	str	r6, [r4, #16]
 80063e2:	18f6      	adds	r6, r6, r3
 80063e4:	6026      	str	r6, [r4, #0]
 80063e6:	003e      	movs	r6, r7
 80063e8:	6165      	str	r5, [r4, #20]
 80063ea:	1aed      	subs	r5, r5, r3
 80063ec:	60a5      	str	r5, [r4, #8]
 80063ee:	42be      	cmp	r6, r7
 80063f0:	d900      	bls.n	80063f4 <__ssputs_r+0x78>
 80063f2:	003e      	movs	r6, r7
 80063f4:	0032      	movs	r2, r6
 80063f6:	9903      	ldr	r1, [sp, #12]
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	f000 fa9b 	bl	8006934 <memmove>
 80063fe:	2000      	movs	r0, #0
 8006400:	68a3      	ldr	r3, [r4, #8]
 8006402:	1b9b      	subs	r3, r3, r6
 8006404:	60a3      	str	r3, [r4, #8]
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	199b      	adds	r3, r3, r6
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	b005      	add	sp, #20
 800640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006410:	002a      	movs	r2, r5
 8006412:	9802      	ldr	r0, [sp, #8]
 8006414:	f000 faa1 	bl	800695a <_realloc_r>
 8006418:	1e06      	subs	r6, r0, #0
 800641a:	d1e0      	bne.n	80063de <__ssputs_r+0x62>
 800641c:	6921      	ldr	r1, [r4, #16]
 800641e:	9802      	ldr	r0, [sp, #8]
 8006420:	f7ff ff62 	bl	80062e8 <_free_r>
 8006424:	230c      	movs	r3, #12
 8006426:	2001      	movs	r0, #1
 8006428:	9a02      	ldr	r2, [sp, #8]
 800642a:	4240      	negs	r0, r0
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	89a2      	ldrh	r2, [r4, #12]
 8006430:	3334      	adds	r3, #52	@ 0x34
 8006432:	4313      	orrs	r3, r2
 8006434:	81a3      	strh	r3, [r4, #12]
 8006436:	e7e9      	b.n	800640c <__ssputs_r+0x90>
 8006438:	fffffb7f 	.word	0xfffffb7f

0800643c <_svfiprintf_r>:
 800643c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643e:	b0a1      	sub	sp, #132	@ 0x84
 8006440:	9003      	str	r0, [sp, #12]
 8006442:	001d      	movs	r5, r3
 8006444:	898b      	ldrh	r3, [r1, #12]
 8006446:	000f      	movs	r7, r1
 8006448:	0016      	movs	r6, r2
 800644a:	061b      	lsls	r3, r3, #24
 800644c:	d511      	bpl.n	8006472 <_svfiprintf_r+0x36>
 800644e:	690b      	ldr	r3, [r1, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10e      	bne.n	8006472 <_svfiprintf_r+0x36>
 8006454:	2140      	movs	r1, #64	@ 0x40
 8006456:	f7ff fe3d 	bl	80060d4 <_malloc_r>
 800645a:	6038      	str	r0, [r7, #0]
 800645c:	6138      	str	r0, [r7, #16]
 800645e:	2800      	cmp	r0, #0
 8006460:	d105      	bne.n	800646e <_svfiprintf_r+0x32>
 8006462:	230c      	movs	r3, #12
 8006464:	9a03      	ldr	r2, [sp, #12]
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	2001      	movs	r0, #1
 800646a:	4240      	negs	r0, r0
 800646c:	e0cf      	b.n	800660e <_svfiprintf_r+0x1d2>
 800646e:	2340      	movs	r3, #64	@ 0x40
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	2300      	movs	r3, #0
 8006474:	ac08      	add	r4, sp, #32
 8006476:	6163      	str	r3, [r4, #20]
 8006478:	3320      	adds	r3, #32
 800647a:	7663      	strb	r3, [r4, #25]
 800647c:	3310      	adds	r3, #16
 800647e:	76a3      	strb	r3, [r4, #26]
 8006480:	9507      	str	r5, [sp, #28]
 8006482:	0035      	movs	r5, r6
 8006484:	782b      	ldrb	r3, [r5, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <_svfiprintf_r+0x52>
 800648a:	2b25      	cmp	r3, #37	@ 0x25
 800648c:	d148      	bne.n	8006520 <_svfiprintf_r+0xe4>
 800648e:	1bab      	subs	r3, r5, r6
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	42b5      	cmp	r5, r6
 8006494:	d00b      	beq.n	80064ae <_svfiprintf_r+0x72>
 8006496:	0032      	movs	r2, r6
 8006498:	0039      	movs	r1, r7
 800649a:	9803      	ldr	r0, [sp, #12]
 800649c:	f7ff ff6e 	bl	800637c <__ssputs_r>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d100      	bne.n	80064a6 <_svfiprintf_r+0x6a>
 80064a4:	e0ae      	b.n	8006604 <_svfiprintf_r+0x1c8>
 80064a6:	6963      	ldr	r3, [r4, #20]
 80064a8:	9a05      	ldr	r2, [sp, #20]
 80064aa:	189b      	adds	r3, r3, r2
 80064ac:	6163      	str	r3, [r4, #20]
 80064ae:	782b      	ldrb	r3, [r5, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d100      	bne.n	80064b6 <_svfiprintf_r+0x7a>
 80064b4:	e0a6      	b.n	8006604 <_svfiprintf_r+0x1c8>
 80064b6:	2201      	movs	r2, #1
 80064b8:	2300      	movs	r3, #0
 80064ba:	4252      	negs	r2, r2
 80064bc:	6062      	str	r2, [r4, #4]
 80064be:	a904      	add	r1, sp, #16
 80064c0:	3254      	adds	r2, #84	@ 0x54
 80064c2:	1852      	adds	r2, r2, r1
 80064c4:	1c6e      	adds	r6, r5, #1
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	60e3      	str	r3, [r4, #12]
 80064ca:	60a3      	str	r3, [r4, #8]
 80064cc:	7013      	strb	r3, [r2, #0]
 80064ce:	65a3      	str	r3, [r4, #88]	@ 0x58
 80064d0:	4b54      	ldr	r3, [pc, #336]	@ (8006624 <_svfiprintf_r+0x1e8>)
 80064d2:	2205      	movs	r2, #5
 80064d4:	0018      	movs	r0, r3
 80064d6:	7831      	ldrb	r1, [r6, #0]
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	f7ff fef1 	bl	80062c0 <memchr>
 80064de:	1c75      	adds	r5, r6, #1
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d11f      	bne.n	8006524 <_svfiprintf_r+0xe8>
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	06d3      	lsls	r3, r2, #27
 80064e8:	d504      	bpl.n	80064f4 <_svfiprintf_r+0xb8>
 80064ea:	2353      	movs	r3, #83	@ 0x53
 80064ec:	a904      	add	r1, sp, #16
 80064ee:	185b      	adds	r3, r3, r1
 80064f0:	2120      	movs	r1, #32
 80064f2:	7019      	strb	r1, [r3, #0]
 80064f4:	0713      	lsls	r3, r2, #28
 80064f6:	d504      	bpl.n	8006502 <_svfiprintf_r+0xc6>
 80064f8:	2353      	movs	r3, #83	@ 0x53
 80064fa:	a904      	add	r1, sp, #16
 80064fc:	185b      	adds	r3, r3, r1
 80064fe:	212b      	movs	r1, #43	@ 0x2b
 8006500:	7019      	strb	r1, [r3, #0]
 8006502:	7833      	ldrb	r3, [r6, #0]
 8006504:	2b2a      	cmp	r3, #42	@ 0x2a
 8006506:	d016      	beq.n	8006536 <_svfiprintf_r+0xfa>
 8006508:	0035      	movs	r5, r6
 800650a:	2100      	movs	r1, #0
 800650c:	200a      	movs	r0, #10
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	782a      	ldrb	r2, [r5, #0]
 8006512:	1c6e      	adds	r6, r5, #1
 8006514:	3a30      	subs	r2, #48	@ 0x30
 8006516:	2a09      	cmp	r2, #9
 8006518:	d950      	bls.n	80065bc <_svfiprintf_r+0x180>
 800651a:	2900      	cmp	r1, #0
 800651c:	d111      	bne.n	8006542 <_svfiprintf_r+0x106>
 800651e:	e017      	b.n	8006550 <_svfiprintf_r+0x114>
 8006520:	3501      	adds	r5, #1
 8006522:	e7af      	b.n	8006484 <_svfiprintf_r+0x48>
 8006524:	9b05      	ldr	r3, [sp, #20]
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	1ac0      	subs	r0, r0, r3
 800652a:	2301      	movs	r3, #1
 800652c:	4083      	lsls	r3, r0
 800652e:	4313      	orrs	r3, r2
 8006530:	002e      	movs	r6, r5
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	e7cc      	b.n	80064d0 <_svfiprintf_r+0x94>
 8006536:	9b07      	ldr	r3, [sp, #28]
 8006538:	1d19      	adds	r1, r3, #4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	9107      	str	r1, [sp, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	db01      	blt.n	8006546 <_svfiprintf_r+0x10a>
 8006542:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006544:	e004      	b.n	8006550 <_svfiprintf_r+0x114>
 8006546:	425b      	negs	r3, r3
 8006548:	60e3      	str	r3, [r4, #12]
 800654a:	2302      	movs	r3, #2
 800654c:	4313      	orrs	r3, r2
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	782b      	ldrb	r3, [r5, #0]
 8006552:	2b2e      	cmp	r3, #46	@ 0x2e
 8006554:	d10c      	bne.n	8006570 <_svfiprintf_r+0x134>
 8006556:	786b      	ldrb	r3, [r5, #1]
 8006558:	2b2a      	cmp	r3, #42	@ 0x2a
 800655a:	d134      	bne.n	80065c6 <_svfiprintf_r+0x18a>
 800655c:	9b07      	ldr	r3, [sp, #28]
 800655e:	3502      	adds	r5, #2
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	9207      	str	r2, [sp, #28]
 8006566:	2b00      	cmp	r3, #0
 8006568:	da01      	bge.n	800656e <_svfiprintf_r+0x132>
 800656a:	2301      	movs	r3, #1
 800656c:	425b      	negs	r3, r3
 800656e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006570:	4e2d      	ldr	r6, [pc, #180]	@ (8006628 <_svfiprintf_r+0x1ec>)
 8006572:	2203      	movs	r2, #3
 8006574:	0030      	movs	r0, r6
 8006576:	7829      	ldrb	r1, [r5, #0]
 8006578:	f7ff fea2 	bl	80062c0 <memchr>
 800657c:	2800      	cmp	r0, #0
 800657e:	d006      	beq.n	800658e <_svfiprintf_r+0x152>
 8006580:	2340      	movs	r3, #64	@ 0x40
 8006582:	1b80      	subs	r0, r0, r6
 8006584:	4083      	lsls	r3, r0
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	3501      	adds	r5, #1
 800658a:	4313      	orrs	r3, r2
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	7829      	ldrb	r1, [r5, #0]
 8006590:	2206      	movs	r2, #6
 8006592:	4826      	ldr	r0, [pc, #152]	@ (800662c <_svfiprintf_r+0x1f0>)
 8006594:	1c6e      	adds	r6, r5, #1
 8006596:	7621      	strb	r1, [r4, #24]
 8006598:	f7ff fe92 	bl	80062c0 <memchr>
 800659c:	2800      	cmp	r0, #0
 800659e:	d038      	beq.n	8006612 <_svfiprintf_r+0x1d6>
 80065a0:	4b23      	ldr	r3, [pc, #140]	@ (8006630 <_svfiprintf_r+0x1f4>)
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d122      	bne.n	80065ec <_svfiprintf_r+0x1b0>
 80065a6:	2207      	movs	r2, #7
 80065a8:	9b07      	ldr	r3, [sp, #28]
 80065aa:	3307      	adds	r3, #7
 80065ac:	4393      	bics	r3, r2
 80065ae:	3308      	adds	r3, #8
 80065b0:	9307      	str	r3, [sp, #28]
 80065b2:	6963      	ldr	r3, [r4, #20]
 80065b4:	9a04      	ldr	r2, [sp, #16]
 80065b6:	189b      	adds	r3, r3, r2
 80065b8:	6163      	str	r3, [r4, #20]
 80065ba:	e762      	b.n	8006482 <_svfiprintf_r+0x46>
 80065bc:	4343      	muls	r3, r0
 80065be:	0035      	movs	r5, r6
 80065c0:	2101      	movs	r1, #1
 80065c2:	189b      	adds	r3, r3, r2
 80065c4:	e7a4      	b.n	8006510 <_svfiprintf_r+0xd4>
 80065c6:	2300      	movs	r3, #0
 80065c8:	200a      	movs	r0, #10
 80065ca:	0019      	movs	r1, r3
 80065cc:	3501      	adds	r5, #1
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	782a      	ldrb	r2, [r5, #0]
 80065d2:	1c6e      	adds	r6, r5, #1
 80065d4:	3a30      	subs	r2, #48	@ 0x30
 80065d6:	2a09      	cmp	r2, #9
 80065d8:	d903      	bls.n	80065e2 <_svfiprintf_r+0x1a6>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0c8      	beq.n	8006570 <_svfiprintf_r+0x134>
 80065de:	9109      	str	r1, [sp, #36]	@ 0x24
 80065e0:	e7c6      	b.n	8006570 <_svfiprintf_r+0x134>
 80065e2:	4341      	muls	r1, r0
 80065e4:	0035      	movs	r5, r6
 80065e6:	2301      	movs	r3, #1
 80065e8:	1889      	adds	r1, r1, r2
 80065ea:	e7f1      	b.n	80065d0 <_svfiprintf_r+0x194>
 80065ec:	aa07      	add	r2, sp, #28
 80065ee:	9200      	str	r2, [sp, #0]
 80065f0:	0021      	movs	r1, r4
 80065f2:	003a      	movs	r2, r7
 80065f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006634 <_svfiprintf_r+0x1f8>)
 80065f6:	9803      	ldr	r0, [sp, #12]
 80065f8:	e000      	b.n	80065fc <_svfiprintf_r+0x1c0>
 80065fa:	bf00      	nop
 80065fc:	9004      	str	r0, [sp, #16]
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	d1d6      	bne.n	80065b2 <_svfiprintf_r+0x176>
 8006604:	89bb      	ldrh	r3, [r7, #12]
 8006606:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006608:	065b      	lsls	r3, r3, #25
 800660a:	d500      	bpl.n	800660e <_svfiprintf_r+0x1d2>
 800660c:	e72c      	b.n	8006468 <_svfiprintf_r+0x2c>
 800660e:	b021      	add	sp, #132	@ 0x84
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006612:	aa07      	add	r2, sp, #28
 8006614:	9200      	str	r2, [sp, #0]
 8006616:	0021      	movs	r1, r4
 8006618:	003a      	movs	r2, r7
 800661a:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <_svfiprintf_r+0x1f8>)
 800661c:	9803      	ldr	r0, [sp, #12]
 800661e:	f000 f87b 	bl	8006718 <_printf_i>
 8006622:	e7eb      	b.n	80065fc <_svfiprintf_r+0x1c0>
 8006624:	08006ba0 	.word	0x08006ba0
 8006628:	08006ba6 	.word	0x08006ba6
 800662c:	08006baa 	.word	0x08006baa
 8006630:	00000000 	.word	0x00000000
 8006634:	0800637d 	.word	0x0800637d

08006638 <_printf_common>:
 8006638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800663a:	0016      	movs	r6, r2
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	688a      	ldr	r2, [r1, #8]
 8006640:	690b      	ldr	r3, [r1, #16]
 8006642:	000c      	movs	r4, r1
 8006644:	9000      	str	r0, [sp, #0]
 8006646:	4293      	cmp	r3, r2
 8006648:	da00      	bge.n	800664c <_printf_common+0x14>
 800664a:	0013      	movs	r3, r2
 800664c:	0022      	movs	r2, r4
 800664e:	6033      	str	r3, [r6, #0]
 8006650:	3243      	adds	r2, #67	@ 0x43
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	2a00      	cmp	r2, #0
 8006656:	d001      	beq.n	800665c <_printf_common+0x24>
 8006658:	3301      	adds	r3, #1
 800665a:	6033      	str	r3, [r6, #0]
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	069b      	lsls	r3, r3, #26
 8006660:	d502      	bpl.n	8006668 <_printf_common+0x30>
 8006662:	6833      	ldr	r3, [r6, #0]
 8006664:	3302      	adds	r3, #2
 8006666:	6033      	str	r3, [r6, #0]
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	2306      	movs	r3, #6
 800666c:	0015      	movs	r5, r2
 800666e:	401d      	ands	r5, r3
 8006670:	421a      	tst	r2, r3
 8006672:	d027      	beq.n	80066c4 <_printf_common+0x8c>
 8006674:	0023      	movs	r3, r4
 8006676:	3343      	adds	r3, #67	@ 0x43
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	1e5a      	subs	r2, r3, #1
 800667c:	4193      	sbcs	r3, r2
 800667e:	6822      	ldr	r2, [r4, #0]
 8006680:	0692      	lsls	r2, r2, #26
 8006682:	d430      	bmi.n	80066e6 <_printf_common+0xae>
 8006684:	0022      	movs	r2, r4
 8006686:	9901      	ldr	r1, [sp, #4]
 8006688:	9800      	ldr	r0, [sp, #0]
 800668a:	9d08      	ldr	r5, [sp, #32]
 800668c:	3243      	adds	r2, #67	@ 0x43
 800668e:	47a8      	blx	r5
 8006690:	3001      	adds	r0, #1
 8006692:	d025      	beq.n	80066e0 <_printf_common+0xa8>
 8006694:	2206      	movs	r2, #6
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	2500      	movs	r5, #0
 800669a:	4013      	ands	r3, r2
 800669c:	2b04      	cmp	r3, #4
 800669e:	d105      	bne.n	80066ac <_printf_common+0x74>
 80066a0:	6833      	ldr	r3, [r6, #0]
 80066a2:	68e5      	ldr	r5, [r4, #12]
 80066a4:	1aed      	subs	r5, r5, r3
 80066a6:	43eb      	mvns	r3, r5
 80066a8:	17db      	asrs	r3, r3, #31
 80066aa:	401d      	ands	r5, r3
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	6922      	ldr	r2, [r4, #16]
 80066b0:	4293      	cmp	r3, r2
 80066b2:	dd01      	ble.n	80066b8 <_printf_common+0x80>
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	18ed      	adds	r5, r5, r3
 80066b8:	2600      	movs	r6, #0
 80066ba:	42b5      	cmp	r5, r6
 80066bc:	d120      	bne.n	8006700 <_printf_common+0xc8>
 80066be:	2000      	movs	r0, #0
 80066c0:	e010      	b.n	80066e4 <_printf_common+0xac>
 80066c2:	3501      	adds	r5, #1
 80066c4:	68e3      	ldr	r3, [r4, #12]
 80066c6:	6832      	ldr	r2, [r6, #0]
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	42ab      	cmp	r3, r5
 80066cc:	ddd2      	ble.n	8006674 <_printf_common+0x3c>
 80066ce:	0022      	movs	r2, r4
 80066d0:	2301      	movs	r3, #1
 80066d2:	9901      	ldr	r1, [sp, #4]
 80066d4:	9800      	ldr	r0, [sp, #0]
 80066d6:	9f08      	ldr	r7, [sp, #32]
 80066d8:	3219      	adds	r2, #25
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d1f0      	bne.n	80066c2 <_printf_common+0x8a>
 80066e0:	2001      	movs	r0, #1
 80066e2:	4240      	negs	r0, r0
 80066e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066e6:	2030      	movs	r0, #48	@ 0x30
 80066e8:	18e1      	adds	r1, r4, r3
 80066ea:	3143      	adds	r1, #67	@ 0x43
 80066ec:	7008      	strb	r0, [r1, #0]
 80066ee:	0021      	movs	r1, r4
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	3145      	adds	r1, #69	@ 0x45
 80066f4:	7809      	ldrb	r1, [r1, #0]
 80066f6:	18a2      	adds	r2, r4, r2
 80066f8:	3243      	adds	r2, #67	@ 0x43
 80066fa:	3302      	adds	r3, #2
 80066fc:	7011      	strb	r1, [r2, #0]
 80066fe:	e7c1      	b.n	8006684 <_printf_common+0x4c>
 8006700:	0022      	movs	r2, r4
 8006702:	2301      	movs	r3, #1
 8006704:	9901      	ldr	r1, [sp, #4]
 8006706:	9800      	ldr	r0, [sp, #0]
 8006708:	9f08      	ldr	r7, [sp, #32]
 800670a:	321a      	adds	r2, #26
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	d0e6      	beq.n	80066e0 <_printf_common+0xa8>
 8006712:	3601      	adds	r6, #1
 8006714:	e7d1      	b.n	80066ba <_printf_common+0x82>
	...

08006718 <_printf_i>:
 8006718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671a:	b08b      	sub	sp, #44	@ 0x2c
 800671c:	9206      	str	r2, [sp, #24]
 800671e:	000a      	movs	r2, r1
 8006720:	3243      	adds	r2, #67	@ 0x43
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	9005      	str	r0, [sp, #20]
 8006726:	9203      	str	r2, [sp, #12]
 8006728:	7e0a      	ldrb	r2, [r1, #24]
 800672a:	000c      	movs	r4, r1
 800672c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800672e:	2a78      	cmp	r2, #120	@ 0x78
 8006730:	d809      	bhi.n	8006746 <_printf_i+0x2e>
 8006732:	2a62      	cmp	r2, #98	@ 0x62
 8006734:	d80b      	bhi.n	800674e <_printf_i+0x36>
 8006736:	2a00      	cmp	r2, #0
 8006738:	d100      	bne.n	800673c <_printf_i+0x24>
 800673a:	e0bc      	b.n	80068b6 <_printf_i+0x19e>
 800673c:	497b      	ldr	r1, [pc, #492]	@ (800692c <_printf_i+0x214>)
 800673e:	9104      	str	r1, [sp, #16]
 8006740:	2a58      	cmp	r2, #88	@ 0x58
 8006742:	d100      	bne.n	8006746 <_printf_i+0x2e>
 8006744:	e090      	b.n	8006868 <_printf_i+0x150>
 8006746:	0025      	movs	r5, r4
 8006748:	3542      	adds	r5, #66	@ 0x42
 800674a:	702a      	strb	r2, [r5, #0]
 800674c:	e022      	b.n	8006794 <_printf_i+0x7c>
 800674e:	0010      	movs	r0, r2
 8006750:	3863      	subs	r0, #99	@ 0x63
 8006752:	2815      	cmp	r0, #21
 8006754:	d8f7      	bhi.n	8006746 <_printf_i+0x2e>
 8006756:	f7f9 fcd3 	bl	8000100 <__gnu_thumb1_case_shi>
 800675a:	0016      	.short	0x0016
 800675c:	fff6001f 	.word	0xfff6001f
 8006760:	fff6fff6 	.word	0xfff6fff6
 8006764:	001ffff6 	.word	0x001ffff6
 8006768:	fff6fff6 	.word	0xfff6fff6
 800676c:	fff6fff6 	.word	0xfff6fff6
 8006770:	003600a1 	.word	0x003600a1
 8006774:	fff60080 	.word	0xfff60080
 8006778:	00b2fff6 	.word	0x00b2fff6
 800677c:	0036fff6 	.word	0x0036fff6
 8006780:	fff6fff6 	.word	0xfff6fff6
 8006784:	0084      	.short	0x0084
 8006786:	0025      	movs	r5, r4
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	3542      	adds	r5, #66	@ 0x42
 800678c:	1d11      	adds	r1, r2, #4
 800678e:	6019      	str	r1, [r3, #0]
 8006790:	6813      	ldr	r3, [r2, #0]
 8006792:	702b      	strb	r3, [r5, #0]
 8006794:	2301      	movs	r3, #1
 8006796:	e0a0      	b.n	80068da <_printf_i+0x1c2>
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	6809      	ldr	r1, [r1, #0]
 800679c:	1d02      	adds	r2, r0, #4
 800679e:	060d      	lsls	r5, r1, #24
 80067a0:	d50b      	bpl.n	80067ba <_printf_i+0xa2>
 80067a2:	6806      	ldr	r6, [r0, #0]
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	da03      	bge.n	80067b2 <_printf_i+0x9a>
 80067aa:	232d      	movs	r3, #45	@ 0x2d
 80067ac:	9a03      	ldr	r2, [sp, #12]
 80067ae:	4276      	negs	r6, r6
 80067b0:	7013      	strb	r3, [r2, #0]
 80067b2:	4b5e      	ldr	r3, [pc, #376]	@ (800692c <_printf_i+0x214>)
 80067b4:	270a      	movs	r7, #10
 80067b6:	9304      	str	r3, [sp, #16]
 80067b8:	e018      	b.n	80067ec <_printf_i+0xd4>
 80067ba:	6806      	ldr	r6, [r0, #0]
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	0649      	lsls	r1, r1, #25
 80067c0:	d5f1      	bpl.n	80067a6 <_printf_i+0x8e>
 80067c2:	b236      	sxth	r6, r6
 80067c4:	e7ef      	b.n	80067a6 <_printf_i+0x8e>
 80067c6:	6808      	ldr	r0, [r1, #0]
 80067c8:	6819      	ldr	r1, [r3, #0]
 80067ca:	c940      	ldmia	r1!, {r6}
 80067cc:	0605      	lsls	r5, r0, #24
 80067ce:	d402      	bmi.n	80067d6 <_printf_i+0xbe>
 80067d0:	0640      	lsls	r0, r0, #25
 80067d2:	d500      	bpl.n	80067d6 <_printf_i+0xbe>
 80067d4:	b2b6      	uxth	r6, r6
 80067d6:	6019      	str	r1, [r3, #0]
 80067d8:	4b54      	ldr	r3, [pc, #336]	@ (800692c <_printf_i+0x214>)
 80067da:	270a      	movs	r7, #10
 80067dc:	9304      	str	r3, [sp, #16]
 80067de:	2a6f      	cmp	r2, #111	@ 0x6f
 80067e0:	d100      	bne.n	80067e4 <_printf_i+0xcc>
 80067e2:	3f02      	subs	r7, #2
 80067e4:	0023      	movs	r3, r4
 80067e6:	2200      	movs	r2, #0
 80067e8:	3343      	adds	r3, #67	@ 0x43
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	60a3      	str	r3, [r4, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	db03      	blt.n	80067fc <_printf_i+0xe4>
 80067f4:	2104      	movs	r1, #4
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	438a      	bics	r2, r1
 80067fa:	6022      	str	r2, [r4, #0]
 80067fc:	2e00      	cmp	r6, #0
 80067fe:	d102      	bne.n	8006806 <_printf_i+0xee>
 8006800:	9d03      	ldr	r5, [sp, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00c      	beq.n	8006820 <_printf_i+0x108>
 8006806:	9d03      	ldr	r5, [sp, #12]
 8006808:	0030      	movs	r0, r6
 800680a:	0039      	movs	r1, r7
 800680c:	f7f9 fd08 	bl	8000220 <__aeabi_uidivmod>
 8006810:	9b04      	ldr	r3, [sp, #16]
 8006812:	3d01      	subs	r5, #1
 8006814:	5c5b      	ldrb	r3, [r3, r1]
 8006816:	702b      	strb	r3, [r5, #0]
 8006818:	0033      	movs	r3, r6
 800681a:	0006      	movs	r6, r0
 800681c:	429f      	cmp	r7, r3
 800681e:	d9f3      	bls.n	8006808 <_printf_i+0xf0>
 8006820:	2f08      	cmp	r7, #8
 8006822:	d109      	bne.n	8006838 <_printf_i+0x120>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	07db      	lsls	r3, r3, #31
 8006828:	d506      	bpl.n	8006838 <_printf_i+0x120>
 800682a:	6862      	ldr	r2, [r4, #4]
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	429a      	cmp	r2, r3
 8006830:	dc02      	bgt.n	8006838 <_printf_i+0x120>
 8006832:	2330      	movs	r3, #48	@ 0x30
 8006834:	3d01      	subs	r5, #1
 8006836:	702b      	strb	r3, [r5, #0]
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	1b5b      	subs	r3, r3, r5
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	9b07      	ldr	r3, [sp, #28]
 8006840:	0021      	movs	r1, r4
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	9805      	ldr	r0, [sp, #20]
 8006846:	9b06      	ldr	r3, [sp, #24]
 8006848:	aa09      	add	r2, sp, #36	@ 0x24
 800684a:	f7ff fef5 	bl	8006638 <_printf_common>
 800684e:	3001      	adds	r0, #1
 8006850:	d148      	bne.n	80068e4 <_printf_i+0x1cc>
 8006852:	2001      	movs	r0, #1
 8006854:	4240      	negs	r0, r0
 8006856:	b00b      	add	sp, #44	@ 0x2c
 8006858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685a:	2220      	movs	r2, #32
 800685c:	6809      	ldr	r1, [r1, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	6022      	str	r2, [r4, #0]
 8006862:	2278      	movs	r2, #120	@ 0x78
 8006864:	4932      	ldr	r1, [pc, #200]	@ (8006930 <_printf_i+0x218>)
 8006866:	9104      	str	r1, [sp, #16]
 8006868:	0021      	movs	r1, r4
 800686a:	3145      	adds	r1, #69	@ 0x45
 800686c:	700a      	strb	r2, [r1, #0]
 800686e:	6819      	ldr	r1, [r3, #0]
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	c940      	ldmia	r1!, {r6}
 8006874:	0610      	lsls	r0, r2, #24
 8006876:	d402      	bmi.n	800687e <_printf_i+0x166>
 8006878:	0650      	lsls	r0, r2, #25
 800687a:	d500      	bpl.n	800687e <_printf_i+0x166>
 800687c:	b2b6      	uxth	r6, r6
 800687e:	6019      	str	r1, [r3, #0]
 8006880:	07d3      	lsls	r3, r2, #31
 8006882:	d502      	bpl.n	800688a <_printf_i+0x172>
 8006884:	2320      	movs	r3, #32
 8006886:	4313      	orrs	r3, r2
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	2e00      	cmp	r6, #0
 800688c:	d001      	beq.n	8006892 <_printf_i+0x17a>
 800688e:	2710      	movs	r7, #16
 8006890:	e7a8      	b.n	80067e4 <_printf_i+0xcc>
 8006892:	2220      	movs	r2, #32
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	4393      	bics	r3, r2
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	e7f8      	b.n	800688e <_printf_i+0x176>
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	680d      	ldr	r5, [r1, #0]
 80068a0:	1d10      	adds	r0, r2, #4
 80068a2:	6949      	ldr	r1, [r1, #20]
 80068a4:	6018      	str	r0, [r3, #0]
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	062e      	lsls	r6, r5, #24
 80068aa:	d501      	bpl.n	80068b0 <_printf_i+0x198>
 80068ac:	6019      	str	r1, [r3, #0]
 80068ae:	e002      	b.n	80068b6 <_printf_i+0x19e>
 80068b0:	066d      	lsls	r5, r5, #25
 80068b2:	d5fb      	bpl.n	80068ac <_printf_i+0x194>
 80068b4:	8019      	strh	r1, [r3, #0]
 80068b6:	2300      	movs	r3, #0
 80068b8:	9d03      	ldr	r5, [sp, #12]
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	e7bf      	b.n	800683e <_printf_i+0x126>
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	1d11      	adds	r1, r2, #4
 80068c2:	6019      	str	r1, [r3, #0]
 80068c4:	6815      	ldr	r5, [r2, #0]
 80068c6:	2100      	movs	r1, #0
 80068c8:	0028      	movs	r0, r5
 80068ca:	6862      	ldr	r2, [r4, #4]
 80068cc:	f7ff fcf8 	bl	80062c0 <memchr>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d001      	beq.n	80068d8 <_printf_i+0x1c0>
 80068d4:	1b40      	subs	r0, r0, r5
 80068d6:	6060      	str	r0, [r4, #4]
 80068d8:	6863      	ldr	r3, [r4, #4]
 80068da:	6123      	str	r3, [r4, #16]
 80068dc:	2300      	movs	r3, #0
 80068de:	9a03      	ldr	r2, [sp, #12]
 80068e0:	7013      	strb	r3, [r2, #0]
 80068e2:	e7ac      	b.n	800683e <_printf_i+0x126>
 80068e4:	002a      	movs	r2, r5
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	9906      	ldr	r1, [sp, #24]
 80068ea:	9805      	ldr	r0, [sp, #20]
 80068ec:	9d07      	ldr	r5, [sp, #28]
 80068ee:	47a8      	blx	r5
 80068f0:	3001      	adds	r0, #1
 80068f2:	d0ae      	beq.n	8006852 <_printf_i+0x13a>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	079b      	lsls	r3, r3, #30
 80068f8:	d415      	bmi.n	8006926 <_printf_i+0x20e>
 80068fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068fc:	68e0      	ldr	r0, [r4, #12]
 80068fe:	4298      	cmp	r0, r3
 8006900:	daa9      	bge.n	8006856 <_printf_i+0x13e>
 8006902:	0018      	movs	r0, r3
 8006904:	e7a7      	b.n	8006856 <_printf_i+0x13e>
 8006906:	0022      	movs	r2, r4
 8006908:	2301      	movs	r3, #1
 800690a:	9906      	ldr	r1, [sp, #24]
 800690c:	9805      	ldr	r0, [sp, #20]
 800690e:	9e07      	ldr	r6, [sp, #28]
 8006910:	3219      	adds	r2, #25
 8006912:	47b0      	blx	r6
 8006914:	3001      	adds	r0, #1
 8006916:	d09c      	beq.n	8006852 <_printf_i+0x13a>
 8006918:	3501      	adds	r5, #1
 800691a:	68e3      	ldr	r3, [r4, #12]
 800691c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	42ab      	cmp	r3, r5
 8006922:	dcf0      	bgt.n	8006906 <_printf_i+0x1ee>
 8006924:	e7e9      	b.n	80068fa <_printf_i+0x1e2>
 8006926:	2500      	movs	r5, #0
 8006928:	e7f7      	b.n	800691a <_printf_i+0x202>
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	08006bb1 	.word	0x08006bb1
 8006930:	08006bc2 	.word	0x08006bc2

08006934 <memmove>:
 8006934:	b510      	push	{r4, lr}
 8006936:	4288      	cmp	r0, r1
 8006938:	d806      	bhi.n	8006948 <memmove+0x14>
 800693a:	2300      	movs	r3, #0
 800693c:	429a      	cmp	r2, r3
 800693e:	d008      	beq.n	8006952 <memmove+0x1e>
 8006940:	5ccc      	ldrb	r4, [r1, r3]
 8006942:	54c4      	strb	r4, [r0, r3]
 8006944:	3301      	adds	r3, #1
 8006946:	e7f9      	b.n	800693c <memmove+0x8>
 8006948:	188b      	adds	r3, r1, r2
 800694a:	4298      	cmp	r0, r3
 800694c:	d2f5      	bcs.n	800693a <memmove+0x6>
 800694e:	3a01      	subs	r2, #1
 8006950:	d200      	bcs.n	8006954 <memmove+0x20>
 8006952:	bd10      	pop	{r4, pc}
 8006954:	5c8b      	ldrb	r3, [r1, r2]
 8006956:	5483      	strb	r3, [r0, r2]
 8006958:	e7f9      	b.n	800694e <memmove+0x1a>

0800695a <_realloc_r>:
 800695a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800695c:	0006      	movs	r6, r0
 800695e:	000c      	movs	r4, r1
 8006960:	0015      	movs	r5, r2
 8006962:	2900      	cmp	r1, #0
 8006964:	d105      	bne.n	8006972 <_realloc_r+0x18>
 8006966:	0011      	movs	r1, r2
 8006968:	f7ff fbb4 	bl	80060d4 <_malloc_r>
 800696c:	0004      	movs	r4, r0
 800696e:	0020      	movs	r0, r4
 8006970:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006972:	2a00      	cmp	r2, #0
 8006974:	d103      	bne.n	800697e <_realloc_r+0x24>
 8006976:	f7ff fcb7 	bl	80062e8 <_free_r>
 800697a:	2400      	movs	r4, #0
 800697c:	e7f7      	b.n	800696e <_realloc_r+0x14>
 800697e:	f000 f81b 	bl	80069b8 <_malloc_usable_size_r>
 8006982:	0007      	movs	r7, r0
 8006984:	4285      	cmp	r5, r0
 8006986:	d802      	bhi.n	800698e <_realloc_r+0x34>
 8006988:	0843      	lsrs	r3, r0, #1
 800698a:	42ab      	cmp	r3, r5
 800698c:	d3ef      	bcc.n	800696e <_realloc_r+0x14>
 800698e:	0029      	movs	r1, r5
 8006990:	0030      	movs	r0, r6
 8006992:	f7ff fb9f 	bl	80060d4 <_malloc_r>
 8006996:	9001      	str	r0, [sp, #4]
 8006998:	2800      	cmp	r0, #0
 800699a:	d0ee      	beq.n	800697a <_realloc_r+0x20>
 800699c:	002a      	movs	r2, r5
 800699e:	42bd      	cmp	r5, r7
 80069a0:	d900      	bls.n	80069a4 <_realloc_r+0x4a>
 80069a2:	003a      	movs	r2, r7
 80069a4:	0021      	movs	r1, r4
 80069a6:	9801      	ldr	r0, [sp, #4]
 80069a8:	f7ff fc95 	bl	80062d6 <memcpy>
 80069ac:	0021      	movs	r1, r4
 80069ae:	0030      	movs	r0, r6
 80069b0:	f7ff fc9a 	bl	80062e8 <_free_r>
 80069b4:	9c01      	ldr	r4, [sp, #4]
 80069b6:	e7da      	b.n	800696e <_realloc_r+0x14>

080069b8 <_malloc_usable_size_r>:
 80069b8:	1f0b      	subs	r3, r1, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	1f18      	subs	r0, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	da01      	bge.n	80069c6 <_malloc_usable_size_r+0xe>
 80069c2:	580b      	ldr	r3, [r1, r0]
 80069c4:	18c0      	adds	r0, r0, r3
 80069c6:	4770      	bx	lr

080069c8 <_init>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr

080069d4 <_fini>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	46c0      	nop			@ (mov r8, r8)
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr
