
LNA_STM32G030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005264  08005264  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005264  08005264  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005264  08005264  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800526c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  08005278  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005278  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b90  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243a  00000000  00000000  00030bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00033000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00033d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015660  00000000  00000000  00034a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f0f  00000000  00000000  0004a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087cef  00000000  00000000  0005af97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2c86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003128  00000000  00000000  000e2cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005104 	.word	0x08005104

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005104 	.word	0x08005104

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_fdiv>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	464f      	mov	r7, r9
 80003f0:	4646      	mov	r6, r8
 80003f2:	46d6      	mov	lr, sl
 80003f4:	0245      	lsls	r5, r0, #9
 80003f6:	b5c0      	push	{r6, r7, lr}
 80003f8:	0047      	lsls	r7, r0, #1
 80003fa:	1c0c      	adds	r4, r1, #0
 80003fc:	0a6d      	lsrs	r5, r5, #9
 80003fe:	0e3f      	lsrs	r7, r7, #24
 8000400:	0fc6      	lsrs	r6, r0, #31
 8000402:	2f00      	cmp	r7, #0
 8000404:	d100      	bne.n	8000408 <__aeabi_fdiv+0x1c>
 8000406:	e070      	b.n	80004ea <__aeabi_fdiv+0xfe>
 8000408:	2fff      	cmp	r7, #255	; 0xff
 800040a:	d100      	bne.n	800040e <__aeabi_fdiv+0x22>
 800040c:	e075      	b.n	80004fa <__aeabi_fdiv+0x10e>
 800040e:	00eb      	lsls	r3, r5, #3
 8000410:	2580      	movs	r5, #128	; 0x80
 8000412:	04ed      	lsls	r5, r5, #19
 8000414:	431d      	orrs	r5, r3
 8000416:	2300      	movs	r3, #0
 8000418:	4699      	mov	r9, r3
 800041a:	469a      	mov	sl, r3
 800041c:	3f7f      	subs	r7, #127	; 0x7f
 800041e:	0260      	lsls	r0, r4, #9
 8000420:	0a43      	lsrs	r3, r0, #9
 8000422:	4698      	mov	r8, r3
 8000424:	0063      	lsls	r3, r4, #1
 8000426:	0e1b      	lsrs	r3, r3, #24
 8000428:	0fe4      	lsrs	r4, r4, #31
 800042a:	2b00      	cmp	r3, #0
 800042c:	d04e      	beq.n	80004cc <__aeabi_fdiv+0xe0>
 800042e:	2bff      	cmp	r3, #255	; 0xff
 8000430:	d046      	beq.n	80004c0 <__aeabi_fdiv+0xd4>
 8000432:	4642      	mov	r2, r8
 8000434:	00d0      	lsls	r0, r2, #3
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	04d2      	lsls	r2, r2, #19
 800043a:	4302      	orrs	r2, r0
 800043c:	4690      	mov	r8, r2
 800043e:	2200      	movs	r2, #0
 8000440:	3b7f      	subs	r3, #127	; 0x7f
 8000442:	0031      	movs	r1, r6
 8000444:	1aff      	subs	r7, r7, r3
 8000446:	464b      	mov	r3, r9
 8000448:	4061      	eors	r1, r4
 800044a:	b2c9      	uxtb	r1, r1
 800044c:	4313      	orrs	r3, r2
 800044e:	2b0f      	cmp	r3, #15
 8000450:	d900      	bls.n	8000454 <__aeabi_fdiv+0x68>
 8000452:	e0b5      	b.n	80005c0 <__aeabi_fdiv+0x1d4>
 8000454:	486e      	ldr	r0, [pc, #440]	; (8000610 <__aeabi_fdiv+0x224>)
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	58c3      	ldr	r3, [r0, r3]
 800045a:	469f      	mov	pc, r3
 800045c:	2300      	movs	r3, #0
 800045e:	4698      	mov	r8, r3
 8000460:	0026      	movs	r6, r4
 8000462:	4645      	mov	r5, r8
 8000464:	4692      	mov	sl, r2
 8000466:	4653      	mov	r3, sl
 8000468:	2b02      	cmp	r3, #2
 800046a:	d100      	bne.n	800046e <__aeabi_fdiv+0x82>
 800046c:	e089      	b.n	8000582 <__aeabi_fdiv+0x196>
 800046e:	2b03      	cmp	r3, #3
 8000470:	d100      	bne.n	8000474 <__aeabi_fdiv+0x88>
 8000472:	e09e      	b.n	80005b2 <__aeabi_fdiv+0x1c6>
 8000474:	2b01      	cmp	r3, #1
 8000476:	d018      	beq.n	80004aa <__aeabi_fdiv+0xbe>
 8000478:	003b      	movs	r3, r7
 800047a:	337f      	adds	r3, #127	; 0x7f
 800047c:	2b00      	cmp	r3, #0
 800047e:	dd69      	ble.n	8000554 <__aeabi_fdiv+0x168>
 8000480:	076a      	lsls	r2, r5, #29
 8000482:	d004      	beq.n	800048e <__aeabi_fdiv+0xa2>
 8000484:	220f      	movs	r2, #15
 8000486:	402a      	ands	r2, r5
 8000488:	2a04      	cmp	r2, #4
 800048a:	d000      	beq.n	800048e <__aeabi_fdiv+0xa2>
 800048c:	3504      	adds	r5, #4
 800048e:	012a      	lsls	r2, r5, #4
 8000490:	d503      	bpl.n	800049a <__aeabi_fdiv+0xae>
 8000492:	4b60      	ldr	r3, [pc, #384]	; (8000614 <__aeabi_fdiv+0x228>)
 8000494:	401d      	ands	r5, r3
 8000496:	003b      	movs	r3, r7
 8000498:	3380      	adds	r3, #128	; 0x80
 800049a:	2bfe      	cmp	r3, #254	; 0xfe
 800049c:	dd00      	ble.n	80004a0 <__aeabi_fdiv+0xb4>
 800049e:	e070      	b.n	8000582 <__aeabi_fdiv+0x196>
 80004a0:	01ad      	lsls	r5, r5, #6
 80004a2:	0a6d      	lsrs	r5, r5, #9
 80004a4:	b2d8      	uxtb	r0, r3
 80004a6:	e002      	b.n	80004ae <__aeabi_fdiv+0xc2>
 80004a8:	000e      	movs	r6, r1
 80004aa:	2000      	movs	r0, #0
 80004ac:	2500      	movs	r5, #0
 80004ae:	05c0      	lsls	r0, r0, #23
 80004b0:	4328      	orrs	r0, r5
 80004b2:	07f6      	lsls	r6, r6, #31
 80004b4:	4330      	orrs	r0, r6
 80004b6:	bce0      	pop	{r5, r6, r7}
 80004b8:	46ba      	mov	sl, r7
 80004ba:	46b1      	mov	r9, r6
 80004bc:	46a8      	mov	r8, r5
 80004be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c0:	4643      	mov	r3, r8
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d13f      	bne.n	8000546 <__aeabi_fdiv+0x15a>
 80004c6:	2202      	movs	r2, #2
 80004c8:	3fff      	subs	r7, #255	; 0xff
 80004ca:	e003      	b.n	80004d4 <__aeabi_fdiv+0xe8>
 80004cc:	4643      	mov	r3, r8
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d12d      	bne.n	800052e <__aeabi_fdiv+0x142>
 80004d2:	2201      	movs	r2, #1
 80004d4:	0031      	movs	r1, r6
 80004d6:	464b      	mov	r3, r9
 80004d8:	4061      	eors	r1, r4
 80004da:	b2c9      	uxtb	r1, r1
 80004dc:	4313      	orrs	r3, r2
 80004de:	2b0f      	cmp	r3, #15
 80004e0:	d834      	bhi.n	800054c <__aeabi_fdiv+0x160>
 80004e2:	484d      	ldr	r0, [pc, #308]	; (8000618 <__aeabi_fdiv+0x22c>)
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	58c3      	ldr	r3, [r0, r3]
 80004e8:	469f      	mov	pc, r3
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d113      	bne.n	8000516 <__aeabi_fdiv+0x12a>
 80004ee:	2304      	movs	r3, #4
 80004f0:	4699      	mov	r9, r3
 80004f2:	3b03      	subs	r3, #3
 80004f4:	2700      	movs	r7, #0
 80004f6:	469a      	mov	sl, r3
 80004f8:	e791      	b.n	800041e <__aeabi_fdiv+0x32>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d105      	bne.n	800050a <__aeabi_fdiv+0x11e>
 80004fe:	2308      	movs	r3, #8
 8000500:	4699      	mov	r9, r3
 8000502:	3b06      	subs	r3, #6
 8000504:	27ff      	movs	r7, #255	; 0xff
 8000506:	469a      	mov	sl, r3
 8000508:	e789      	b.n	800041e <__aeabi_fdiv+0x32>
 800050a:	230c      	movs	r3, #12
 800050c:	4699      	mov	r9, r3
 800050e:	3b09      	subs	r3, #9
 8000510:	27ff      	movs	r7, #255	; 0xff
 8000512:	469a      	mov	sl, r3
 8000514:	e783      	b.n	800041e <__aeabi_fdiv+0x32>
 8000516:	0028      	movs	r0, r5
 8000518:	f000 f9e8 	bl	80008ec <__clzsi2>
 800051c:	2776      	movs	r7, #118	; 0x76
 800051e:	1f43      	subs	r3, r0, #5
 8000520:	409d      	lsls	r5, r3
 8000522:	2300      	movs	r3, #0
 8000524:	427f      	negs	r7, r7
 8000526:	4699      	mov	r9, r3
 8000528:	469a      	mov	sl, r3
 800052a:	1a3f      	subs	r7, r7, r0
 800052c:	e777      	b.n	800041e <__aeabi_fdiv+0x32>
 800052e:	4640      	mov	r0, r8
 8000530:	f000 f9dc 	bl	80008ec <__clzsi2>
 8000534:	4642      	mov	r2, r8
 8000536:	1f43      	subs	r3, r0, #5
 8000538:	409a      	lsls	r2, r3
 800053a:	2376      	movs	r3, #118	; 0x76
 800053c:	425b      	negs	r3, r3
 800053e:	4690      	mov	r8, r2
 8000540:	1a1b      	subs	r3, r3, r0
 8000542:	2200      	movs	r2, #0
 8000544:	e77d      	b.n	8000442 <__aeabi_fdiv+0x56>
 8000546:	23ff      	movs	r3, #255	; 0xff
 8000548:	2203      	movs	r2, #3
 800054a:	e77a      	b.n	8000442 <__aeabi_fdiv+0x56>
 800054c:	000e      	movs	r6, r1
 800054e:	20ff      	movs	r0, #255	; 0xff
 8000550:	2500      	movs	r5, #0
 8000552:	e7ac      	b.n	80004ae <__aeabi_fdiv+0xc2>
 8000554:	2001      	movs	r0, #1
 8000556:	1ac0      	subs	r0, r0, r3
 8000558:	281b      	cmp	r0, #27
 800055a:	dca6      	bgt.n	80004aa <__aeabi_fdiv+0xbe>
 800055c:	379e      	adds	r7, #158	; 0x9e
 800055e:	002a      	movs	r2, r5
 8000560:	40bd      	lsls	r5, r7
 8000562:	40c2      	lsrs	r2, r0
 8000564:	1e6b      	subs	r3, r5, #1
 8000566:	419d      	sbcs	r5, r3
 8000568:	4315      	orrs	r5, r2
 800056a:	076b      	lsls	r3, r5, #29
 800056c:	d004      	beq.n	8000578 <__aeabi_fdiv+0x18c>
 800056e:	230f      	movs	r3, #15
 8000570:	402b      	ands	r3, r5
 8000572:	2b04      	cmp	r3, #4
 8000574:	d000      	beq.n	8000578 <__aeabi_fdiv+0x18c>
 8000576:	3504      	adds	r5, #4
 8000578:	016b      	lsls	r3, r5, #5
 800057a:	d544      	bpl.n	8000606 <__aeabi_fdiv+0x21a>
 800057c:	2001      	movs	r0, #1
 800057e:	2500      	movs	r5, #0
 8000580:	e795      	b.n	80004ae <__aeabi_fdiv+0xc2>
 8000582:	20ff      	movs	r0, #255	; 0xff
 8000584:	2500      	movs	r5, #0
 8000586:	e792      	b.n	80004ae <__aeabi_fdiv+0xc2>
 8000588:	2580      	movs	r5, #128	; 0x80
 800058a:	2600      	movs	r6, #0
 800058c:	20ff      	movs	r0, #255	; 0xff
 800058e:	03ed      	lsls	r5, r5, #15
 8000590:	e78d      	b.n	80004ae <__aeabi_fdiv+0xc2>
 8000592:	2300      	movs	r3, #0
 8000594:	4698      	mov	r8, r3
 8000596:	2080      	movs	r0, #128	; 0x80
 8000598:	03c0      	lsls	r0, r0, #15
 800059a:	4205      	tst	r5, r0
 800059c:	d009      	beq.n	80005b2 <__aeabi_fdiv+0x1c6>
 800059e:	4643      	mov	r3, r8
 80005a0:	4203      	tst	r3, r0
 80005a2:	d106      	bne.n	80005b2 <__aeabi_fdiv+0x1c6>
 80005a4:	4645      	mov	r5, r8
 80005a6:	4305      	orrs	r5, r0
 80005a8:	026d      	lsls	r5, r5, #9
 80005aa:	0026      	movs	r6, r4
 80005ac:	20ff      	movs	r0, #255	; 0xff
 80005ae:	0a6d      	lsrs	r5, r5, #9
 80005b0:	e77d      	b.n	80004ae <__aeabi_fdiv+0xc2>
 80005b2:	2080      	movs	r0, #128	; 0x80
 80005b4:	03c0      	lsls	r0, r0, #15
 80005b6:	4305      	orrs	r5, r0
 80005b8:	026d      	lsls	r5, r5, #9
 80005ba:	20ff      	movs	r0, #255	; 0xff
 80005bc:	0a6d      	lsrs	r5, r5, #9
 80005be:	e776      	b.n	80004ae <__aeabi_fdiv+0xc2>
 80005c0:	4642      	mov	r2, r8
 80005c2:	016b      	lsls	r3, r5, #5
 80005c4:	0150      	lsls	r0, r2, #5
 80005c6:	4283      	cmp	r3, r0
 80005c8:	d219      	bcs.n	80005fe <__aeabi_fdiv+0x212>
 80005ca:	221b      	movs	r2, #27
 80005cc:	2500      	movs	r5, #0
 80005ce:	3f01      	subs	r7, #1
 80005d0:	2601      	movs	r6, #1
 80005d2:	001c      	movs	r4, r3
 80005d4:	006d      	lsls	r5, r5, #1
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	2c00      	cmp	r4, #0
 80005da:	db01      	blt.n	80005e0 <__aeabi_fdiv+0x1f4>
 80005dc:	4298      	cmp	r0, r3
 80005de:	d801      	bhi.n	80005e4 <__aeabi_fdiv+0x1f8>
 80005e0:	1a1b      	subs	r3, r3, r0
 80005e2:	4335      	orrs	r5, r6
 80005e4:	3a01      	subs	r2, #1
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	d1f3      	bne.n	80005d2 <__aeabi_fdiv+0x1e6>
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	4193      	sbcs	r3, r2
 80005ee:	431d      	orrs	r5, r3
 80005f0:	003b      	movs	r3, r7
 80005f2:	337f      	adds	r3, #127	; 0x7f
 80005f4:	000e      	movs	r6, r1
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	dd00      	ble.n	80005fc <__aeabi_fdiv+0x210>
 80005fa:	e741      	b.n	8000480 <__aeabi_fdiv+0x94>
 80005fc:	e7aa      	b.n	8000554 <__aeabi_fdiv+0x168>
 80005fe:	221a      	movs	r2, #26
 8000600:	2501      	movs	r5, #1
 8000602:	1a1b      	subs	r3, r3, r0
 8000604:	e7e4      	b.n	80005d0 <__aeabi_fdiv+0x1e4>
 8000606:	01ad      	lsls	r5, r5, #6
 8000608:	2000      	movs	r0, #0
 800060a:	0a6d      	lsrs	r5, r5, #9
 800060c:	e74f      	b.n	80004ae <__aeabi_fdiv+0xc2>
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	0800511c 	.word	0x0800511c
 8000614:	f7ffffff 	.word	0xf7ffffff
 8000618:	0800515c 	.word	0x0800515c

0800061c <__aeabi_fmul>:
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	464f      	mov	r7, r9
 8000620:	4646      	mov	r6, r8
 8000622:	46d6      	mov	lr, sl
 8000624:	0244      	lsls	r4, r0, #9
 8000626:	0045      	lsls	r5, r0, #1
 8000628:	b5c0      	push	{r6, r7, lr}
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	1c0f      	adds	r7, r1, #0
 800062e:	0e2d      	lsrs	r5, r5, #24
 8000630:	0fc6      	lsrs	r6, r0, #31
 8000632:	2d00      	cmp	r5, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_fmul+0x1c>
 8000636:	e08d      	b.n	8000754 <__aeabi_fmul+0x138>
 8000638:	2dff      	cmp	r5, #255	; 0xff
 800063a:	d100      	bne.n	800063e <__aeabi_fmul+0x22>
 800063c:	e092      	b.n	8000764 <__aeabi_fmul+0x148>
 800063e:	2300      	movs	r3, #0
 8000640:	2080      	movs	r0, #128	; 0x80
 8000642:	4699      	mov	r9, r3
 8000644:	469a      	mov	sl, r3
 8000646:	00e4      	lsls	r4, r4, #3
 8000648:	04c0      	lsls	r0, r0, #19
 800064a:	4304      	orrs	r4, r0
 800064c:	3d7f      	subs	r5, #127	; 0x7f
 800064e:	0278      	lsls	r0, r7, #9
 8000650:	0a43      	lsrs	r3, r0, #9
 8000652:	4698      	mov	r8, r3
 8000654:	007b      	lsls	r3, r7, #1
 8000656:	0e1b      	lsrs	r3, r3, #24
 8000658:	0fff      	lsrs	r7, r7, #31
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_fmul+0x44>
 800065e:	e070      	b.n	8000742 <__aeabi_fmul+0x126>
 8000660:	2bff      	cmp	r3, #255	; 0xff
 8000662:	d100      	bne.n	8000666 <__aeabi_fmul+0x4a>
 8000664:	e086      	b.n	8000774 <__aeabi_fmul+0x158>
 8000666:	4642      	mov	r2, r8
 8000668:	00d0      	lsls	r0, r2, #3
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	3b7f      	subs	r3, #127	; 0x7f
 800066e:	18ed      	adds	r5, r5, r3
 8000670:	2300      	movs	r3, #0
 8000672:	04d2      	lsls	r2, r2, #19
 8000674:	4302      	orrs	r2, r0
 8000676:	4690      	mov	r8, r2
 8000678:	469c      	mov	ip, r3
 800067a:	0031      	movs	r1, r6
 800067c:	464b      	mov	r3, r9
 800067e:	4079      	eors	r1, r7
 8000680:	1c68      	adds	r0, r5, #1
 8000682:	2b0f      	cmp	r3, #15
 8000684:	d81c      	bhi.n	80006c0 <__aeabi_fmul+0xa4>
 8000686:	4a76      	ldr	r2, [pc, #472]	; (8000860 <__aeabi_fmul+0x244>)
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	58d3      	ldr	r3, [r2, r3]
 800068c:	469f      	mov	pc, r3
 800068e:	0039      	movs	r1, r7
 8000690:	4644      	mov	r4, r8
 8000692:	46e2      	mov	sl, ip
 8000694:	4653      	mov	r3, sl
 8000696:	2b02      	cmp	r3, #2
 8000698:	d00f      	beq.n	80006ba <__aeabi_fmul+0x9e>
 800069a:	2b03      	cmp	r3, #3
 800069c:	d100      	bne.n	80006a0 <__aeabi_fmul+0x84>
 800069e:	e0d7      	b.n	8000850 <__aeabi_fmul+0x234>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d137      	bne.n	8000714 <__aeabi_fmul+0xf8>
 80006a4:	2000      	movs	r0, #0
 80006a6:	2400      	movs	r4, #0
 80006a8:	05c0      	lsls	r0, r0, #23
 80006aa:	4320      	orrs	r0, r4
 80006ac:	07c9      	lsls	r1, r1, #31
 80006ae:	4308      	orrs	r0, r1
 80006b0:	bce0      	pop	{r5, r6, r7}
 80006b2:	46ba      	mov	sl, r7
 80006b4:	46b1      	mov	r9, r6
 80006b6:	46a8      	mov	r8, r5
 80006b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ba:	20ff      	movs	r0, #255	; 0xff
 80006bc:	2400      	movs	r4, #0
 80006be:	e7f3      	b.n	80006a8 <__aeabi_fmul+0x8c>
 80006c0:	0c26      	lsrs	r6, r4, #16
 80006c2:	0424      	lsls	r4, r4, #16
 80006c4:	0c22      	lsrs	r2, r4, #16
 80006c6:	4644      	mov	r4, r8
 80006c8:	0424      	lsls	r4, r4, #16
 80006ca:	0c24      	lsrs	r4, r4, #16
 80006cc:	4643      	mov	r3, r8
 80006ce:	0027      	movs	r7, r4
 80006d0:	0c1b      	lsrs	r3, r3, #16
 80006d2:	4357      	muls	r7, r2
 80006d4:	4374      	muls	r4, r6
 80006d6:	435a      	muls	r2, r3
 80006d8:	435e      	muls	r6, r3
 80006da:	1912      	adds	r2, r2, r4
 80006dc:	0c3b      	lsrs	r3, r7, #16
 80006de:	189b      	adds	r3, r3, r2
 80006e0:	429c      	cmp	r4, r3
 80006e2:	d903      	bls.n	80006ec <__aeabi_fmul+0xd0>
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0252      	lsls	r2, r2, #9
 80006e8:	4694      	mov	ip, r2
 80006ea:	4466      	add	r6, ip
 80006ec:	043f      	lsls	r7, r7, #16
 80006ee:	041a      	lsls	r2, r3, #16
 80006f0:	0c3f      	lsrs	r7, r7, #16
 80006f2:	19d2      	adds	r2, r2, r7
 80006f4:	0194      	lsls	r4, r2, #6
 80006f6:	1e67      	subs	r7, r4, #1
 80006f8:	41bc      	sbcs	r4, r7
 80006fa:	0c1b      	lsrs	r3, r3, #16
 80006fc:	0e92      	lsrs	r2, r2, #26
 80006fe:	199b      	adds	r3, r3, r6
 8000700:	4314      	orrs	r4, r2
 8000702:	019b      	lsls	r3, r3, #6
 8000704:	431c      	orrs	r4, r3
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	d400      	bmi.n	800070c <__aeabi_fmul+0xf0>
 800070a:	e09b      	b.n	8000844 <__aeabi_fmul+0x228>
 800070c:	2301      	movs	r3, #1
 800070e:	0862      	lsrs	r2, r4, #1
 8000710:	401c      	ands	r4, r3
 8000712:	4314      	orrs	r4, r2
 8000714:	0002      	movs	r2, r0
 8000716:	327f      	adds	r2, #127	; 0x7f
 8000718:	2a00      	cmp	r2, #0
 800071a:	dd64      	ble.n	80007e6 <__aeabi_fmul+0x1ca>
 800071c:	0763      	lsls	r3, r4, #29
 800071e:	d004      	beq.n	800072a <__aeabi_fmul+0x10e>
 8000720:	230f      	movs	r3, #15
 8000722:	4023      	ands	r3, r4
 8000724:	2b04      	cmp	r3, #4
 8000726:	d000      	beq.n	800072a <__aeabi_fmul+0x10e>
 8000728:	3404      	adds	r4, #4
 800072a:	0123      	lsls	r3, r4, #4
 800072c:	d503      	bpl.n	8000736 <__aeabi_fmul+0x11a>
 800072e:	0002      	movs	r2, r0
 8000730:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <__aeabi_fmul+0x248>)
 8000732:	3280      	adds	r2, #128	; 0x80
 8000734:	401c      	ands	r4, r3
 8000736:	2afe      	cmp	r2, #254	; 0xfe
 8000738:	dcbf      	bgt.n	80006ba <__aeabi_fmul+0x9e>
 800073a:	01a4      	lsls	r4, r4, #6
 800073c:	0a64      	lsrs	r4, r4, #9
 800073e:	b2d0      	uxtb	r0, r2
 8000740:	e7b2      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000742:	4643      	mov	r3, r8
 8000744:	2b00      	cmp	r3, #0
 8000746:	d13d      	bne.n	80007c4 <__aeabi_fmul+0x1a8>
 8000748:	464a      	mov	r2, r9
 800074a:	3301      	adds	r3, #1
 800074c:	431a      	orrs	r2, r3
 800074e:	4691      	mov	r9, r2
 8000750:	469c      	mov	ip, r3
 8000752:	e792      	b.n	800067a <__aeabi_fmul+0x5e>
 8000754:	2c00      	cmp	r4, #0
 8000756:	d129      	bne.n	80007ac <__aeabi_fmul+0x190>
 8000758:	2304      	movs	r3, #4
 800075a:	4699      	mov	r9, r3
 800075c:	3b03      	subs	r3, #3
 800075e:	2500      	movs	r5, #0
 8000760:	469a      	mov	sl, r3
 8000762:	e774      	b.n	800064e <__aeabi_fmul+0x32>
 8000764:	2c00      	cmp	r4, #0
 8000766:	d11b      	bne.n	80007a0 <__aeabi_fmul+0x184>
 8000768:	2308      	movs	r3, #8
 800076a:	4699      	mov	r9, r3
 800076c:	3b06      	subs	r3, #6
 800076e:	25ff      	movs	r5, #255	; 0xff
 8000770:	469a      	mov	sl, r3
 8000772:	e76c      	b.n	800064e <__aeabi_fmul+0x32>
 8000774:	4643      	mov	r3, r8
 8000776:	35ff      	adds	r5, #255	; 0xff
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <__aeabi_fmul+0x178>
 800077c:	2302      	movs	r3, #2
 800077e:	464a      	mov	r2, r9
 8000780:	431a      	orrs	r2, r3
 8000782:	4691      	mov	r9, r2
 8000784:	469c      	mov	ip, r3
 8000786:	e778      	b.n	800067a <__aeabi_fmul+0x5e>
 8000788:	4653      	mov	r3, sl
 800078a:	0031      	movs	r1, r6
 800078c:	2b02      	cmp	r3, #2
 800078e:	d000      	beq.n	8000792 <__aeabi_fmul+0x176>
 8000790:	e783      	b.n	800069a <__aeabi_fmul+0x7e>
 8000792:	e792      	b.n	80006ba <__aeabi_fmul+0x9e>
 8000794:	2303      	movs	r3, #3
 8000796:	464a      	mov	r2, r9
 8000798:	431a      	orrs	r2, r3
 800079a:	4691      	mov	r9, r2
 800079c:	469c      	mov	ip, r3
 800079e:	e76c      	b.n	800067a <__aeabi_fmul+0x5e>
 80007a0:	230c      	movs	r3, #12
 80007a2:	4699      	mov	r9, r3
 80007a4:	3b09      	subs	r3, #9
 80007a6:	25ff      	movs	r5, #255	; 0xff
 80007a8:	469a      	mov	sl, r3
 80007aa:	e750      	b.n	800064e <__aeabi_fmul+0x32>
 80007ac:	0020      	movs	r0, r4
 80007ae:	f000 f89d 	bl	80008ec <__clzsi2>
 80007b2:	2576      	movs	r5, #118	; 0x76
 80007b4:	1f43      	subs	r3, r0, #5
 80007b6:	409c      	lsls	r4, r3
 80007b8:	2300      	movs	r3, #0
 80007ba:	426d      	negs	r5, r5
 80007bc:	4699      	mov	r9, r3
 80007be:	469a      	mov	sl, r3
 80007c0:	1a2d      	subs	r5, r5, r0
 80007c2:	e744      	b.n	800064e <__aeabi_fmul+0x32>
 80007c4:	4640      	mov	r0, r8
 80007c6:	f000 f891 	bl	80008ec <__clzsi2>
 80007ca:	4642      	mov	r2, r8
 80007cc:	1f43      	subs	r3, r0, #5
 80007ce:	409a      	lsls	r2, r3
 80007d0:	2300      	movs	r3, #0
 80007d2:	1a2d      	subs	r5, r5, r0
 80007d4:	4690      	mov	r8, r2
 80007d6:	469c      	mov	ip, r3
 80007d8:	3d76      	subs	r5, #118	; 0x76
 80007da:	e74e      	b.n	800067a <__aeabi_fmul+0x5e>
 80007dc:	2480      	movs	r4, #128	; 0x80
 80007de:	2100      	movs	r1, #0
 80007e0:	20ff      	movs	r0, #255	; 0xff
 80007e2:	03e4      	lsls	r4, r4, #15
 80007e4:	e760      	b.n	80006a8 <__aeabi_fmul+0x8c>
 80007e6:	2301      	movs	r3, #1
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	2b1b      	cmp	r3, #27
 80007ec:	dd00      	ble.n	80007f0 <__aeabi_fmul+0x1d4>
 80007ee:	e759      	b.n	80006a4 <__aeabi_fmul+0x88>
 80007f0:	0022      	movs	r2, r4
 80007f2:	309e      	adds	r0, #158	; 0x9e
 80007f4:	40da      	lsrs	r2, r3
 80007f6:	4084      	lsls	r4, r0
 80007f8:	0013      	movs	r3, r2
 80007fa:	1e62      	subs	r2, r4, #1
 80007fc:	4194      	sbcs	r4, r2
 80007fe:	431c      	orrs	r4, r3
 8000800:	0763      	lsls	r3, r4, #29
 8000802:	d004      	beq.n	800080e <__aeabi_fmul+0x1f2>
 8000804:	230f      	movs	r3, #15
 8000806:	4023      	ands	r3, r4
 8000808:	2b04      	cmp	r3, #4
 800080a:	d000      	beq.n	800080e <__aeabi_fmul+0x1f2>
 800080c:	3404      	adds	r4, #4
 800080e:	0163      	lsls	r3, r4, #5
 8000810:	d51a      	bpl.n	8000848 <__aeabi_fmul+0x22c>
 8000812:	2001      	movs	r0, #1
 8000814:	2400      	movs	r4, #0
 8000816:	e747      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000818:	2080      	movs	r0, #128	; 0x80
 800081a:	03c0      	lsls	r0, r0, #15
 800081c:	4204      	tst	r4, r0
 800081e:	d009      	beq.n	8000834 <__aeabi_fmul+0x218>
 8000820:	4643      	mov	r3, r8
 8000822:	4203      	tst	r3, r0
 8000824:	d106      	bne.n	8000834 <__aeabi_fmul+0x218>
 8000826:	4644      	mov	r4, r8
 8000828:	4304      	orrs	r4, r0
 800082a:	0264      	lsls	r4, r4, #9
 800082c:	0039      	movs	r1, r7
 800082e:	20ff      	movs	r0, #255	; 0xff
 8000830:	0a64      	lsrs	r4, r4, #9
 8000832:	e739      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	03c0      	lsls	r0, r0, #15
 8000838:	4304      	orrs	r4, r0
 800083a:	0264      	lsls	r4, r4, #9
 800083c:	0031      	movs	r1, r6
 800083e:	20ff      	movs	r0, #255	; 0xff
 8000840:	0a64      	lsrs	r4, r4, #9
 8000842:	e731      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000844:	0028      	movs	r0, r5
 8000846:	e765      	b.n	8000714 <__aeabi_fmul+0xf8>
 8000848:	01a4      	lsls	r4, r4, #6
 800084a:	2000      	movs	r0, #0
 800084c:	0a64      	lsrs	r4, r4, #9
 800084e:	e72b      	b.n	80006a8 <__aeabi_fmul+0x8c>
 8000850:	2080      	movs	r0, #128	; 0x80
 8000852:	03c0      	lsls	r0, r0, #15
 8000854:	4304      	orrs	r4, r0
 8000856:	0264      	lsls	r4, r4, #9
 8000858:	20ff      	movs	r0, #255	; 0xff
 800085a:	0a64      	lsrs	r4, r4, #9
 800085c:	e724      	b.n	80006a8 <__aeabi_fmul+0x8c>
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	0800519c 	.word	0x0800519c
 8000864:	f7ffffff 	.word	0xf7ffffff

08000868 <__aeabi_ui2f>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	1e05      	subs	r5, r0, #0
 800086c:	d00e      	beq.n	800088c <__aeabi_ui2f+0x24>
 800086e:	f000 f83d 	bl	80008ec <__clzsi2>
 8000872:	239e      	movs	r3, #158	; 0x9e
 8000874:	0004      	movs	r4, r0
 8000876:	1a1b      	subs	r3, r3, r0
 8000878:	2b96      	cmp	r3, #150	; 0x96
 800087a:	dc0c      	bgt.n	8000896 <__aeabi_ui2f+0x2e>
 800087c:	2808      	cmp	r0, #8
 800087e:	dd01      	ble.n	8000884 <__aeabi_ui2f+0x1c>
 8000880:	3c08      	subs	r4, #8
 8000882:	40a5      	lsls	r5, r4
 8000884:	026d      	lsls	r5, r5, #9
 8000886:	0a6d      	lsrs	r5, r5, #9
 8000888:	b2d8      	uxtb	r0, r3
 800088a:	e001      	b.n	8000890 <__aeabi_ui2f+0x28>
 800088c:	2000      	movs	r0, #0
 800088e:	2500      	movs	r5, #0
 8000890:	05c0      	lsls	r0, r0, #23
 8000892:	4328      	orrs	r0, r5
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	2b99      	cmp	r3, #153	; 0x99
 8000898:	dd09      	ble.n	80008ae <__aeabi_ui2f+0x46>
 800089a:	0002      	movs	r2, r0
 800089c:	0029      	movs	r1, r5
 800089e:	321b      	adds	r2, #27
 80008a0:	4091      	lsls	r1, r2
 80008a2:	1e4a      	subs	r2, r1, #1
 80008a4:	4191      	sbcs	r1, r2
 80008a6:	2205      	movs	r2, #5
 80008a8:	1a12      	subs	r2, r2, r0
 80008aa:	40d5      	lsrs	r5, r2
 80008ac:	430d      	orrs	r5, r1
 80008ae:	2c05      	cmp	r4, #5
 80008b0:	dc12      	bgt.n	80008d8 <__aeabi_ui2f+0x70>
 80008b2:	0029      	movs	r1, r5
 80008b4:	4e0c      	ldr	r6, [pc, #48]	; (80008e8 <__aeabi_ui2f+0x80>)
 80008b6:	4031      	ands	r1, r6
 80008b8:	076a      	lsls	r2, r5, #29
 80008ba:	d009      	beq.n	80008d0 <__aeabi_ui2f+0x68>
 80008bc:	200f      	movs	r0, #15
 80008be:	4028      	ands	r0, r5
 80008c0:	2804      	cmp	r0, #4
 80008c2:	d005      	beq.n	80008d0 <__aeabi_ui2f+0x68>
 80008c4:	3104      	adds	r1, #4
 80008c6:	014a      	lsls	r2, r1, #5
 80008c8:	d502      	bpl.n	80008d0 <__aeabi_ui2f+0x68>
 80008ca:	239f      	movs	r3, #159	; 0x9f
 80008cc:	4031      	ands	r1, r6
 80008ce:	1b1b      	subs	r3, r3, r4
 80008d0:	0189      	lsls	r1, r1, #6
 80008d2:	0a4d      	lsrs	r5, r1, #9
 80008d4:	b2d8      	uxtb	r0, r3
 80008d6:	e7db      	b.n	8000890 <__aeabi_ui2f+0x28>
 80008d8:	1f62      	subs	r2, r4, #5
 80008da:	4095      	lsls	r5, r2
 80008dc:	0029      	movs	r1, r5
 80008de:	4e02      	ldr	r6, [pc, #8]	; (80008e8 <__aeabi_ui2f+0x80>)
 80008e0:	4031      	ands	r1, r6
 80008e2:	076a      	lsls	r2, r5, #29
 80008e4:	d0f4      	beq.n	80008d0 <__aeabi_ui2f+0x68>
 80008e6:	e7e9      	b.n	80008bc <__aeabi_ui2f+0x54>
 80008e8:	fbffffff 	.word	0xfbffffff

080008ec <__clzsi2>:
 80008ec:	211c      	movs	r1, #28
 80008ee:	2301      	movs	r3, #1
 80008f0:	041b      	lsls	r3, r3, #16
 80008f2:	4298      	cmp	r0, r3
 80008f4:	d301      	bcc.n	80008fa <__clzsi2+0xe>
 80008f6:	0c00      	lsrs	r0, r0, #16
 80008f8:	3910      	subs	r1, #16
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	4298      	cmp	r0, r3
 80008fe:	d301      	bcc.n	8000904 <__clzsi2+0x18>
 8000900:	0a00      	lsrs	r0, r0, #8
 8000902:	3908      	subs	r1, #8
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	4298      	cmp	r0, r3
 8000908:	d301      	bcc.n	800090e <__clzsi2+0x22>
 800090a:	0900      	lsrs	r0, r0, #4
 800090c:	3904      	subs	r1, #4
 800090e:	a202      	add	r2, pc, #8	; (adr r2, 8000918 <__clzsi2+0x2c>)
 8000910:	5c10      	ldrb	r0, [r2, r0]
 8000912:	1840      	adds	r0, r0, r1
 8000914:	4770      	bx	lr
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	02020304 	.word	0x02020304
 800091c:	01010101 	.word	0x01010101
	...

08000928 <HAL_ADC_ConvCpltCallback>:
const int adcChannelCount = sizeof(adcResultsDMA) / sizeof(adcResultsDMA[0]);
volatile int adcConversionComplete = 0;

char txBuf[TXBUFLEN];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	// Conversion Complete & DMA Transfer Complete As Well
	// So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
	// Update The PWM Duty Cycle With Latest ADC Conversion Result
	adcConversionComplete = 1;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_ADC_ConvCpltCallback+0x18>)
 8000932:	2201      	movs	r2, #1
 8000934:	601a      	str	r2, [r3, #0]
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	2000025c 	.word	0x2000025c

08000944 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	// Conversion Complete & DMA Transfer Complete As Well
	// So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
	// Update The PWM Duty Cycle With Latest ADC Conversion Result
	adcConversionComplete = 1;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_ADC_ErrorCallback+0x18>)
 800094e:	2201      	movs	r2, #1
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	2000025c 	.word	0x2000025c

08000960 <get_crc_calc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t get_crc_calc(uint8_t buffer[], uint8_t buff_len) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	000a      	movs	r2, r1
 800096a:	1cfb      	adds	r3, r7, #3
 800096c:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 800096e:	230a      	movs	r3, #10
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <get_crc_calc+0xc0>)
 8000974:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 8000976:	230c      	movs	r3, #12
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	2200      	movs	r2, #0
 800097c:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 800097e:	230f      	movs	r3, #15
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	e03d      	b.n	8000a04 <get_crc_calc+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8000988:	230f      	movs	r3, #15
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	18d3      	adds	r3, r2, r3
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b29b      	uxth	r3, r3
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	b299      	uxth	r1, r3
 800099a:	220c      	movs	r2, #12
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	18ba      	adds	r2, r7, r2
 80009a0:	8812      	ldrh	r2, [r2, #0]
 80009a2:	404a      	eors	r2, r1
 80009a4:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < 8; i++) {
 80009a6:	230e      	movs	r3, #14
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e01e      	b.n	80009ee <get_crc_calc+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 80009b0:	210c      	movs	r1, #12
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	5e9b      	ldrsh	r3, [r3, r2]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	da0c      	bge.n	80009d6 <get_crc_calc+0x76>
					{
				crc = ((uint16_t) ((crc << 1) ^ generator));
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	230a      	movs	r3, #10
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	2000      	movs	r0, #0
 80009ca:	5e1b      	ldrsh	r3, [r3, r0]
 80009cc:	4053      	eors	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	801a      	strh	r2, [r3, #0]
 80009d4:	e005      	b.n	80009e2 <get_crc_calc+0x82>
			} else {
				crc <<= 1;
 80009d6:	230c      	movs	r3, #12
 80009d8:	18fa      	adds	r2, r7, r3
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	18db      	adds	r3, r3, r3
 80009e0:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 80009e2:	210e      	movs	r1, #14
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	3201      	adds	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	230e      	movs	r3, #14
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b07      	cmp	r3, #7
 80009f6:	d9db      	bls.n	80009b0 <get_crc_calc+0x50>
	for (b = 0; b < buff_len; b++) {
 80009f8:	210f      	movs	r1, #15
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	3201      	adds	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	230f      	movs	r3, #15
 8000a06:	18fa      	adds	r2, r7, r3
 8000a08:	1cfb      	adds	r3, r7, #3
 8000a0a:	7812      	ldrb	r2, [r2, #0]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d3ba      	bcc.n	8000988 <get_crc_calc+0x28>
			}
		}
	}

	return crc;
 8000a12:	230c      	movs	r3, #12
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	881b      	ldrh	r3, [r3, #0]
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b004      	add	sp, #16
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	00001021 	.word	0x00001021

08000a24 <HAL_UART_RxCpltCallback>:

//---------[ UART Data Reception Completion CallBackFunc. ]---------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	data_arrive = 1;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_UART_RxCpltCallback+0x18>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
//HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 20);
}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	20000260 	.word	0x20000260

08000a40 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
//	data_arrive = 1;
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <set_lna_attenuation>:
		crc_valid = 0;
	}
	return crc_valid;;
}

void set_lna_attenuation(uint8_t attenuation, uint8_t times) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0002      	movs	r2, r0
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	1dbb      	adds	r3, r7, #6
 8000a5e:	1c0a      	adds	r2, r1, #0
 8000a60:	701a      	strb	r2, [r3, #0]
	attenuation *= 2;
 8000a62:	1dfa      	adds	r2, r7, #7
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	18db      	adds	r3, r3, r3
 8000a6a:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < times; i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	e056      	b.n	8000b20 <set_lna_attenuation+0xd0>
		uint8_t mask = 0b00100000;
 8000a72:	230b      	movs	r3, #11
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	2220      	movs	r2, #32
 8000a78:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 6; i++) {
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e034      	b.n	8000aee <set_lna_attenuation+0x9e>
			//Ciclo for de 6 vueltas para enviar los 6bits de configuración
			if (mask & attenuation) {
 8000a84:	230b      	movs	r3, #11
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	1dfa      	adds	r2, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d007      	beq.n	8000aa6 <set_lna_attenuation+0x56>
				//Si el bit de la mascara en 1 coincide con el bit del valor, entonces
				HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin data en alto
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f002 fa60 	bl	8002f64 <HAL_GPIO_WritePin>
 8000aa4:	e006      	b.n	8000ab4 <set_lna_attenuation+0x64>
			} else {
				//Sino,
				HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin data en bajo
 8000aa6:	23a0      	movs	r3, #160	; 0xa0
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2120      	movs	r1, #32
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f002 fa58 	bl	8002f64 <HAL_GPIO_WritePin>
			}
			HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin clock en alto
 8000ab4:	23a0      	movs	r3, #160	; 0xa0
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2110      	movs	r1, #16
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 fa51 	bl	8002f64 <HAL_GPIO_WritePin>
			HAL_Delay(1); //Delay de 1mS
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 ff06 	bl	80018d4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin clock en bajo
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	2200      	movs	r2, #0
 8000ace:	2110      	movs	r1, #16
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 fa47 	bl	8002f64 <HAL_GPIO_WritePin>
			mask = mask >> 1; //Muevo la máscara una posición
 8000ad6:	220b      	movs	r2, #11
 8000ad8:	18bb      	adds	r3, r7, r2
 8000ada:	18ba      	adds	r2, r7, r2
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	0852      	lsrs	r2, r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 6; i++) {
 8000ae2:	210a      	movs	r1, #10
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	3201      	adds	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	230a      	movs	r3, #10
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	d9c5      	bls.n	8000a84 <set_lna_attenuation+0x34>
		}
		HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin LE en alto
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	2201      	movs	r2, #1
 8000afe:	2102      	movs	r1, #2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f002 fa2f 	bl	8002f64 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 fee4 	bl	80018d4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin LE en bajo
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2200      	movs	r2, #0
 8000b12:	2102      	movs	r1, #2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 fa25 	bl	8002f64 <HAL_GPIO_WritePin>
	for (int i = 0; i < times; i++) {
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	1dbb      	adds	r3, r7, #6
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dba3      	blt.n	8000a72 <set_lna_attenuation+0x22>
	}

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b004      	add	sp, #16
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <create_lna_frame>:

void create_lna_frame(uint8_t *frame, struct Lna lna) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	6019      	str	r1, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]

	uint8_t crc_frame[2];
	frame[0] = START_MARK;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	227e      	movs	r2, #126	; 0x7e
 8000b46:	701a      	strb	r2, [r3, #0]
	frame[1] = LNA_MODULE_FUNCTION;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	2209      	movs	r2, #9
 8000b4e:	701a      	strb	r2, [r3, #0]
	frame[2] = LNA_MODULE_ADDR;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3302      	adds	r3, #2
 8000b54:	2208      	movs	r2, #8
 8000b56:	701a      	strb	r2, [r3, #0]
	frame[3] = PARAM_QUERY_ID;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3303      	adds	r3, #3
 8000b5c:	2211      	movs	r2, #17
 8000b5e:	701a      	strb	r2, [r3, #0]
	frame[4] = 0x00;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3304      	adds	r3, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
	frame[5] = 0x05;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3305      	adds	r3, #5
 8000b6c:	2205      	movs	r2, #5
 8000b6e:	701a      	strb	r2, [r3, #0]
	frame[6] = 0x00;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3306      	adds	r3, #6
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
	frame[7] = lna.attenuation;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3307      	adds	r3, #7
 8000b7c:	1d3a      	adds	r2, r7, #4
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	701a      	strb	r2, [r3, #0]
	frame[8] = lna.gain;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3308      	adds	r3, #8
 8000b86:	1d3a      	adds	r2, r7, #4
 8000b88:	7852      	ldrb	r2, [r2, #1]
 8000b8a:	701a      	strb	r2, [r3, #0]
	frame[9] = lna.pout;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3309      	adds	r3, #9
 8000b90:	1d3a      	adds	r2, r7, #4
 8000b92:	7892      	ldrb	r2, [r2, #2]
 8000b94:	701a      	strb	r2, [r3, #0]
	frame[10] = lna.pout;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	330a      	adds	r3, #10
 8000b9a:	1d3a      	adds	r2, r7, #4
 8000b9c:	7892      	ldrb	r2, [r2, #2]
 8000b9e:	701a      	strb	r2, [r3, #0]
	uint16_t crc = get_crc_calc(&(frame[1]), 10);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	210a      	movs	r1, #10
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff feda 	bl	8000960 <get_crc_calc>
 8000bac:	0003      	movs	r3, r0
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2012      	movs	r0, #18
 8000bb2:	183b      	adds	r3, r7, r0
 8000bb4:	801a      	strh	r2, [r3, #0]
	memcpy(crc_frame, &crc, 2);
 8000bb6:	2114      	movs	r1, #20
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	183a      	adds	r2, r7, r0
 8000bbc:	8812      	ldrh	r2, [r2, #0]
 8000bbe:	801a      	strh	r2, [r3, #0]
	frame[11] = crc_frame[0];
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	330b      	adds	r3, #11
 8000bc4:	187a      	adds	r2, r7, r1
 8000bc6:	7812      	ldrb	r2, [r2, #0]
 8000bc8:	701a      	strb	r2, [r3, #0]
	frame[12] = crc_frame[1];
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	330c      	adds	r3, #12
 8000bce:	187a      	adds	r2, r7, r1
 8000bd0:	7852      	ldrb	r2, [r2, #1]
 8000bd2:	701a      	strb	r2, [r3, #0]
	frame[13] = END_MARK;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	330d      	adds	r3, #13
 8000bd8:	227f      	movs	r2, #127	; 0x7f
 8000bda:	701a      	strb	r2, [r3, #0]

}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b006      	add	sp, #24
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <uart_send_frame>:

void uart_send_frame(uint8_t *frame, uint8_t len) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	000a      	movs	r2, r1
 8000bee:	1cfb      	adds	r3, r7, #3
 8000bf0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DE_Pin, GPIO_PIN_SET);
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	0219      	lsls	r1, r3, #8
 8000bf6:	23a0      	movs	r3, #160	; 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f002 f9b1 	bl	8002f64 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f000 fe66 	bl	80018d4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, frame,len, 100);
 8000c08:	1cfb      	adds	r3, r7, #3
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <uart_send_frame+0x54>)
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	f003 f97a 	bl	8003f0c <HAL_UART_Transmit>
	HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f000 fe5b 	bl	80018d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, DE_Pin, GPIO_PIN_RESET);
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	0219      	lsls	r1, r3, #8
 8000c22:	23a0      	movs	r3, #160	; 0xa0
 8000c24:	05db      	lsls	r3, r3, #23
 8000c26:	2200      	movs	r2, #0
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f002 f99b 	bl	8002f64 <HAL_GPIO_WritePin>

}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	200000d8 	.word	0x200000d8

08000c3c <get_valid_start_index>:

uint8_t get_valid_start_index(uint8_t UART1_rxBuffer[20]) {
 8000c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	uint8_t start_index = -1;
 8000c44:	230f      	movs	r3, #15
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	22ff      	movs	r2, #255	; 0xff
 8000c4a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RX_UART1_BUFFLEN - MINIMUN_FRAME_SIZE; i++) {
 8000c4c:	230e      	movs	r3, #14
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e06d      	b.n	8000d32 <get_valid_start_index+0xf6>
		if (start_index == (uint8_t) -1) {
 8000c56:	230f      	movs	r3, #15
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2bff      	cmp	r3, #255	; 0xff
 8000c5e:	d11c      	bne.n	8000c9a <get_valid_start_index+0x5e>
			if (UART1_rxBuffer[i] == (uint8_t) START_MARK)
 8000c60:	210e      	movs	r1, #14
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	18d3      	adds	r3, r2, r3
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b7e      	cmp	r3, #126	; 0x7e
 8000c6e:	d10f      	bne.n	8000c90 <get_valid_start_index+0x54>
				start_index =
						UART1_rxBuffer[i + 1] == LNA_MODULE_FUNCTION ? i : -1;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	781b      	ldrb	r3, [r3, #0]
				start_index =
 8000c7c:	2b09      	cmp	r3, #9
 8000c7e:	d102      	bne.n	8000c86 <get_valid_start_index+0x4a>
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	e000      	b.n	8000c88 <get_valid_start_index+0x4c>
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	230f      	movs	r3, #15
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	e04a      	b.n	8000d26 <get_valid_start_index+0xea>
			else
				start_index = -1;
 8000c90:	230f      	movs	r3, #15
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	22ff      	movs	r2, #255	; 0xff
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	e045      	b.n	8000d26 <get_valid_start_index+0xea>
		} else {
			// if(start_index > 0 )
			if (UART1_rxBuffer[i] == (uint8_t) END_MARK) {
 8000c9a:	250e      	movs	r5, #14
 8000c9c:	197b      	adds	r3, r7, r5
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	18d3      	adds	r3, r2, r3
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ca8:	d13d      	bne.n	8000d26 <get_valid_start_index+0xea>
				if (i > MINIMUN_FRAME_SIZE) {
 8000caa:	197b      	adds	r3, r7, r5
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b07      	cmp	r3, #7
 8000cb0:	d939      	bls.n	8000d26 <get_valid_start_index+0xea>
					uint16_t crc_rcv;
					uint16_t crc_calc;
					uint8_t data_start_index = start_index + 1;
 8000cb2:	210d      	movs	r1, #13
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	260f      	movs	r6, #15
 8000cb8:	19ba      	adds	r2, r7, r6
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	3201      	adds	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
					crc_calc = get_crc_calc(&(UART1_rxBuffer[data_start_index]),
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	18d0      	adds	r0, r2, r3
							i - data_start_index - 2);
 8000cc8:	197a      	adds	r2, r7, r5
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	b2db      	uxtb	r3, r3
					crc_calc = get_crc_calc(&(UART1_rxBuffer[data_start_index]),
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	220a      	movs	r2, #10
 8000cda:	18bc      	adds	r4, r7, r2
 8000cdc:	0019      	movs	r1, r3
 8000cde:	f7ff fe3f 	bl	8000960 <get_crc_calc>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	8023      	strh	r3, [r4, #0]
					crc_rcv = UART1_rxBuffer[i - 1] << 8
 8000ce6:	197b      	adds	r3, r7, r5
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	18d3      	adds	r3, r2, r3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	021b      	lsls	r3, r3, #8
							| UART1_rxBuffer[i - 2];
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	197b      	adds	r3, r7, r5
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	18cb      	adds	r3, r1, r3
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b21a      	sxth	r2, r3
					crc_rcv = UART1_rxBuffer[i - 1] << 8
 8000d08:	2108      	movs	r1, #8
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	801a      	strh	r2, [r3, #0]
					return crc_calc == crc_rcv ? start_index : -1;
 8000d0e:	220a      	movs	r2, #10
 8000d10:	18ba      	adds	r2, r7, r2
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	8812      	ldrh	r2, [r2, #0]
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d102      	bne.n	8000d22 <get_valid_start_index+0xe6>
 8000d1c:	19bb      	adds	r3, r7, r6
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	e00d      	b.n	8000d3e <get_valid_start_index+0x102>
 8000d22:	23ff      	movs	r3, #255	; 0xff
 8000d24:	e00b      	b.n	8000d3e <get_valid_start_index+0x102>
	for (uint8_t i = 0; i < RX_UART1_BUFFLEN - MINIMUN_FRAME_SIZE; i++) {
 8000d26:	210e      	movs	r1, #14
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	3201      	adds	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	230e      	movs	r3, #14
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b0c      	cmp	r3, #12
 8000d3a:	d98c      	bls.n	8000c56 <get_valid_start_index+0x1a>
			// end if endmark}
			// end if startmark}

		}
	}
	return -1;
 8000d3c:	23ff      	movs	r3, #255	; 0xff
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b005      	add	sp, #20
 8000d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000d48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b08d      	sub	sp, #52	; 0x34
 8000d4c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d4e:	f000 fd3b 	bl	80017c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d52:	f000 f8e7 	bl	8000f24 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	MX_DMA_Init();
 8000d56:	f000 fa91 	bl	800127c <MX_DMA_Init>
	MX_GPIO_Init();
 8000d5a:	f000 fab5 	bl	80012c8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d5e:	f000 f93b 	bl	8000fd8 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000d62:	f000 f9c9 	bl	80010f8 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000d66:	f000 fa07 	bl	8001178 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000d6a:	f000 fa53 	bl	8001214 <MX_USART2_UART_Init>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d6e:	f000 faab 	bl	80012c8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d72:	f000 f931 	bl	8000fd8 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000d76:	f000 f9bf 	bl	80010f8 <MX_I2C1_Init>
	MX_DMA_Init();
 8000d7a:	f000 fa7f 	bl	800127c <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000d7e:	f000 f9fb 	bl	8001178 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000d82:	f000 fa47 	bl	8001214 <MX_USART2_UART_Init>
	uint32_t last_ticker;
	uint32_t current_ticker;

	struct Lna lna;

	uint8_t UART1_rxBuffer[20] = { 0 };
 8000d86:	2310      	movs	r3, #16
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	3304      	adds	r3, #4
 8000d90:	2210      	movs	r2, #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	0018      	movs	r0, r3
 8000d96:	f004 f9ad 	bl	80050f4 <memset>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 3);
 8000d9a:	495c      	ldr	r1, [pc, #368]	; (8000f0c <main+0x1c4>)
 8000d9c:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <main+0x1c8>)
 8000d9e:	2203      	movs	r2, #3
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 f8c9 	bl	8001f38 <HAL_ADC_Start_DMA>
		//Fin function 1 second
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, RX_UART1_BUFFLEN);
 8000da6:	2310      	movs	r3, #16
 8000da8:	18f9      	adds	r1, r7, r3
 8000daa:	4b5a      	ldr	r3, [pc, #360]	; (8000f14 <main+0x1cc>)
 8000dac:	2214      	movs	r2, #20
 8000dae:	0018      	movs	r0, r3
 8000db0:	f003 f957 	bl	8004062 <HAL_UART_Receive_DMA>

		uint8_t bytes_readed = RX_UART1_BUFFLEN
				- (huart1.hdmarx->Instance->CNDTR);
 8000db4:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <main+0x1cc>)
 8000db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	b2da      	uxtb	r2, r3
		uint8_t bytes_readed = RX_UART1_BUFFLEN
 8000dbe:	202f      	movs	r0, #47	; 0x2f
 8000dc0:	183b      	adds	r3, r7, r0
 8000dc2:	2114      	movs	r1, #20
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	701a      	strb	r2, [r3, #0]

		if (data_arrive || bytes_readed > MINIMUN_FRAME_SIZE) {
 8000dc8:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <main+0x1d0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d103      	bne.n	8000dd8 <main+0x90>
 8000dd0:	183b      	adds	r3, r7, r0
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b07      	cmp	r3, #7
 8000dd6:	d96a      	bls.n	8000eae <main+0x166>
			HAL_UART_DMAPause(&huart1);
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	; (8000f14 <main+0x1cc>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f003 f9a4 	bl	8004128 <HAL_UART_DMAPause>
			huart1.hdmarx->Instance->CCR &= ~DMA_CCR_EN; // disable
 8000de0:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <main+0x1cc>)
 8000de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <main+0x1cc>)
 8000dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2101      	movs	r1, #1
 8000df0:	438a      	bics	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
			huart1.hdmarx->Instance->CNDTR = 20; // reset lna_attenuation
 8000df4:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <main+0x1cc>)
 8000df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2214      	movs	r2, #20
 8000dfc:	605a      	str	r2, [r3, #4]
			huart1.hdmarx->Instance->CCR |= DMA_CCR_EN; // re-enable
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <main+0x1cc>)
 8000e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <main+0x1cc>)
 8000e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	601a      	str	r2, [r3, #0]

			data_arrive = 0;
 8000e12:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <main+0x1d0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
			uint8_t start_index = get_valid_start_index(UART1_rxBuffer);
 8000e18:	252e      	movs	r5, #46	; 0x2e
 8000e1a:	197c      	adds	r4, r7, r5
 8000e1c:	2610      	movs	r6, #16
 8000e1e:	19bb      	adds	r3, r7, r6
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff ff0b 	bl	8000c3c <get_valid_start_index>
 8000e26:	0003      	movs	r3, r0
 8000e28:	7023      	strb	r3, [r4, #0]

			if (start_index != (uint8_t) -1) {
 8000e2a:	0029      	movs	r1, r5
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2bff      	cmp	r3, #255	; 0xff
 8000e32:	d038      	beq.n	8000ea6 <main+0x15e>
				if (UART1_rxBuffer[start_index + 1] == LNA_MODULE_FUNCTION) {
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	19ba      	adds	r2, r7, r6
 8000e3c:	5cd3      	ldrb	r3, [r2, r3]
 8000e3e:	2b09      	cmp	r3, #9
 8000e40:	d12d      	bne.n	8000e9e <main+0x156>
					if (UART1_rxBuffer[start_index + 3] == PARAM_QUERY_ID) {
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3303      	adds	r3, #3
 8000e48:	19ba      	adds	r2, r7, r6
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	2b11      	cmp	r3, #17
 8000e4e:	d10c      	bne.n	8000e6a <main+0x122>
						uint8_t ltel_frame[14];
						create_lna_frame(ltel_frame, lna);
 8000e50:	2324      	movs	r3, #36	; 0x24
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	0038      	movs	r0, r7
 8000e56:	6819      	ldr	r1, [r3, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	f7ff fe6b 	bl	8000b34 <create_lna_frame>
						uart_send_frame(ltel_frame,14);
 8000e5e:	003b      	movs	r3, r7
 8000e60:	210e      	movs	r1, #14
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff febe 	bl	8000be4 <uart_send_frame>
 8000e68:	e019      	b.n	8000e9e <main+0x156>
					} else if (UART1_rxBuffer[start_index + 3] == SET_ATT_ID) {
 8000e6a:	212e      	movs	r1, #46	; 0x2e
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	3303      	adds	r3, #3
 8000e72:	2010      	movs	r0, #16
 8000e74:	183a      	adds	r2, r7, r0
 8000e76:	5cd3      	ldrb	r3, [r2, r3]
 8000e78:	2b20      	cmp	r3, #32
 8000e7a:	d110      	bne.n	8000e9e <main+0x156>
						lna.attenuation = UART1_rxBuffer[start_index + 6];
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	3306      	adds	r3, #6
 8000e82:	183a      	adds	r2, r7, r0
 8000e84:	5cd2      	ldrb	r2, [r2, r3]
 8000e86:	2424      	movs	r4, #36	; 0x24
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	701a      	strb	r2, [r3, #0]
						HAL_Delay(1); //Delay de 1mS
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f000 fd21 	bl	80018d4 <HAL_Delay>
						set_lna_attenuation(lna.attenuation, 3);
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2103      	movs	r1, #3
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff fdd9 	bl	8000a50 <set_lna_attenuation>
					}
				}
				start_index = -1;
 8000e9e:	232e      	movs	r3, #46	; 0x2e
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	22ff      	movs	r2, #255	; 0xff
 8000ea4:	701a      	strb	r2, [r3, #0]
			} else {


			}

			HAL_UART_DMAResume(&huart1);
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <main+0x1cc>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f003 f9d7 	bl	800425c <HAL_UART_DMAResume>

		}

		if (adcConversionComplete == 1) {
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <main+0x1d4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d11f      	bne.n	8000ef6 <main+0x1ae>
			lna.pout = adcResultsDMA[0];
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <main+0x1c4>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	2424      	movs	r4, #36	; 0x24
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	709a      	strb	r2, [r3, #2]
			lna.current = LNA_MULTIPLIER * (float) adcResultsDMA[1] / 4096.0f;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <main+0x1c4>)
 8000ec6:	885b      	ldrh	r3, [r3, #2]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff fccc 	bl	8000868 <__aeabi_ui2f>
 8000ed0:	1c03      	adds	r3, r0, #0
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <main+0x1d8>)
 8000ed4:	1c11      	adds	r1, r2, #0
 8000ed6:	1c18      	adds	r0, r3, #0
 8000ed8:	f7ff fba0 	bl	800061c <__aeabi_fmul>
 8000edc:	1c03      	adds	r3, r0, #0
 8000ede:	218b      	movs	r1, #139	; 0x8b
 8000ee0:	05c9      	lsls	r1, r1, #23
 8000ee2:	1c18      	adds	r0, r3, #0
 8000ee4:	f7ff fa82 	bl	80003ec <__aeabi_fdiv>
 8000ee8:	1c03      	adds	r3, r0, #0
 8000eea:	1c1a      	adds	r2, r3, #0
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	605a      	str	r2, [r3, #4]
			adcConversionComplete = 0;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <main+0x1d4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
		}

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 3);
 8000ef6:	4905      	ldr	r1, [pc, #20]	; (8000f0c <main+0x1c4>)
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <main+0x1c8>)
 8000efa:	2203      	movs	r2, #3
 8000efc:	0018      	movs	r0, r3
 8000efe:	f001 f81b 	bl	8001f38 <HAL_ADC_Start_DMA>
		HAL_Delay(10);
 8000f02:	200a      	movs	r0, #10
 8000f04:	f000 fce6 	bl	80018d4 <HAL_Delay>
	while (1) {
 8000f08:	e74d      	b.n	8000da6 <main+0x5e>
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20000254 	.word	0x20000254
 8000f10:	20000028 	.word	0x20000028
 8000f14:	200000d8 	.word	0x200000d8
 8000f18:	20000260 	.word	0x20000260
 8000f1c:	2000025c 	.word	0x2000025c
 8000f20:	43951746 	.word	0x43951746

08000f24 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b093      	sub	sp, #76	; 0x4c
 8000f28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f2a:	2414      	movs	r4, #20
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	0018      	movs	r0, r3
 8000f30:	2334      	movs	r3, #52	; 0x34
 8000f32:	001a      	movs	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f004 f8dd 	bl	80050f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	2310      	movs	r3, #16
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	f004 f8d6 	bl	80050f4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f002 f955 	bl	80031fc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	2202      	movs	r2, #2
 8000f56:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	0052      	lsls	r2, r2, #1
 8000f5e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f60:	0021      	movs	r1, r4
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2240      	movs	r2, #64	; 0x40
 8000f6c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2202      	movs	r2, #2
 8000f72:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2202      	movs	r2, #2
 8000f78:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2210      	movs	r2, #16
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	0292      	lsls	r2, r2, #10
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	0592      	lsls	r2, r2, #22
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f002 f97b 	bl	8003294 <HAL_RCC_OscConfig>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x82>
		Error_Handler();
 8000fa2:	f000 f9f1 	bl	8001388 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2202      	movs	r2, #2
 8000fb0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f002 fc7c 	bl	80038c0 <HAL_RCC_ClockConfig>
 8000fc8:	1e03      	subs	r3, r0, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0xac>
		Error_Handler();
 8000fcc:	f000 f9dc 	bl	8001388 <Error_Handler>
	}
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b013      	add	sp, #76	; 0x4c
 8000fd6:	bd90      	pop	{r4, r7, pc}

08000fd8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	f004 f884 	bl	80050f4 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000fec:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <MX_ADC1_Init+0x110>)
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <MX_ADC1_Init+0x114>)
 8000ff0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <MX_ADC1_Init+0x110>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	05d2      	lsls	r2, r2, #23
 8000ff8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <MX_ADC1_Init+0x110>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	0392      	lsls	r2, r2, #14
 800100c:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001010:	2208      	movs	r2, #8
 8001012:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001016:	2200      	movs	r2, #0
 8001018:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_ADC1_Init+0x110>)
 800101c:	2200      	movs	r2, #0
 800101e:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001022:	2200      	movs	r2, #0
 8001024:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 3;
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001028:	2203      	movs	r2, #3
 800102a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <MX_ADC1_Init+0x110>)
 800102e:	2220      	movs	r2, #32
 8001030:	2101      	movs	r1, #1
 8001032:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_ADC1_Init+0x110>)
 800103c:	2200      	movs	r2, #0
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001042:	222c      	movs	r2, #44	; 0x2c
 8001044:	2101      	movs	r1, #1
 8001046:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_ADC1_Init+0x110>)
 800104a:	2200      	movs	r2, #0
 800104c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001050:	2203      	movs	r2, #3
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001056:	2203      	movs	r2, #3
 8001058:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_ADC1_Init+0x110>)
 800105c:	223c      	movs	r2, #60	; 0x3c
 800105e:	2100      	movs	r1, #0
 8001060:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001064:	2200      	movs	r2, #0
 8001066:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_ADC1_Init+0x110>)
 800106a:	0018      	movs	r0, r3
 800106c:	f000 fd86 	bl	8001b7c <HAL_ADC_Init>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0xa0>
		Error_Handler();
 8001074:	f000 f988 	bl	8001388 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800108a:	1d3a      	adds	r2, r7, #4
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_ADC1_Init+0x110>)
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f000 ffe7 	bl	8002064 <HAL_ADC_ConfigChannel>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0xc6>
		Error_Handler();
 800109a:	f000 f975 	bl	8001388 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <MX_ADC1_Init+0x118>)
 80010a2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2204      	movs	r2, #4
 80010a8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010aa:	1d3a      	adds	r2, r7, #4
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_ADC1_Init+0x110>)
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 ffd7 	bl	8002064 <HAL_ADC_ConfigChannel>
 80010b6:	1e03      	subs	r3, r0, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0xe6>
		Error_Handler();
 80010ba:	f000 f965 	bl	8001388 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <MX_ADC1_Init+0x11c>)
 80010c2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2208      	movs	r2, #8
 80010c8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010ca:	1d3a      	adds	r2, r7, #4
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_ADC1_Init+0x110>)
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f000 ffc7 	bl	8002064 <HAL_ADC_ConfigChannel>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0x106>
		Error_Handler();
 80010da:	f000 f955 	bl	8001388 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	20000028 	.word	0x20000028
 80010ec:	40012400 	.word	0x40012400
 80010f0:	18000040 	.word	0x18000040
 80010f4:	20000100 	.word	0x20000100

080010f8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_I2C1_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <MX_I2C1_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10707DBC;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_I2C1_Init+0x74>)
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <MX_I2C1_Init+0x7c>)
 8001106:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_I2C1_Init+0x74>)
 8001110:	2201      	movs	r2, #1
 8001112:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_I2C1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_I2C1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_I2C1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_I2C1_Init+0x74>)
 8001134:	0018      	movs	r0, r3
 8001136:	f001 ff33 	bl	8002fa0 <HAL_I2C_Init>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800113e:	f000 f923 	bl	8001388 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_I2C1_Init+0x74>)
 8001144:	2100      	movs	r1, #0
 8001146:	0018      	movs	r0, r3
 8001148:	f001 ffc0 	bl	80030cc <HAL_I2CEx_ConfigAnalogFilter>
 800114c:	1e03      	subs	r3, r0, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001150:	f000 f91a 	bl	8001388 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <MX_I2C1_Init+0x74>)
 8001156:	2100      	movs	r1, #0
 8001158:	0018      	movs	r0, r3
 800115a:	f002 f803 	bl	8003164 <HAL_I2CEx_ConfigDigitalFilter>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d001      	beq.n	8001166 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001162:	f000 f911 	bl	8001388 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000008c 	.word	0x2000008c
 8001170:	40005400 	.word	0x40005400
 8001174:	10707dbc 	.word	0x10707dbc

08001178 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <MX_USART1_UART_Init+0x94>)
 800117e:	4a24      	ldr	r2, [pc, #144]	; (8001210 <MX_USART1_UART_Init+0x98>)
 8001180:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 19200;
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_USART1_UART_Init+0x94>)
 8001184:	2296      	movs	r2, #150	; 0x96
 8001186:	01d2      	lsls	r2, r2, #7
 8001188:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <MX_USART1_UART_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_USART1_UART_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_USART1_UART_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_USART1_UART_Init+0x94>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_USART1_UART_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_USART1_UART_Init+0x94>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_USART1_UART_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_USART1_UART_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_USART1_UART_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_USART1_UART_Init+0x94>)
 80011c2:	0018      	movs	r0, r3
 80011c4:	f002 fe4c 	bl	8003e60 <HAL_UART_Init>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 80011cc:	f000 f8dc 	bl	8001388 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART1_UART_Init+0x94>)
 80011d2:	2100      	movs	r1, #0
 80011d4:	0018      	movs	r0, r3
 80011d6:	f003 fe89 	bl	8004eec <HAL_UARTEx_SetTxFifoThreshold>
 80011da:	1e03      	subs	r3, r0, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80011de:	f000 f8d3 	bl	8001388 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <MX_USART1_UART_Init+0x94>)
 80011e4:	2100      	movs	r1, #0
 80011e6:	0018      	movs	r0, r3
 80011e8:	f003 fec0 	bl	8004f6c <HAL_UARTEx_SetRxFifoThreshold>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80011f0:	f000 f8ca 	bl	8001388 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <MX_USART1_UART_Init+0x94>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f003 fe3e 	bl	8004e78 <HAL_UARTEx_DisableFifoMode>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001200:	f000 f8c2 	bl	8001388 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	200000d8 	.word	0x200000d8
 8001210:	40013800 	.word	0x40013800

08001214 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_USART2_UART_Init+0x60>)
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <MX_USART2_UART_Init+0x64>)
 800121c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_USART2_UART_Init+0x60>)
 8001220:	22e1      	movs	r2, #225	; 0xe1
 8001222:	0252      	lsls	r2, r2, #9
 8001224:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_USART2_UART_Init+0x60>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART2_UART_Init+0x60>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART2_UART_Init+0x60>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART2_UART_Init+0x60>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_USART2_UART_Init+0x60>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART2_UART_Init+0x60>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_USART2_UART_Init+0x60>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART2_UART_Init+0x60>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_USART2_UART_Init+0x60>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <MX_USART2_UART_Init+0x60>)
 800125e:	0018      	movs	r0, r3
 8001260:	f002 fdfe 	bl	8003e60 <HAL_UART_Init>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8001268:	f000 f88e 	bl	8001388 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	20000168 	.word	0x20000168
 8001278:	40004400 	.word	0x40004400

0800127c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_DMA_Init+0x48>)
 8001284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_DMA_Init+0x48>)
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MX_DMA_Init+0x48>)
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	2201      	movs	r2, #1
 8001294:	4013      	ands	r3, r2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2009      	movs	r0, #9
 80012a0:	f001 fa78 	bl	8002794 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012a4:	2009      	movs	r0, #9
 80012a6:	f001 fa8a 	bl	80027be <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	200a      	movs	r0, #10
 80012b0:	f001 fa70 	bl	8002794 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80012b4:	200a      	movs	r0, #10
 80012b6:	f001 fa82 	bl	80027be <HAL_NVIC_EnableIRQ>

}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b002      	add	sp, #8
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	40021000 	.word	0x40021000

080012c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012ce:	240c      	movs	r4, #12
 80012d0:	193b      	adds	r3, r7, r4
 80012d2:	0018      	movs	r0, r3
 80012d4:	2314      	movs	r3, #20
 80012d6:	001a      	movs	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	f003 ff0b 	bl	80050f4 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <MX_GPIO_Init+0xb4>)
 80012e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <MX_GPIO_Init+0xb4>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <MX_GPIO_Init+0xb4>)
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	2201      	movs	r2, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <MX_GPIO_Init+0xb4>)
 80012f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <MX_GPIO_Init+0xb4>)
 80012fc:	2102      	movs	r1, #2
 80012fe:	430a      	orrs	r2, r1
 8001300:	635a      	str	r2, [r3, #52]	; 0x34
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <MX_GPIO_Init+0xb4>)
 8001304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001306:	2202      	movs	r2, #2
 8001308:	4013      	ands	r3, r2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800130e:	491c      	ldr	r1, [pc, #112]	; (8001380 <MX_GPIO_Init+0xb8>)
 8001310:	23a0      	movs	r3, #160	; 0xa0
 8001312:	05db      	lsls	r3, r3, #23
 8001314:	2200      	movs	r2, #0
 8001316:	0018      	movs	r0, r3
 8001318:	f001 fe24 	bl	8002f64 <HAL_GPIO_WritePin>
			LE_ATTENUATOR_Pin | CLK_ATTENUATOR_Pin | DATA_ATTENUATOR_Pin
					| DE_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_GPIO_Init+0xbc>)
 800131e:	2200      	movs	r2, #0
 8001320:	2102      	movs	r1, #2
 8001322:	0018      	movs	r0, r3
 8001324:	f001 fe1e 	bl	8002f64 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LE_ATTENUATOR_Pin CLK_ATTENUATOR_Pin DATA_ATTENUATOR_Pin DE_Pin */
	GPIO_InitStruct.Pin = LE_ATTENUATOR_Pin | CLK_ATTENUATOR_Pin
 8001328:	193b      	adds	r3, r7, r4
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <MX_GPIO_Init+0xb8>)
 800132c:	601a      	str	r2, [r3, #0]
			| DATA_ATTENUATOR_Pin | DE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	193b      	adds	r3, r7, r4
 8001330:	2201      	movs	r2, #1
 8001332:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	193b      	adds	r3, r7, r4
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	193b      	adds	r3, r7, r4
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	193a      	adds	r2, r7, r4
 8001342:	23a0      	movs	r3, #160	; 0xa0
 8001344:	05db      	lsls	r3, r3, #23
 8001346:	0011      	movs	r1, r2
 8001348:	0018      	movs	r0, r3
 800134a:	f001 fca7 	bl	8002c9c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800134e:	0021      	movs	r1, r4
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2202      	movs	r2, #2
 8001354:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2201      	movs	r2, #1
 800135a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001368:	187b      	adds	r3, r7, r1
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <MX_GPIO_Init+0xbc>)
 800136c:	0019      	movs	r1, r3
 800136e:	0010      	movs	r0, r2
 8001370:	f001 fc94 	bl	8002c9c <HAL_GPIO_Init>

}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b009      	add	sp, #36	; 0x24
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	00008032 	.word	0x00008032
 8001384:	50000400 	.word	0x50000400

08001388 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
	...

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_MspInit+0x44>)
 800139c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_MspInit+0x44>)
 80013a0:	2101      	movs	r1, #1
 80013a2:	430a      	orrs	r2, r1
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_MspInit+0x44>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	2201      	movs	r2, #1
 80013ac:	4013      	ands	r3, r2
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_MspInit+0x44>)
 80013b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_MspInit+0x44>)
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	0549      	lsls	r1, r1, #21
 80013bc:	430a      	orrs	r2, r1
 80013be:	63da      	str	r2, [r3, #60]	; 0x3c
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_MspInit+0x44>)
 80013c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	055b      	lsls	r3, r3, #21
 80013c8:	4013      	ands	r3, r2
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b002      	add	sp, #8
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b091      	sub	sp, #68	; 0x44
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	232c      	movs	r3, #44	; 0x2c
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	0018      	movs	r0, r3
 80013ea:	2314      	movs	r3, #20
 80013ec:	001a      	movs	r2, r3
 80013ee:	2100      	movs	r1, #0
 80013f0:	f003 fe80 	bl	80050f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	2414      	movs	r4, #20
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	0018      	movs	r0, r3
 80013fa:	2318      	movs	r3, #24
 80013fc:	001a      	movs	r2, r3
 80013fe:	2100      	movs	r1, #0
 8001400:	f003 fe78 	bl	80050f4 <memset>
  if(hadc->Instance==ADC1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a2d      	ldr	r2, [pc, #180]	; (80014c0 <HAL_ADC_MspInit+0xe4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d154      	bne.n	80014b8 <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800140e:	193b      	adds	r3, r7, r4
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	01d2      	lsls	r2, r2, #7
 8001414:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001416:	193b      	adds	r3, r7, r4
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141c:	193b      	adds	r3, r7, r4
 800141e:	0018      	movs	r0, r3
 8001420:	f002 fbf8 	bl	8003c14 <HAL_RCCEx_PeriphCLKConfig>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d001      	beq.n	800142c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001428:	f7ff ffae 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 800142e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	0349      	lsls	r1, r1, #13
 8001436:	430a      	orrs	r2, r1
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 800143c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	035b      	lsls	r3, r3, #13
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 800144a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	2201      	movs	r2, #1
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 8001462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 8001466:	2102      	movs	r1, #2
 8001468:	430a      	orrs	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_ADC_MspInit+0xe8>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	2202      	movs	r2, #2
 8001472:	4013      	ands	r3, r2
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Pout_Volt_Pin|Current_Volt_Pin;
 8001478:	242c      	movs	r4, #44	; 0x2c
 800147a:	193b      	adds	r3, r7, r4
 800147c:	2241      	movs	r2, #65	; 0x41
 800147e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001480:	193b      	adds	r3, r7, r4
 8001482:	2203      	movs	r2, #3
 8001484:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	193b      	adds	r3, r7, r4
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	193a      	adds	r2, r7, r4
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	0011      	movs	r1, r2
 8001494:	0018      	movs	r0, r3
 8001496:	f001 fc01 	bl	8002c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AGC_Volt_Pin;
 800149a:	193b      	adds	r3, r7, r4
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a0:	193b      	adds	r3, r7, r4
 80014a2:	2203      	movs	r2, #3
 80014a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AGC_Volt_GPIO_Port, &GPIO_InitStruct);
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_ADC_MspInit+0xec>)
 80014b0:	0019      	movs	r1, r3
 80014b2:	0010      	movs	r0, r2
 80014b4:	f001 fbf2 	bl	8002c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b011      	add	sp, #68	; 0x44
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	40012400 	.word	0x40012400
 80014c4:	40021000 	.word	0x40021000
 80014c8:	50000400 	.word	0x50000400

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b091      	sub	sp, #68	; 0x44
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	232c      	movs	r3, #44	; 0x2c
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	0018      	movs	r0, r3
 80014da:	2314      	movs	r3, #20
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f003 fe08 	bl	80050f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e4:	2414      	movs	r4, #20
 80014e6:	193b      	adds	r3, r7, r4
 80014e8:	0018      	movs	r0, r3
 80014ea:	2318      	movs	r3, #24
 80014ec:	001a      	movs	r2, r3
 80014ee:	2100      	movs	r1, #0
 80014f0:	f003 fe00 	bl	80050f4 <memset>
  if(hi2c->Instance==I2C1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a22      	ldr	r2, [pc, #136]	; (8001584 <HAL_I2C_MspInit+0xb8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d13e      	bne.n	800157c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	2220      	movs	r2, #32
 8001502:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001504:	193b      	adds	r3, r7, r4
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150a:	193b      	adds	r3, r7, r4
 800150c:	0018      	movs	r0, r3
 800150e:	f002 fb81 	bl	8003c14 <HAL_RCCEx_PeriphCLKConfig>
 8001512:	1e03      	subs	r3, r0, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001516:	f7ff ff37 	bl	8001388 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 800151c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 8001520:	2102      	movs	r1, #2
 8001522:	430a      	orrs	r2, r1
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 8001528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	187b      	adds	r3, r7, r1
 8001536:	22c0      	movs	r2, #192	; 0xc0
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153c:	187b      	adds	r3, r7, r1
 800153e:	2212      	movs	r2, #18
 8001540:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	187b      	adds	r3, r7, r1
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	187b      	adds	r3, r7, r1
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800154e:	187b      	adds	r3, r7, r1
 8001550:	2206      	movs	r2, #6
 8001552:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	187b      	adds	r3, r7, r1
 8001556:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_I2C_MspInit+0xc0>)
 8001558:	0019      	movs	r1, r3
 800155a:	0010      	movs	r0, r2
 800155c:	f001 fb9e 	bl	8002c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 8001562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	0389      	lsls	r1, r1, #14
 800156a:	430a      	orrs	r2, r1
 800156c:	63da      	str	r2, [r3, #60]	; 0x3c
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 8001570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	039b      	lsls	r3, r3, #14
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b011      	add	sp, #68	; 0x44
 8001582:	bd90      	pop	{r4, r7, pc}
 8001584:	40005400 	.word	0x40005400
 8001588:	40021000 	.word	0x40021000
 800158c:	50000400 	.word	0x50000400

08001590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b093      	sub	sp, #76	; 0x4c
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	2334      	movs	r3, #52	; 0x34
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	0018      	movs	r0, r3
 800159e:	2314      	movs	r3, #20
 80015a0:	001a      	movs	r2, r3
 80015a2:	2100      	movs	r1, #0
 80015a4:	f003 fda6 	bl	80050f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a8:	241c      	movs	r4, #28
 80015aa:	193b      	adds	r3, r7, r4
 80015ac:	0018      	movs	r0, r3
 80015ae:	2318      	movs	r3, #24
 80015b0:	001a      	movs	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	f003 fd9e 	bl	80050f4 <memset>
  if(huart->Instance==USART1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a53      	ldr	r2, [pc, #332]	; (800170c <HAL_UART_MspInit+0x17c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d169      	bne.n	8001696 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ce:	193b      	adds	r3, r7, r4
 80015d0:	0018      	movs	r0, r3
 80015d2:	f002 fb1f 	bl	8003c14 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	1e03      	subs	r3, r0, #0
 80015d8:	d001      	beq.n	80015de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015da:	f7ff fed5 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015de:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_UART_MspInit+0x180>)
 80015e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e2:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_UART_MspInit+0x180>)
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	01c9      	lsls	r1, r1, #7
 80015e8:	430a      	orrs	r2, r1
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
 80015ec:	4b48      	ldr	r3, [pc, #288]	; (8001710 <HAL_UART_MspInit+0x180>)
 80015ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	01db      	lsls	r3, r3, #7
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b45      	ldr	r3, [pc, #276]	; (8001710 <HAL_UART_MspInit+0x180>)
 80015fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <HAL_UART_MspInit+0x180>)
 8001600:	2101      	movs	r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	635a      	str	r2, [r3, #52]	; 0x34
 8001606:	4b42      	ldr	r3, [pc, #264]	; (8001710 <HAL_UART_MspInit+0x180>)
 8001608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160a:	2201      	movs	r2, #1
 800160c:	4013      	ands	r3, r2
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001612:	2134      	movs	r1, #52	; 0x34
 8001614:	187b      	adds	r3, r7, r1
 8001616:	22c0      	movs	r2, #192	; 0xc0
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2202      	movs	r2, #2
 8001620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2201      	movs	r2, #1
 8001632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	187a      	adds	r2, r7, r1
 8001636:	23a0      	movs	r3, #160	; 0xa0
 8001638:	05db      	lsls	r3, r3, #23
 800163a:	0011      	movs	r1, r2
 800163c:	0018      	movs	r0, r3
 800163e:	f001 fb2d 	bl	8002c9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_UART_MspInit+0x184>)
 8001644:	4a34      	ldr	r2, [pc, #208]	; (8001718 <HAL_UART_MspInit+0x188>)
 8001646:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_UART_MspInit+0x184>)
 800164a:	2232      	movs	r2, #50	; 0x32
 800164c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_UART_MspInit+0x184>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_UART_MspInit+0x184>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_UART_MspInit+0x184>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_UART_MspInit+0x184>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_UART_MspInit+0x184>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_UART_MspInit+0x184>)
 800166e:	2220      	movs	r2, #32
 8001670:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_UART_MspInit+0x184>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_UART_MspInit+0x184>)
 800167a:	0018      	movs	r0, r3
 800167c:	f001 f8bc 	bl	80027f8 <HAL_DMA_Init>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d001      	beq.n	8001688 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001684:	f7ff fe80 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_UART_MspInit+0x184>)
 800168c:	67da      	str	r2, [r3, #124]	; 0x7c
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_UART_MspInit+0x184>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001694:	e035      	b.n	8001702 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a20      	ldr	r2, [pc, #128]	; (800171c <HAL_UART_MspInit+0x18c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d130      	bne.n	8001702 <HAL_UART_MspInit+0x172>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_UART_MspInit+0x180>)
 80016a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_UART_MspInit+0x180>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0289      	lsls	r1, r1, #10
 80016aa:	430a      	orrs	r2, r1
 80016ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_UART_MspInit+0x180>)
 80016b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_UART_MspInit+0x180>)
 80016be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_UART_MspInit+0x180>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_UART_MspInit+0x180>)
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	2201      	movs	r2, #1
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d4:	2134      	movs	r1, #52	; 0x34
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	220c      	movs	r2, #12
 80016da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2202      	movs	r2, #2
 80016e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2201      	movs	r2, #1
 80016f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	187a      	adds	r2, r7, r1
 80016f6:	23a0      	movs	r3, #160	; 0xa0
 80016f8:	05db      	lsls	r3, r3, #23
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f001 facd 	bl	8002c9c <HAL_GPIO_Init>
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b013      	add	sp, #76	; 0x4c
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	40013800 	.word	0x40013800
 8001710:	40021000 	.word	0x40021000
 8001714:	200001f8 	.word	0x200001f8
 8001718:	40020008 	.word	0x40020008
 800171c:	40004400 	.word	0x40004400

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001744:	f000 f8aa 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <DMA1_Channel1_IRQHandler+0x14>)
 8001756:	0018      	movs	r0, r3
 8001758:	f001 f95e 	bl	8002a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	200001f8 	.word	0x200001f8

08001768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001776:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001778:	f7ff fff6 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800177e:	490d      	ldr	r1, [pc, #52]	; (80017b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <LoopForever+0xe>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001794:	4c0a      	ldr	r4, [pc, #40]	; (80017c0 <LoopForever+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017a2:	f003 fc83 	bl	80050ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017a6:	f7ff facf 	bl	8000d48 <main>

080017aa <LoopForever>:

LoopForever:
  b LoopForever
 80017aa:	e7fe      	b.n	80017aa <LoopForever>
  ldr   r0, =_estack
 80017ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017b8:	0800526c 	.word	0x0800526c
  ldr r2, =_sbss
 80017bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017c0:	20000268 	.word	0x20000268

080017c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC1_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_Init+0x3c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_Init+0x3c>)
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	0049      	lsls	r1, r1, #1
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e2:	2003      	movs	r0, #3
 80017e4:	f000 f810 	bl	8001808 <HAL_InitTick>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e001      	b.n	80017f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fdce 	bl	8001394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	781b      	ldrb	r3, [r3, #0]
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40022000 	.word	0x40022000

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_InitTick+0x88>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02b      	beq.n	8001878 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_InitTick+0x8c>)
 8001822:	681c      	ldr	r4, [r3, #0]
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_InitTick+0x88>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	0019      	movs	r1, r3
 800182a:	23fa      	movs	r3, #250	; 0xfa
 800182c:	0098      	lsls	r0, r3, #2
 800182e:	f7fe fc67 	bl	8000100 <__udivsi3>
 8001832:	0003      	movs	r3, r0
 8001834:	0019      	movs	r1, r3
 8001836:	0020      	movs	r0, r4
 8001838:	f7fe fc62 	bl	8000100 <__udivsi3>
 800183c:	0003      	movs	r3, r0
 800183e:	0018      	movs	r0, r3
 8001840:	f000 ffcd 	bl	80027de <HAL_SYSTICK_Config>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d112      	bne.n	800186e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d80a      	bhi.n	8001864 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	2301      	movs	r3, #1
 8001852:	425b      	negs	r3, r3
 8001854:	2200      	movs	r2, #0
 8001856:	0018      	movs	r0, r3
 8001858:	f000 ff9c 	bl	8002794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_InitTick+0x90>)
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e00d      	b.n	8001880 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001864:	230f      	movs	r3, #15
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e008      	b.n	8001880 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800186e:	230f      	movs	r3, #15
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e003      	b.n	8001880 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001878:	230f      	movs	r3, #15
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001880:	230f      	movs	r3, #15
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	781b      	ldrb	r3, [r3, #0]
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b005      	add	sp, #20
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	20000008 	.word	0x20000008
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x1c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	001a      	movs	r2, r3
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_IncTick+0x20>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	18d2      	adds	r2, r2, r3
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_IncTick+0x20>)
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000264 	.word	0x20000264

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_GetTick+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	20000264 	.word	0x20000264

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff fff0 	bl	80018c0 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3301      	adds	r3, #1
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_Delay+0x44>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	001a      	movs	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	f7ff ffe0 	bl	80018c0 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b004      	add	sp, #16
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	20000008 	.word	0x20000008

0800191c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800192c:	401a      	ands	r2, r3
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	601a      	str	r2, [r3, #0]
}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	fe3fffff 	.word	0xfe3fffff

08001944 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	23e0      	movs	r3, #224	; 0xe0
 8001952:	045b      	lsls	r3, r3, #17
 8001954:	4013      	ands	r3, r2
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b002      	add	sp, #8
 800195c:	bd80      	pop	{r7, pc}

0800195e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	2104      	movs	r1, #4
 8001972:	400a      	ands	r2, r1
 8001974:	2107      	movs	r1, #7
 8001976:	4091      	lsls	r1, r2
 8001978:	000a      	movs	r2, r1
 800197a:	43d2      	mvns	r2, r2
 800197c:	401a      	ands	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2104      	movs	r1, #4
 8001982:	400b      	ands	r3, r1
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4099      	lsls	r1, r3
 8001988:	000b      	movs	r3, r1
 800198a:	431a      	orrs	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b004      	add	sp, #16
 8001996:	bd80      	pop	{r7, pc}

08001998 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	23c0      	movs	r3, #192	; 0xc0
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4013      	ands	r3, r2
 80019aa:	d101      	bne.n	80019b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}

080019ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	211f      	movs	r1, #31
 80019ce:	400a      	ands	r2, r1
 80019d0:	210f      	movs	r1, #15
 80019d2:	4091      	lsls	r1, r2
 80019d4:	000a      	movs	r2, r1
 80019d6:	43d2      	mvns	r2, r2
 80019d8:	401a      	ands	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0e9b      	lsrs	r3, r3, #26
 80019de:	210f      	movs	r1, #15
 80019e0:	4019      	ands	r1, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	201f      	movs	r0, #31
 80019e6:	4003      	ands	r3, r0
 80019e8:	4099      	lsls	r1, r3
 80019ea:	000b      	movs	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}

080019fa <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	035b      	lsls	r3, r3, #13
 8001a0c:	0b5b      	lsrs	r3, r3, #13
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	0352      	lsls	r2, r2, #13
 8001a2e:	0b52      	lsrs	r2, r2, #13
 8001a30:	43d2      	mvns	r2, r2
 8001a32:	401a      	ands	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	0212      	lsls	r2, r2, #8
 8001a54:	43d2      	mvns	r2, r2
 8001a56:	401a      	ands	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
 8001a60:	4904      	ldr	r1, [pc, #16]	; (8001a74 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001a62:	400b      	ands	r3, r1
 8001a64:	431a      	orrs	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	07ffff00 	.word	0x07ffff00

08001a78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <LL_ADC_EnableInternalRegulator+0x24>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	0552      	lsls	r2, r2, #21
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	6fffffe8 	.word	0x6fffffe8

08001aa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	055b      	lsls	r3, r3, #21
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	055b      	lsls	r3, r3, #21
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d101      	bne.n	8001abe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <LL_ADC_Enable+0x20>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2201      	movs	r2, #1
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	7fffffe8 	.word	0x7fffffe8

08001aec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <LL_ADC_Disable+0x20>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	2202      	movs	r2, #2
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	7fffffe8 	.word	0x7fffffe8

08001b10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_IsEnabled+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_IsEnabled+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <LL_ADC_REG_StartConversion+0x20>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	2204      	movs	r2, #4
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	7fffffe8 	.word	0x7fffffe8

08001b58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2204      	movs	r2, #4
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d101      	bne.n	8001b70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b84:	231f      	movs	r3, #31
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1b1      	b.n	8001f06 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff fc15 	bl	80013dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2254      	movs	r2, #84	; 0x54
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff ff6b 	bl	8001aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8001bca:	1e03      	subs	r3, r0, #0
 8001bcc:	d115      	bne.n	8001bfa <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f7ff ff50 	bl	8001a78 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bd8:	4bcd      	ldr	r3, [pc, #820]	; (8001f10 <HAL_ADC_Init+0x394>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	49cd      	ldr	r1, [pc, #820]	; (8001f14 <HAL_ADC_Init+0x398>)
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7fe fa8e 	bl	8000100 <__udivsi3>
 8001be4:	0003      	movs	r3, r0
 8001be6:	3301      	adds	r3, #1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff ff4e 	bl	8001aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c04:	1e03      	subs	r3, r0, #0
 8001c06:	d10f      	bne.n	8001c28 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c18:	2201      	movs	r2, #1
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c20:	231f      	movs	r3, #31
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff ff93 	bl	8001b58 <LL_ADC_REG_IsConversionOngoing>
 8001c32:	0003      	movs	r3, r0
 8001c34:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d000      	beq.n	8001c42 <HAL_ADC_Init+0xc6>
 8001c40:	e154      	b.n	8001eec <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d000      	beq.n	8001c4a <HAL_ADC_Init+0xce>
 8001c48:	e150      	b.n	8001eec <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4ab2      	ldr	r2, [pc, #712]	; (8001f18 <HAL_ADC_Init+0x39c>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	2202      	movs	r2, #2
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7ff ff56 	bl	8001b10 <LL_ADC_IsEnabled>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d156      	bne.n	8001d16 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2218      	movs	r2, #24
 8001c70:	4393      	bics	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	0f9b      	lsrs	r3, r3, #30
 8001c86:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	223c      	movs	r2, #60	; 0x3c
 8001c98:	5c9b      	ldrb	r3, [r3, r2]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d111      	bne.n	8001cc2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	0f9b      	lsrs	r3, r3, #30
 8001ca4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001caa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001cb0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001cb6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	4a94      	ldr	r2, [pc, #592]	; (8001f1c <HAL_ADC_Init+0x3a0>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	0019      	movs	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	23c0      	movs	r3, #192	; 0xc0
 8001cde:	061b      	lsls	r3, r3, #24
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d018      	beq.n	8001d16 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	05db      	lsls	r3, r3, #23
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d012      	beq.n	8001d16 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	061b      	lsls	r3, r3, #24
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d00c      	beq.n	8001d16 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001cfc:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_ADC_Init+0x3a4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a88      	ldr	r2, [pc, #544]	; (8001f24 <HAL_ADC_Init+0x3a8>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	23f0      	movs	r3, #240	; 0xf0
 8001d0c:	039b      	lsls	r3, r3, #14
 8001d0e:	401a      	ands	r2, r3
 8001d10:	4b83      	ldr	r3, [pc, #524]	; (8001f20 <HAL_ADC_Init+0x3a4>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7e1b      	ldrb	r3, [r3, #24]
 8001d1a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7e5b      	ldrb	r3, [r3, #25]
 8001d20:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d22:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e9b      	ldrb	r3, [r3, #26]
 8001d28:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_ADC_Init+0x1be>
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	015b      	lsls	r3, r3, #5
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_Init+0x1c0>
 8001d3a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d3c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d42:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da04      	bge.n	8001d56 <HAL_ADC_Init+0x1da>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	085b      	lsrs	r3, r3, #1
 8001d54:	e001      	b.n	8001d5a <HAL_ADC_Init+0x1de>
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8001d5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	5c5b      	ldrb	r3, [r3, r1]
 8001d62:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d64:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d115      	bne.n	8001da2 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7e9b      	ldrb	r3, [r3, #26]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	0252      	lsls	r2, r2, #9
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	e00b      	b.n	8001da2 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	2220      	movs	r2, #32
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dae:	23e0      	movs	r3, #224	; 0xe0
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001db8:	4313      	orrs	r3, r2
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <HAL_ADC_Init+0x3ac>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	0019      	movs	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	4a53      	ldr	r2, [pc, #332]	; (8001f2c <HAL_ADC_Init+0x3b0>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df4:	001a      	movs	r2, r3
 8001df6:	2100      	movs	r1, #0
 8001df8:	f7ff fdb1 	bl	800195e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e04:	494a      	ldr	r1, [pc, #296]	; (8001f30 <HAL_ADC_Init+0x3b4>)
 8001e06:	001a      	movs	r2, r3
 8001e08:	f7ff fda9 	bl	800195e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2110      	movs	r1, #16
 8001e20:	4249      	negs	r1, r1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
 8001e26:	e03a      	b.n	8001e9e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	039b      	lsls	r3, r3, #14
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d134      	bne.n	8001e9e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e00c      	b.n	8001e54 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	40da      	lsrs	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	220f      	movs	r2, #15
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	d006      	beq.n	8001e5c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	3301      	adds	r3, #1
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b07      	cmp	r3, #7
 8001e58:	d9ef      	bls.n	8001e3a <HAL_ADC_Init+0x2be>
 8001e5a:	e000      	b.n	8001e5e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8001e5c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2110      	movs	r1, #16
 8001e70:	4249      	negs	r1, r1
 8001e72:	430a      	orrs	r2, r1
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
 8001e76:	e012      	b.n	8001e9e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	221c      	movs	r2, #28
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	4252      	negs	r2, r2
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0011      	movs	r1, r2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_ADC_Init+0x3b8>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d10b      	bne.n	8001ec6 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	2203      	movs	r2, #3
 8001eba:	4393      	bics	r3, r2
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001ec4:	e01c      	b.n	8001f00 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	2212      	movs	r2, #18
 8001ecc:	4393      	bics	r3, r2
 8001ece:	2210      	movs	r2, #16
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	2201      	movs	r2, #1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001ee2:	231f      	movs	r3, #31
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001eea:	e009      	b.n	8001f00 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ef8:	231f      	movs	r3, #31
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f00:	231f      	movs	r3, #31
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	781b      	ldrb	r3, [r3, #0]
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b008      	add	sp, #32
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	20000000 	.word	0x20000000
 8001f14:	00030d40 	.word	0x00030d40
 8001f18:	fffffefd 	.word	0xfffffefd
 8001f1c:	1ffffc02 	.word	0x1ffffc02
 8001f20:	40012708 	.word	0x40012708
 8001f24:	ffc3ffff 	.word	0xffc3ffff
 8001f28:	fffe0219 	.word	0xfffe0219
 8001f2c:	dffffc02 	.word	0xdffffc02
 8001f30:	07ffff04 	.word	0x07ffff04
 8001f34:	833fffe7 	.word	0x833fffe7

08001f38 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7ff fe05 	bl	8001b58 <LL_ADC_REG_IsConversionOngoing>
 8001f4e:	1e03      	subs	r3, r0, #0
 8001f50:	d16c      	bne.n	800202c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2254      	movs	r2, #84	; 0x54
 8001f56:	5c9b      	ldrb	r3, [r3, r2]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x28>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e06c      	b.n	800203a <HAL_ADC_Start_DMA+0x102>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2254      	movs	r2, #84	; 0x54
 8001f64:	2101      	movs	r1, #1
 8001f66:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	d113      	bne.n	8001f9c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7ff fdc9 	bl	8001b10 <LL_ADC_IsEnabled>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d004      	beq.n	8001f8c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7ff fdb0 	bl	8001aec <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2101      	movs	r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f9c:	2517      	movs	r5, #23
 8001f9e:	197c      	adds	r4, r7, r5
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 fa36 	bl	8002414 <ADC_Enable>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fac:	002c      	movs	r4, r5
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d13e      	bne.n	8002034 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	4a22      	ldr	r2, [pc, #136]	; (8002044 <HAL_ADC_Start_DMA+0x10c>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	0052      	lsls	r2, r2, #1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_ADC_Start_DMA+0x110>)
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <HAL_ADC_Start_DMA+0x114>)
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe2:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <HAL_ADC_Start_DMA+0x118>)
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	221c      	movs	r2, #28
 8001fec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2254      	movs	r2, #84	; 0x54
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2110      	movs	r1, #16
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3340      	adds	r3, #64	; 0x40
 8002010:	0019      	movs	r1, r3
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	193c      	adds	r4, r7, r4
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f000 fc78 	bl	800290c <HAL_DMA_Start_IT>
 800201c:	0003      	movs	r3, r0
 800201e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0018      	movs	r0, r3
 8002026:	f7ff fd85 	bl	8001b34 <LL_ADC_REG_StartConversion>
 800202a:	e003      	b.n	8002034 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800202c:	2317      	movs	r3, #23
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	2202      	movs	r2, #2
 8002032:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002034:	2317      	movs	r3, #23
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b006      	add	sp, #24
 8002040:	bdb0      	pop	{r4, r5, r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	fffff0fe 	.word	0xfffff0fe
 8002048:	08002521 	.word	0x08002521
 800204c:	080025e9 	.word	0x080025e9
 8002050:	08002607 	.word	0x08002607

08002054 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206e:	2317      	movs	r3, #23
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2254      	movs	r2, #84	; 0x54
 800207e:	5c9b      	ldrb	r3, [r3, r2]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x24>
 8002084:	2302      	movs	r3, #2
 8002086:	e1c0      	b.n	800240a <HAL_ADC_ConfigChannel+0x3a6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2254      	movs	r2, #84	; 0x54
 800208c:	2101      	movs	r1, #1
 800208e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0018      	movs	r0, r3
 8002096:	f7ff fd5f 	bl	8001b58 <LL_ADC_REG_IsConversionOngoing>
 800209a:	1e03      	subs	r3, r0, #0
 800209c:	d000      	beq.n	80020a0 <HAL_ADC_ConfigChannel+0x3c>
 800209e:	e1a3      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d100      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x46>
 80020a8:	e143      	b.n	8002332 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	061b      	lsls	r3, r3, #24
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d004      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020ba:	4ac1      	ldr	r2, [pc, #772]	; (80023c0 <HAL_ADC_ConfigChannel+0x35c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d108      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0019      	movs	r1, r3
 80020ca:	0010      	movs	r0, r2
 80020cc:	f7ff fc95 	bl	80019fa <LL_ADC_REG_SetSequencerChAdd>
 80020d0:	e0c9      	b.n	8002266 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	211f      	movs	r1, #31
 80020dc:	400b      	ands	r3, r1
 80020de:	210f      	movs	r1, #15
 80020e0:	4099      	lsls	r1, r3
 80020e2:	000b      	movs	r3, r1
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4013      	ands	r3, r2
 80020e8:	0019      	movs	r1, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	035b      	lsls	r3, r3, #13
 80020f0:	0b5b      	lsrs	r3, r3, #13
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x9c>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0e9b      	lsrs	r3, r3, #26
 80020fa:	221f      	movs	r2, #31
 80020fc:	4013      	ands	r3, r2
 80020fe:	e098      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	4013      	ands	r3, r2
 8002108:	d000      	beq.n	800210c <HAL_ADC_ConfigChannel+0xa8>
 800210a:	e091      	b.n	8002230 <HAL_ADC_ConfigChannel+0x1cc>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	d000      	beq.n	8002118 <HAL_ADC_ConfigChannel+0xb4>
 8002116:	e089      	b.n	800222c <HAL_ADC_ConfigChannel+0x1c8>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2204      	movs	r2, #4
 800211e:	4013      	ands	r3, r2
 8002120:	d000      	beq.n	8002124 <HAL_ADC_ConfigChannel+0xc0>
 8002122:	e081      	b.n	8002228 <HAL_ADC_ConfigChannel+0x1c4>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2208      	movs	r2, #8
 800212a:	4013      	ands	r3, r2
 800212c:	d000      	beq.n	8002130 <HAL_ADC_ConfigChannel+0xcc>
 800212e:	e079      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1c0>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2210      	movs	r2, #16
 8002136:	4013      	ands	r3, r2
 8002138:	d000      	beq.n	800213c <HAL_ADC_ConfigChannel+0xd8>
 800213a:	e071      	b.n	8002220 <HAL_ADC_ConfigChannel+0x1bc>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2220      	movs	r2, #32
 8002142:	4013      	ands	r3, r2
 8002144:	d000      	beq.n	8002148 <HAL_ADC_ConfigChannel+0xe4>
 8002146:	e069      	b.n	800221c <HAL_ADC_ConfigChannel+0x1b8>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	4013      	ands	r3, r2
 8002150:	d000      	beq.n	8002154 <HAL_ADC_ConfigChannel+0xf0>
 8002152:	e061      	b.n	8002218 <HAL_ADC_ConfigChannel+0x1b4>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	4013      	ands	r3, r2
 800215c:	d000      	beq.n	8002160 <HAL_ADC_ConfigChannel+0xfc>
 800215e:	e059      	b.n	8002214 <HAL_ADC_ConfigChannel+0x1b0>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4013      	ands	r3, r2
 800216a:	d151      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x1ac>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4013      	ands	r3, r2
 8002176:	d149      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1a8>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4013      	ands	r3, r2
 8002182:	d141      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1a4>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4013      	ands	r3, r2
 800218e:	d139      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1a0>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	015b      	lsls	r3, r3, #5
 8002198:	4013      	ands	r3, r2
 800219a:	d131      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x19c>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	019b      	lsls	r3, r3, #6
 80021a4:	4013      	ands	r3, r2
 80021a6:	d129      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x198>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	01db      	lsls	r3, r3, #7
 80021b0:	4013      	ands	r3, r2
 80021b2:	d121      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x194>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	4013      	ands	r3, r2
 80021be:	d119      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x190>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	025b      	lsls	r3, r3, #9
 80021c8:	4013      	ands	r3, r2
 80021ca:	d111      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x18c>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	029b      	lsls	r3, r3, #10
 80021d4:	4013      	ands	r3, r2
 80021d6:	d109      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x188>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	02db      	lsls	r3, r3, #11
 80021e0:	4013      	ands	r3, r2
 80021e2:	d001      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x184>
 80021e4:	2312      	movs	r3, #18
 80021e6:	e024      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 80021e8:	2300      	movs	r3, #0
 80021ea:	e022      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 80021ec:	2311      	movs	r3, #17
 80021ee:	e020      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 80021f0:	2310      	movs	r3, #16
 80021f2:	e01e      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 80021f4:	230f      	movs	r3, #15
 80021f6:	e01c      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 80021f8:	230e      	movs	r3, #14
 80021fa:	e01a      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 80021fc:	230d      	movs	r3, #13
 80021fe:	e018      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002200:	230c      	movs	r3, #12
 8002202:	e016      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002204:	230b      	movs	r3, #11
 8002206:	e014      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002208:	230a      	movs	r3, #10
 800220a:	e012      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 800220c:	2309      	movs	r3, #9
 800220e:	e010      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002210:	2308      	movs	r3, #8
 8002212:	e00e      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002214:	2307      	movs	r3, #7
 8002216:	e00c      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002218:	2306      	movs	r3, #6
 800221a:	e00a      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 800221c:	2305      	movs	r3, #5
 800221e:	e008      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002220:	2304      	movs	r3, #4
 8002222:	e006      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002224:	2303      	movs	r3, #3
 8002226:	e004      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002228:	2302      	movs	r3, #2
 800222a:	e002      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1ce>
 8002230:	2300      	movs	r3, #0
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	6852      	ldr	r2, [r2, #4]
 8002236:	201f      	movs	r0, #31
 8002238:	4002      	ands	r2, r0
 800223a:	4093      	lsls	r3, r2
 800223c:	000a      	movs	r2, r1
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	429a      	cmp	r2, r3
 8002252:	d808      	bhi.n	8002266 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	001a      	movs	r2, r3
 8002262:	f7ff fbaa 	bl	80019ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	001a      	movs	r2, r3
 8002274:	f7ff fbe4 	bl	8001a40 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db00      	blt.n	8002282 <HAL_ADC_ConfigChannel+0x21e>
 8002280:	e0bc      	b.n	80023fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002282:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <HAL_ADC_ConfigChannel+0x360>)
 8002284:	0018      	movs	r0, r3
 8002286:	f7ff fb5d 	bl	8001944 <LL_ADC_GetCommonPathInternalCh>
 800228a:	0003      	movs	r3, r0
 800228c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_ADC_ConfigChannel+0x364>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d122      	bne.n	80022de <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	041b      	lsls	r3, r3, #16
 800229e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022a0:	d11d      	bne.n	80022de <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	0412      	lsls	r2, r2, #16
 80022a8:	4313      	orrs	r3, r2
 80022aa:	4a46      	ldr	r2, [pc, #280]	; (80023c4 <HAL_ADC_ConfigChannel+0x360>)
 80022ac:	0019      	movs	r1, r3
 80022ae:	0010      	movs	r0, r2
 80022b0:	f7ff fb34 	bl	800191c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022b4:	4b45      	ldr	r3, [pc, #276]	; (80023cc <HAL_ADC_ConfigChannel+0x368>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4945      	ldr	r1, [pc, #276]	; (80023d0 <HAL_ADC_ConfigChannel+0x36c>)
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7fd ff20 	bl	8000100 <__udivsi3>
 80022c0:	0003      	movs	r3, r0
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	0013      	movs	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	189b      	adds	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022ce:	e002      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f9      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022dc:	e08e      	b.n	80023fc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a3c      	ldr	r2, [pc, #240]	; (80023d4 <HAL_ADC_ConfigChannel+0x370>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d10e      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x2a2>
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	045b      	lsls	r3, r3, #17
 80022ee:	4013      	ands	r3, r2
 80022f0:	d109      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	0452      	lsls	r2, r2, #17
 80022f8:	4313      	orrs	r3, r2
 80022fa:	4a32      	ldr	r2, [pc, #200]	; (80023c4 <HAL_ADC_ConfigChannel+0x360>)
 80022fc:	0019      	movs	r1, r3
 80022fe:	0010      	movs	r0, r2
 8002300:	f7ff fb0c 	bl	800191c <LL_ADC_SetCommonPathInternalCh>
 8002304:	e07a      	b.n	80023fc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a33      	ldr	r2, [pc, #204]	; (80023d8 <HAL_ADC_ConfigChannel+0x374>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d000      	beq.n	8002312 <HAL_ADC_ConfigChannel+0x2ae>
 8002310:	e074      	b.n	80023fc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	03db      	lsls	r3, r3, #15
 8002318:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800231a:	d000      	beq.n	800231e <HAL_ADC_ConfigChannel+0x2ba>
 800231c:	e06e      	b.n	80023fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	03d2      	lsls	r2, r2, #15
 8002324:	4313      	orrs	r3, r2
 8002326:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_ADC_ConfigChannel+0x360>)
 8002328:	0019      	movs	r1, r3
 800232a:	0010      	movs	r0, r2
 800232c:	f7ff faf6 	bl	800191c <LL_ADC_SetCommonPathInternalCh>
 8002330:	e064      	b.n	80023fc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	429a      	cmp	r2, r3
 800233c:	d004      	beq.n	8002348 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002342:	4a1f      	ldr	r2, [pc, #124]	; (80023c0 <HAL_ADC_ConfigChannel+0x35c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d107      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0019      	movs	r1, r3
 8002352:	0010      	movs	r0, r2
 8002354:	f7ff fb62 	bl	8001a1c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	da4d      	bge.n	80023fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_ADC_ConfigChannel+0x360>)
 8002362:	0018      	movs	r0, r3
 8002364:	f7ff faee 	bl	8001944 <LL_ADC_GetCommonPathInternalCh>
 8002368:	0003      	movs	r3, r0
 800236a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <HAL_ADC_ConfigChannel+0x364>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4a18      	ldr	r2, [pc, #96]	; (80023dc <HAL_ADC_ConfigChannel+0x378>)
 800237a:	4013      	ands	r3, r2
 800237c:	4a11      	ldr	r2, [pc, #68]	; (80023c4 <HAL_ADC_ConfigChannel+0x360>)
 800237e:	0019      	movs	r1, r3
 8002380:	0010      	movs	r0, r2
 8002382:	f7ff facb 	bl	800191c <LL_ADC_SetCommonPathInternalCh>
 8002386:	e039      	b.n	80023fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_ADC_ConfigChannel+0x370>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d108      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <HAL_ADC_ConfigChannel+0x37c>)
 8002396:	4013      	ands	r3, r2
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_ADC_ConfigChannel+0x360>)
 800239a:	0019      	movs	r1, r3
 800239c:	0010      	movs	r0, r2
 800239e:	f7ff fabd 	bl	800191c <LL_ADC_SetCommonPathInternalCh>
 80023a2:	e02b      	b.n	80023fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_ADC_ConfigChannel+0x374>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d126      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <HAL_ADC_ConfigChannel+0x380>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	4a03      	ldr	r2, [pc, #12]	; (80023c4 <HAL_ADC_ConfigChannel+0x360>)
 80023b6:	0019      	movs	r1, r3
 80023b8:	0010      	movs	r0, r2
 80023ba:	f7ff faaf 	bl	800191c <LL_ADC_SetCommonPathInternalCh>
 80023be:	e01d      	b.n	80023fc <HAL_ADC_ConfigChannel+0x398>
 80023c0:	80000004 	.word	0x80000004
 80023c4:	40012708 	.word	0x40012708
 80023c8:	b0001000 	.word	0xb0001000
 80023cc:	20000000 	.word	0x20000000
 80023d0:	00030d40 	.word	0x00030d40
 80023d4:	b8004000 	.word	0xb8004000
 80023d8:	b4002000 	.word	0xb4002000
 80023dc:	ff7fffff 	.word	0xff7fffff
 80023e0:	feffffff 	.word	0xfeffffff
 80023e4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	2220      	movs	r2, #32
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023f4:	2317      	movs	r3, #23
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2254      	movs	r2, #84	; 0x54
 8002400:	2100      	movs	r1, #0
 8002402:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002404:	2317      	movs	r3, #23
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b006      	add	sp, #24
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)

08002414 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0018      	movs	r0, r3
 8002426:	f7ff fb73 	bl	8001b10 <LL_ADC_IsEnabled>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d000      	beq.n	8002430 <ADC_Enable+0x1c>
 800242e:	e069      	b.n	8002504 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4a36      	ldr	r2, [pc, #216]	; (8002510 <ADC_Enable+0xfc>)
 8002438:	4013      	ands	r3, r2
 800243a:	d00d      	beq.n	8002458 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	2210      	movs	r2, #16
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	2201      	movs	r2, #1
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e056      	b.n	8002506 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0018      	movs	r0, r3
 800245e:	f7ff fb33 	bl	8001ac8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <ADC_Enable+0x100>)
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff fa6d 	bl	8001944 <LL_ADC_GetCommonPathInternalCh>
 800246a:	0002      	movs	r2, r0
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	041b      	lsls	r3, r3, #16
 8002470:	4013      	ands	r3, r2
 8002472:	d00f      	beq.n	8002494 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002474:	4b28      	ldr	r3, [pc, #160]	; (8002518 <ADC_Enable+0x104>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4928      	ldr	r1, [pc, #160]	; (800251c <ADC_Enable+0x108>)
 800247a:	0018      	movs	r0, r3
 800247c:	f7fd fe40 	bl	8000100 <__udivsi3>
 8002480:	0003      	movs	r3, r0
 8002482:	3301      	adds	r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002486:	e002      	b.n	800248e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	3b01      	subs	r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f9      	bne.n	8002488 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7e5b      	ldrb	r3, [r3, #25]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d033      	beq.n	8002504 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800249c:	f7ff fa10 	bl	80018c0 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a4:	e027      	b.n	80024f6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7ff fb30 	bl	8001b10 <LL_ADC_IsEnabled>
 80024b0:	1e03      	subs	r3, r0, #0
 80024b2:	d104      	bne.n	80024be <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7ff fb05 	bl	8001ac8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024be:	f7ff f9ff 	bl	80018c0 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d914      	bls.n	80024f6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d00d      	beq.n	80024f6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	2210      	movs	r2, #16
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	2201      	movs	r2, #1
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e007      	b.n	8002506 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	2b01      	cmp	r3, #1
 8002502:	d1d0      	bne.n	80024a6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b004      	add	sp, #16
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	80000017 	.word	0x80000017
 8002514:	40012708 	.word	0x40012708
 8002518:	20000000 	.word	0x20000000
 800251c:	00030d40 	.word	0x00030d40

08002520 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	2250      	movs	r2, #80	; 0x50
 8002534:	4013      	ands	r3, r2
 8002536:	d141      	bne.n	80025bc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	431a      	orrs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0018      	movs	r0, r3
 800254c:	f7ff fa24 	bl	8001998 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d02e      	beq.n	80025b2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	7e9b      	ldrb	r3, [r3, #26]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d12a      	bne.n	80025b2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2208      	movs	r2, #8
 8002564:	4013      	ands	r3, r2
 8002566:	2b08      	cmp	r3, #8
 8002568:	d123      	bne.n	80025b2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0018      	movs	r0, r3
 8002570:	f7ff faf2 	bl	8001b58 <LL_ADC_REG_IsConversionOngoing>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d110      	bne.n	800259a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	210c      	movs	r1, #12
 8002584:	438a      	bics	r2, r1
 8002586:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <ADC_DMAConvCplt+0xc4>)
 800258e:	4013      	ands	r3, r2
 8002590:	2201      	movs	r2, #1
 8002592:	431a      	orrs	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	659a      	str	r2, [r3, #88]	; 0x58
 8002598:	e00b      	b.n	80025b2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	2220      	movs	r2, #32
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2201      	movs	r2, #1
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7fe f9b7 	bl	8000928 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025ba:	e00f      	b.n	80025dc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	2210      	movs	r2, #16
 80025c2:	4013      	ands	r3, r2
 80025c4:	d004      	beq.n	80025d0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7fe f9bb 	bl	8000944 <HAL_ADC_ErrorCallback>
}
 80025ce:	e005      	b.n	80025dc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	0010      	movs	r0, r2
 80025da:	4798      	blx	r3
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	fffffefe 	.word	0xfffffefe

080025e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff fd2b 	bl	8002054 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b004      	add	sp, #16
 8002604:	bd80      	pop	{r7, pc}

08002606 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	2240      	movs	r2, #64	; 0x40
 800261a:	431a      	orrs	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2204      	movs	r2, #4
 8002626:	431a      	orrs	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	0018      	movs	r0, r3
 8002630:	f7fe f988 	bl	8000944 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b004      	add	sp, #16
 800263a:	bd80      	pop	{r7, pc}

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	0002      	movs	r2, r0
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b7f      	cmp	r3, #127	; 0x7f
 800264e:	d809      	bhi.n	8002664 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	001a      	movs	r2, r3
 8002656:	231f      	movs	r3, #31
 8002658:	401a      	ands	r2, r3
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <__NVIC_EnableIRQ+0x30>)
 800265c:	2101      	movs	r1, #1
 800265e:	4091      	lsls	r1, r2
 8002660:	000a      	movs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b002      	add	sp, #8
 800266a:	bd80      	pop	{r7, pc}
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	0002      	movs	r2, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b7f      	cmp	r3, #127	; 0x7f
 8002684:	d828      	bhi.n	80026d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002686:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <__NVIC_SetPriority+0xd4>)
 8002688:	1dfb      	adds	r3, r7, #7
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b25b      	sxtb	r3, r3
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	33c0      	adds	r3, #192	; 0xc0
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	589b      	ldr	r3, [r3, r2]
 8002696:	1dfa      	adds	r2, r7, #7
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	0011      	movs	r1, r2
 800269c:	2203      	movs	r2, #3
 800269e:	400a      	ands	r2, r1
 80026a0:	00d2      	lsls	r2, r2, #3
 80026a2:	21ff      	movs	r1, #255	; 0xff
 80026a4:	4091      	lsls	r1, r2
 80026a6:	000a      	movs	r2, r1
 80026a8:	43d2      	mvns	r2, r2
 80026aa:	401a      	ands	r2, r3
 80026ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	019b      	lsls	r3, r3, #6
 80026b2:	22ff      	movs	r2, #255	; 0xff
 80026b4:	401a      	ands	r2, r3
 80026b6:	1dfb      	adds	r3, r7, #7
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	0018      	movs	r0, r3
 80026bc:	2303      	movs	r3, #3
 80026be:	4003      	ands	r3, r0
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026c4:	481f      	ldr	r0, [pc, #124]	; (8002744 <__NVIC_SetPriority+0xd4>)
 80026c6:	1dfb      	adds	r3, r7, #7
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	430a      	orrs	r2, r1
 80026d0:	33c0      	adds	r3, #192	; 0xc0
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026d6:	e031      	b.n	800273c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d8:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <__NVIC_SetPriority+0xd8>)
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	0019      	movs	r1, r3
 80026e0:	230f      	movs	r3, #15
 80026e2:	400b      	ands	r3, r1
 80026e4:	3b08      	subs	r3, #8
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3306      	adds	r3, #6
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	18d3      	adds	r3, r2, r3
 80026ee:	3304      	adds	r3, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	1dfa      	adds	r2, r7, #7
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	0011      	movs	r1, r2
 80026f8:	2203      	movs	r2, #3
 80026fa:	400a      	ands	r2, r1
 80026fc:	00d2      	lsls	r2, r2, #3
 80026fe:	21ff      	movs	r1, #255	; 0xff
 8002700:	4091      	lsls	r1, r2
 8002702:	000a      	movs	r2, r1
 8002704:	43d2      	mvns	r2, r2
 8002706:	401a      	ands	r2, r3
 8002708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	22ff      	movs	r2, #255	; 0xff
 8002710:	401a      	ands	r2, r3
 8002712:	1dfb      	adds	r3, r7, #7
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	0018      	movs	r0, r3
 8002718:	2303      	movs	r3, #3
 800271a:	4003      	ands	r3, r0
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002720:	4809      	ldr	r0, [pc, #36]	; (8002748 <__NVIC_SetPriority+0xd8>)
 8002722:	1dfb      	adds	r3, r7, #7
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	001c      	movs	r4, r3
 8002728:	230f      	movs	r3, #15
 800272a:	4023      	ands	r3, r4
 800272c:	3b08      	subs	r3, #8
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	430a      	orrs	r2, r1
 8002732:	3306      	adds	r3, #6
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	18c3      	adds	r3, r0, r3
 8002738:	3304      	adds	r3, #4
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b003      	add	sp, #12
 8002742:	bd90      	pop	{r4, r7, pc}
 8002744:	e000e100 	.word	0xe000e100
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	1e5a      	subs	r2, r3, #1
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	045b      	lsls	r3, r3, #17
 800275c:	429a      	cmp	r2, r3
 800275e:	d301      	bcc.n	8002764 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002760:	2301      	movs	r3, #1
 8002762:	e010      	b.n	8002786 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <SysTick_Config+0x44>)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	3a01      	subs	r2, #1
 800276a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276c:	2301      	movs	r3, #1
 800276e:	425b      	negs	r3, r3
 8002770:	2103      	movs	r1, #3
 8002772:	0018      	movs	r0, r3
 8002774:	f7ff ff7c 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x44>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x44>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	210f      	movs	r1, #15
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	1c02      	adds	r2, r0, #0
 80027a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b25b      	sxtb	r3, r3
 80027ae:	0011      	movs	r1, r2
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b004      	add	sp, #16
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	0002      	movs	r2, r0
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7ff ff33 	bl	800263c <__NVIC_EnableIRQ>
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff ffaf 	bl	800274c <SysTick_Config>
 80027ee:	0003      	movs	r3, r0
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e077      	b.n	80028fa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3d      	ldr	r2, [pc, #244]	; (8002904 <HAL_DMA_Init+0x10c>)
 8002810:	4694      	mov	ip, r2
 8002812:	4463      	add	r3, ip
 8002814:	2114      	movs	r1, #20
 8002816:	0018      	movs	r0, r3
 8002818:	f7fd fc72 	bl	8000100 <__udivsi3>
 800281c:	0003      	movs	r3, r0
 800281e:	009a      	lsls	r2, r3, #2
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2225      	movs	r2, #37	; 0x25
 8002828:	2102      	movs	r1, #2
 800282a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4934      	ldr	r1, [pc, #208]	; (8002908 <HAL_DMA_Init+0x110>)
 8002838:	400a      	ands	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f000 f9c1 	bl	8002bfc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	01db      	lsls	r3, r3, #7
 8002882:	429a      	cmp	r2, r3
 8002884:	d102      	bne.n	800288c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	213f      	movs	r1, #63	; 0x3f
 8002896:	400a      	ands	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d011      	beq.n	80028d0 <HAL_DMA_Init+0xd8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d80d      	bhi.n	80028d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f9cc 	bl	8002c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	e008      	b.n	80028e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2225      	movs	r2, #37	; 0x25
 80028ec:	2101      	movs	r1, #1
 80028ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	; 0x24
 80028f4:	2100      	movs	r1, #0
 80028f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	bffdfff8 	.word	0xbffdfff8
 8002908:	ffff800f 	.word	0xffff800f

0800290c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2317      	movs	r3, #23
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2224      	movs	r2, #36	; 0x24
 8002926:	5c9b      	ldrb	r3, [r3, r2]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_DMA_Start_IT+0x24>
 800292c:	2302      	movs	r3, #2
 800292e:	e06f      	b.n	8002a10 <HAL_DMA_Start_IT+0x104>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2224      	movs	r2, #36	; 0x24
 8002934:	2101      	movs	r1, #1
 8002936:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2225      	movs	r2, #37	; 0x25
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d157      	bne.n	80029f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2225      	movs	r2, #37	; 0x25
 8002948:	2102      	movs	r1, #2
 800294a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2101      	movs	r1, #1
 800295e:	438a      	bics	r2, r1
 8002960:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f907 	bl	8002b7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	210e      	movs	r1, #14
 8002982:	430a      	orrs	r2, r1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e00f      	b.n	80029a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2104      	movs	r1, #4
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	210a      	movs	r1, #10
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	025b      	lsls	r3, r3, #9
 80029b2:	4013      	ands	r3, r2
 80029b4:	d008      	beq.n	80029c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	0049      	lsls	r1, r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	0049      	lsls	r1, r1, #1
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e00a      	b.n	8002a0a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2224      	movs	r2, #36	; 0x24
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002a02:	2317      	movs	r3, #23
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002a0a:	2317      	movs	r3, #23
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	781b      	ldrb	r3, [r3, #0]
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b006      	add	sp, #24
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002a20:	4b55      	ldr	r3, [pc, #340]	; (8002b78 <HAL_DMA_IRQHandler+0x160>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	221c      	movs	r2, #28
 8002a34:	4013      	ands	r3, r2
 8002a36:	2204      	movs	r2, #4
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d027      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x7a>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2204      	movs	r2, #4
 8002a46:	4013      	ands	r3, r2
 8002a48:	d023      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2220      	movs	r2, #32
 8002a52:	4013      	ands	r3, r2
 8002a54:	d107      	bne.n	8002a66 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2104      	movs	r1, #4
 8002a62:	438a      	bics	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002a66:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <HAL_DMA_IRQHandler+0x160>)
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	221c      	movs	r2, #28
 8002a70:	4013      	ands	r3, r2
 8002a72:	2204      	movs	r2, #4
 8002a74:	409a      	lsls	r2, r3
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_DMA_IRQHandler+0x160>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d100      	bne.n	8002a86 <HAL_DMA_IRQHandler+0x6e>
 8002a84:	e073      	b.n	8002b6e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002a90:	e06d      	b.n	8002b6e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	221c      	movs	r2, #28
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	0013      	movs	r3, r2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d02e      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xec>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d02a      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	210a      	movs	r1, #10
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2225      	movs	r2, #37	; 0x25
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_DMA_IRQHandler+0x160>)
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	221c      	movs	r2, #28
 8002adc:	4013      	ands	r3, r2
 8002ade:	2202      	movs	r2, #2
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_DMA_IRQHandler+0x160>)
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d03a      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	0010      	movs	r0, r2
 8002b00:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002b02:	e034      	b.n	8002b6e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	221c      	movs	r2, #28
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	0013      	movs	r3, r2
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	d02b      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x158>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d027      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	210e      	movs	r1, #14
 8002b2c:	438a      	bics	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_DMA_IRQHandler+0x160>)
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	221c      	movs	r2, #28
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_DMA_IRQHandler+0x160>)
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2225      	movs	r2, #37	; 0x25
 8002b50:	2101      	movs	r1, #1
 8002b52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	; 0x24
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	0010      	movs	r0, r2
 8002b6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46c0      	nop			; (mov r8, r8)
}
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40020000 	.word	0x40020000

08002b7c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <DMA_SetConfig+0x7c>)
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	221c      	movs	r2, #28
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <DMA_SetConfig+0x7c>)
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d108      	bne.n	8002bde <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bdc:	e007      	b.n	8002bee <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	60da      	str	r2, [r3, #12]
}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b004      	add	sp, #16
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	40020000 	.word	0x40020000

08002bfc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	4463      	add	r3, ip
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	001a      	movs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	001a      	movs	r2, r3
 8002c1e:	23ff      	movs	r3, #255	; 0xff
 8002c20:	4013      	ands	r3, r2
 8002c22:	3b08      	subs	r3, #8
 8002c24:	2114      	movs	r1, #20
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fd fa6a 	bl	8000100 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002c34:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	221f      	movs	r2, #31
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	10008200 	.word	0x10008200
 8002c50:	40020880 	.word	0x40020880

08002c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	223f      	movs	r2, #63	; 0x3f
 8002c62:	4013      	ands	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c6a:	4694      	mov	ip, r2
 8002c6c:	4463      	add	r3, ip
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	001a      	movs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	2203      	movs	r2, #3
 8002c82:	4013      	ands	r3, r2
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	1000823f 	.word	0x1000823f
 8002c98:	40020940 	.word	0x40020940

08002c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002caa:	e147      	b.n	8002f3c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4091      	lsls	r1, r2
 8002cb6:	000a      	movs	r2, r1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d100      	bne.n	8002cc4 <HAL_GPIO_Init+0x28>
 8002cc2:	e138      	b.n	8002f36 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d005      	beq.n	8002cdc <HAL_GPIO_Init+0x40>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d130      	bne.n	8002d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	0013      	movs	r3, r2
 8002cec:	43da      	mvns	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	0013      	movs	r3, r2
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d12:	2201      	movs	r2, #1
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
 8002d18:	0013      	movs	r3, r2
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	2201      	movs	r2, #1
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	0013      	movs	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2203      	movs	r2, #3
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d017      	beq.n	8002d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	409a      	lsls	r2, r3
 8002d58:	0013      	movs	r3, r2
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	0013      	movs	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2203      	movs	r2, #3
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d123      	bne.n	8002dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	08da      	lsrs	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	0092      	lsls	r2, r2, #2
 8002d90:	58d3      	ldr	r3, [r2, r3]
 8002d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2207      	movs	r2, #7
 8002d98:	4013      	ands	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	0013      	movs	r3, r2
 8002da2:	43da      	mvns	r2, r3
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2107      	movs	r1, #7
 8002db2:	400b      	ands	r3, r1
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	409a      	lsls	r2, r3
 8002db8:	0013      	movs	r3, r2
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	08da      	lsrs	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3208      	adds	r2, #8
 8002dc8:	0092      	lsls	r2, r2, #2
 8002dca:	6939      	ldr	r1, [r7, #16]
 8002dcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	0013      	movs	r3, r2
 8002dde:	43da      	mvns	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2203      	movs	r2, #3
 8002dec:	401a      	ands	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	409a      	lsls	r2, r3
 8002df4:	0013      	movs	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	23c0      	movs	r3, #192	; 0xc0
 8002e08:	029b      	lsls	r3, r3, #10
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d100      	bne.n	8002e10 <HAL_GPIO_Init+0x174>
 8002e0e:	e092      	b.n	8002f36 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002e10:	4a50      	ldr	r2, [pc, #320]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3318      	adds	r3, #24
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	589b      	ldr	r3, [r3, r2]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2203      	movs	r2, #3
 8002e22:	4013      	ands	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	220f      	movs	r2, #15
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	0013      	movs	r3, r2
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	23a0      	movs	r3, #160	; 0xa0
 8002e38:	05db      	lsls	r3, r3, #23
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d013      	beq.n	8002e66 <HAL_GPIO_Init+0x1ca>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a45      	ldr	r2, [pc, #276]	; (8002f58 <HAL_GPIO_Init+0x2bc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00d      	beq.n	8002e62 <HAL_GPIO_Init+0x1c6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_GPIO_Init+0x2c0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <HAL_GPIO_Init+0x1c2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a43      	ldr	r2, [pc, #268]	; (8002f60 <HAL_GPIO_Init+0x2c4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_GPIO_Init+0x1be>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x1cc>
 8002e5a:	2305      	movs	r3, #5
 8002e5c:	e004      	b.n	8002e68 <HAL_GPIO_Init+0x1cc>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_Init+0x1cc>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_GPIO_Init+0x1cc>
 8002e66:	2300      	movs	r3, #0
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	2103      	movs	r1, #3
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	00d2      	lsls	r2, r2, #3
 8002e70:	4093      	lsls	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002e78:	4936      	ldr	r1, [pc, #216]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3318      	adds	r3, #24
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e86:	4a33      	ldr	r2, [pc, #204]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	58d3      	ldr	r3, [r2, r3]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	025b      	lsls	r3, r3, #9
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eac:	4929      	ldr	r1, [pc, #164]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002eb6:	2384      	movs	r3, #132	; 0x84
 8002eb8:	58d3      	ldr	r3, [r2, r3]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	029b      	lsls	r3, r3, #10
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eda:	491e      	ldr	r1, [pc, #120]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002edc:	2284      	movs	r2, #132	; 0x84
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	43da      	mvns	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	035b      	lsls	r3, r3, #13
 8002efa:	4013      	ands	r3, r2
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	43da      	mvns	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	039b      	lsls	r3, r3, #14
 8002f24:	4013      	ands	r3, r2
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	40da      	lsrs	r2, r3
 8002f44:	1e13      	subs	r3, r2, #0
 8002f46:	d000      	beq.n	8002f4a <HAL_GPIO_Init+0x2ae>
 8002f48:	e6b0      	b.n	8002cac <HAL_GPIO_Init+0x10>
  }
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b006      	add	sp, #24
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021800 	.word	0x40021800
 8002f58:	50000400 	.word	0x50000400
 8002f5c:	50000800 	.word	0x50000800
 8002f60:	50000c00 	.word	0x50000c00

08002f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	0008      	movs	r0, r1
 8002f6e:	0011      	movs	r1, r2
 8002f70:	1cbb      	adds	r3, r7, #2
 8002f72:	1c02      	adds	r2, r0, #0
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	1c7b      	adds	r3, r7, #1
 8002f78:	1c0a      	adds	r2, r1, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f7c:	1c7b      	adds	r3, r7, #1
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f84:	1cbb      	adds	r3, r7, #2
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f8c:	e003      	b.n	8002f96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f8e:	1cbb      	adds	r3, r7, #2
 8002f90:	881a      	ldrh	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e082      	b.n	80030b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2241      	movs	r2, #65	; 0x41
 8002fb6:	5c9b      	ldrb	r3, [r3, r2]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2240      	movs	r2, #64	; 0x40
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fe fa7f 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2241      	movs	r2, #65	; 0x41
 8002fd2:	2124      	movs	r1, #36	; 0x24
 8002fd4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	438a      	bics	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4934      	ldr	r1, [pc, #208]	; (80030c0 <HAL_I2C_Init+0x120>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4931      	ldr	r1, [pc, #196]	; (80030c4 <HAL_I2C_Init+0x124>)
 8003000:	400a      	ands	r2, r1
 8003002:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	0209      	lsls	r1, r1, #8
 8003018:	430a      	orrs	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	e007      	b.n	800302e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2184      	movs	r1, #132	; 0x84
 8003028:	0209      	lsls	r1, r1, #8
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d104      	bne.n	8003040 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	491f      	ldr	r1, [pc, #124]	; (80030c8 <HAL_I2C_Init+0x128>)
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	491a      	ldr	r1, [pc, #104]	; (80030c4 <HAL_I2C_Init+0x124>)
 800305c:	400a      	ands	r2, r1
 800305e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	431a      	orrs	r2, r3
 800306a:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69d9      	ldr	r1, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1a      	ldr	r2, [r3, #32]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2241      	movs	r2, #65	; 0x41
 80030a4:	2120      	movs	r1, #32
 80030a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2242      	movs	r2, #66	; 0x42
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	f0ffffff 	.word	0xf0ffffff
 80030c4:	ffff7fff 	.word	0xffff7fff
 80030c8:	02008000 	.word	0x02008000

080030cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2241      	movs	r2, #65	; 0x41
 80030da:	5c9b      	ldrb	r3, [r3, r2]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d138      	bne.n	8003154 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2240      	movs	r2, #64	; 0x40
 80030e6:	5c9b      	ldrb	r3, [r3, r2]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e032      	b.n	8003156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2240      	movs	r2, #64	; 0x40
 80030f4:	2101      	movs	r1, #1
 80030f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2241      	movs	r2, #65	; 0x41
 80030fc:	2124      	movs	r1, #36	; 0x24
 80030fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	438a      	bics	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4911      	ldr	r1, [pc, #68]	; (8003160 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800311c:	400a      	ands	r2, r1
 800311e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2101      	movs	r1, #1
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2241      	movs	r2, #65	; 0x41
 8003144:	2120      	movs	r1, #32
 8003146:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2240      	movs	r2, #64	; 0x40
 800314c:	2100      	movs	r1, #0
 800314e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	b002      	add	sp, #8
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	ffffefff 	.word	0xffffefff

08003164 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2241      	movs	r2, #65	; 0x41
 8003172:	5c9b      	ldrb	r3, [r3, r2]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	d139      	bne.n	80031ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	5c9b      	ldrb	r3, [r3, r2]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003184:	2302      	movs	r3, #2
 8003186:	e033      	b.n	80031f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	2101      	movs	r1, #1
 800318e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2241      	movs	r2, #65	; 0x41
 8003194:	2124      	movs	r1, #36	; 0x24
 8003196:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2101      	movs	r1, #1
 80031a4:	438a      	bics	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2101      	movs	r1, #1
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2241      	movs	r2, #65	; 0x41
 80031de:	2120      	movs	r1, #32
 80031e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2240      	movs	r2, #64	; 0x40
 80031e6:	2100      	movs	r1, #0
 80031e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
  }
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	fffff0ff 	.word	0xfffff0ff

080031fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	429a      	cmp	r2, r3
 800321e:	d11f      	bne.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	0013      	movs	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	189b      	adds	r3, r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4912      	ldr	r1, [pc, #72]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800322e:	0018      	movs	r0, r3
 8003230:	f7fc ff66 	bl	8000100 <__udivsi3>
 8003234:	0003      	movs	r3, r0
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800323a:	e008      	b.n	800324e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3b01      	subs	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e001      	b.n	800324e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e009      	b.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	401a      	ands	r2, r3
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	429a      	cmp	r2, r3
 800325e:	d0ed      	beq.n	800323c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	40007000 	.word	0x40007000
 8003270:	fffff9ff 	.word	0xfffff9ff
 8003274:	20000000 	.word	0x20000000
 8003278:	000f4240 	.word	0x000f4240

0800327c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	23e0      	movs	r3, #224	; 0xe0
 8003286:	01db      	lsls	r3, r3, #7
 8003288:	4013      	ands	r3, r2
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e2f9      	b.n	800389a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	4013      	ands	r3, r2
 80032ae:	d100      	bne.n	80032b2 <HAL_RCC_OscConfig+0x1e>
 80032b0:	e07c      	b.n	80033ac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b2:	4bc3      	ldr	r3, [pc, #780]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2238      	movs	r2, #56	; 0x38
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032bc:	4bc0      	ldr	r3, [pc, #768]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2203      	movs	r2, #3
 80032c2:	4013      	ands	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d102      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3e>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	4bb9      	ldr	r3, [pc, #740]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	4013      	ands	r3, r2
 80032e2:	d062      	beq.n	80033aa <HAL_RCC_OscConfig+0x116>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d15e      	bne.n	80033aa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e2d4      	b.n	800389a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	025b      	lsls	r3, r3, #9
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d107      	bne.n	800330c <HAL_RCC_OscConfig+0x78>
 80032fc:	4bb0      	ldr	r3, [pc, #704]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4baf      	ldr	r3, [pc, #700]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	0249      	lsls	r1, r1, #9
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e020      	b.n	800334e <HAL_RCC_OscConfig+0xba>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	23a0      	movs	r3, #160	; 0xa0
 8003312:	02db      	lsls	r3, r3, #11
 8003314:	429a      	cmp	r2, r3
 8003316:	d10e      	bne.n	8003336 <HAL_RCC_OscConfig+0xa2>
 8003318:	4ba9      	ldr	r3, [pc, #676]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4ba8      	ldr	r3, [pc, #672]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	02c9      	lsls	r1, r1, #11
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	4ba6      	ldr	r3, [pc, #664]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4ba5      	ldr	r3, [pc, #660]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	0249      	lsls	r1, r1, #9
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e00b      	b.n	800334e <HAL_RCC_OscConfig+0xba>
 8003336:	4ba2      	ldr	r3, [pc, #648]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4ba1      	ldr	r3, [pc, #644]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800333c:	49a1      	ldr	r1, [pc, #644]	; (80035c4 <HAL_RCC_OscConfig+0x330>)
 800333e:	400a      	ands	r2, r1
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	4b9f      	ldr	r3, [pc, #636]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4b9e      	ldr	r3, [pc, #632]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003348:	499f      	ldr	r1, [pc, #636]	; (80035c8 <HAL_RCC_OscConfig+0x334>)
 800334a:	400a      	ands	r2, r1
 800334c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d014      	beq.n	8003380 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fe fab3 	bl	80018c0 <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe faae 	bl	80018c0 <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e293      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003372:	4b93      	ldr	r3, [pc, #588]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	4013      	ands	r3, r2
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xcc>
 800337e:	e015      	b.n	80033ac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe fa9e 	bl	80018c0 <HAL_GetTick>
 8003384:	0003      	movs	r3, r0
 8003386:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338a:	f7fe fa99 	bl	80018c0 <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	; 0x64
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e27e      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800339c:	4b88      	ldr	r3, [pc, #544]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	029b      	lsls	r3, r3, #10
 80033a4:	4013      	ands	r3, r2
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0xf6>
 80033a8:	e000      	b.n	80033ac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2202      	movs	r2, #2
 80033b2:	4013      	ands	r3, r2
 80033b4:	d100      	bne.n	80033b8 <HAL_RCC_OscConfig+0x124>
 80033b6:	e099      	b.n	80034ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b8:	4b81      	ldr	r3, [pc, #516]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2238      	movs	r2, #56	; 0x38
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c2:	4b7f      	ldr	r3, [pc, #508]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2203      	movs	r2, #3
 80033c8:	4013      	ands	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_OscConfig+0x144>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d002      	beq.n	80033de <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d135      	bne.n	800344a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033de:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4013      	ands	r3, r2
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x162>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e251      	b.n	800389a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4a74      	ldr	r2, [pc, #464]	; (80035cc <HAL_RCC_OscConfig+0x338>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	0019      	movs	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d112      	bne.n	8003438 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003412:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6e      	ldr	r2, [pc, #440]	; (80035d0 <HAL_RCC_OscConfig+0x33c>)
 8003418:	4013      	ands	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003426:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0adb      	lsrs	r3, r3, #11
 800342c:	2207      	movs	r2, #7
 800342e:	4013      	ands	r3, r2
 8003430:	4a68      	ldr	r2, [pc, #416]	; (80035d4 <HAL_RCC_OscConfig+0x340>)
 8003432:	40da      	lsrs	r2, r3
 8003434:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_RCC_OscConfig+0x344>)
 8003436:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003438:	4b68      	ldr	r3, [pc, #416]	; (80035dc <HAL_RCC_OscConfig+0x348>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0018      	movs	r0, r3
 800343e:	f7fe f9e3 	bl	8001808 <HAL_InitTick>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d051      	beq.n	80034ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e227      	b.n	800389a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d030      	beq.n	80034b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003452:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a5e      	ldr	r2, [pc, #376]	; (80035d0 <HAL_RCC_OscConfig+0x33c>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003466:	4b56      	ldr	r3, [pc, #344]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b55      	ldr	r3, [pc, #340]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	0049      	lsls	r1, r1, #1
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe fa24 	bl	80018c0 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347e:	f7fe fa1f 	bl	80018c0 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e204      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003490:	4b4b      	ldr	r3, [pc, #300]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4013      	ands	r3, r2
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b48      	ldr	r3, [pc, #288]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a4a      	ldr	r2, [pc, #296]	; (80035cc <HAL_RCC_OscConfig+0x338>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	021a      	lsls	r2, r3, #8
 80034ac:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e01b      	b.n	80034ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80034b4:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034ba:	4949      	ldr	r1, [pc, #292]	; (80035e0 <HAL_RCC_OscConfig+0x34c>)
 80034bc:	400a      	ands	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe f9fe 	bl	80018c0 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fe f9f9 	bl	80018c0 <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e1de      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034dc:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4013      	ands	r3, r2
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x236>
 80034e8:	e000      	b.n	80034ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2208      	movs	r2, #8
 80034f2:	4013      	ands	r3, r2
 80034f4:	d047      	beq.n	8003586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80034f6:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2238      	movs	r2, #56	; 0x38
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b18      	cmp	r3, #24
 8003500:	d10a      	bne.n	8003518 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	d03c      	beq.n	8003586 <HAL_RCC_OscConfig+0x2f2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d138      	bne.n	8003586 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e1c0      	b.n	800389a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003524:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003526:	2101      	movs	r1, #1
 8003528:	430a      	orrs	r2, r1
 800352a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe f9c8 	bl	80018c0 <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe f9c3 	bl	80018c0 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1a8      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	2202      	movs	r2, #2
 800354e:	4013      	ands	r3, r2
 8003550:	d0f1      	beq.n	8003536 <HAL_RCC_OscConfig+0x2a2>
 8003552:	e018      	b.n	8003586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003556:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800355a:	2101      	movs	r1, #1
 800355c:	438a      	bics	r2, r1
 800355e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe f9ae 	bl	80018c0 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356a:	f7fe f9a9 	bl	80018c0 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e18e      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800357e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d1f1      	bne.n	800356a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2204      	movs	r2, #4
 800358c:	4013      	ands	r3, r2
 800358e:	d100      	bne.n	8003592 <HAL_RCC_OscConfig+0x2fe>
 8003590:	e0c6      	b.n	8003720 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003592:	231f      	movs	r3, #31
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2238      	movs	r2, #56	; 0x38
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d11e      	bne.n	80035e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2202      	movs	r2, #2
 80035ac:	4013      	ands	r3, r2
 80035ae:	d100      	bne.n	80035b2 <HAL_RCC_OscConfig+0x31e>
 80035b0:	e0b6      	b.n	8003720 <HAL_RCC_OscConfig+0x48c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d000      	beq.n	80035bc <HAL_RCC_OscConfig+0x328>
 80035ba:	e0b1      	b.n	8003720 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e16c      	b.n	800389a <HAL_RCC_OscConfig+0x606>
 80035c0:	40021000 	.word	0x40021000
 80035c4:	fffeffff 	.word	0xfffeffff
 80035c8:	fffbffff 	.word	0xfffbffff
 80035cc:	ffff80ff 	.word	0xffff80ff
 80035d0:	ffffc7ff 	.word	0xffffc7ff
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004
 80035e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035e4:	4baf      	ldr	r3, [pc, #700]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80035e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	055b      	lsls	r3, r3, #21
 80035ec:	4013      	ands	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_OscConfig+0x360>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x362>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d011      	beq.n	800361e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	4baa      	ldr	r3, [pc, #680]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80035fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035fe:	4ba9      	ldr	r3, [pc, #676]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	0549      	lsls	r1, r1, #21
 8003604:	430a      	orrs	r2, r1
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
 8003608:	4ba6      	ldr	r3, [pc, #664]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800360a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	055b      	lsls	r3, r3, #21
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003616:	231f      	movs	r3, #31
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361e:	4ba2      	ldr	r3, [pc, #648]	; (80038a8 <HAL_RCC_OscConfig+0x614>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4013      	ands	r3, r2
 8003628:	d11a      	bne.n	8003660 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362a:	4b9f      	ldr	r3, [pc, #636]	; (80038a8 <HAL_RCC_OscConfig+0x614>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b9e      	ldr	r3, [pc, #632]	; (80038a8 <HAL_RCC_OscConfig+0x614>)
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	0049      	lsls	r1, r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003638:	f7fe f942 	bl	80018c0 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe f93d 	bl	80018c0 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e122      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003654:	4b94      	ldr	r3, [pc, #592]	; (80038a8 <HAL_RCC_OscConfig+0x614>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4013      	ands	r3, r2
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x3e2>
 8003668:	4b8e      	ldr	r3, [pc, #568]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800366a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800366c:	4b8d      	ldr	r3, [pc, #564]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800366e:	2101      	movs	r1, #1
 8003670:	430a      	orrs	r2, r1
 8003672:	65da      	str	r2, [r3, #92]	; 0x5c
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x41c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x404>
 800367e:	4b89      	ldr	r3, [pc, #548]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003680:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003682:	4b88      	ldr	r3, [pc, #544]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003684:	2104      	movs	r1, #4
 8003686:	430a      	orrs	r2, r1
 8003688:	65da      	str	r2, [r3, #92]	; 0x5c
 800368a:	4b86      	ldr	r3, [pc, #536]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800368c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800368e:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003690:	2101      	movs	r1, #1
 8003692:	430a      	orrs	r2, r1
 8003694:	65da      	str	r2, [r3, #92]	; 0x5c
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x41c>
 8003698:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800369a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800369c:	4b81      	ldr	r3, [pc, #516]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800369e:	2101      	movs	r1, #1
 80036a0:	438a      	bics	r2, r1
 80036a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036a4:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80036a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036a8:	4b7e      	ldr	r3, [pc, #504]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80036aa:	2104      	movs	r1, #4
 80036ac:	438a      	bics	r2, r1
 80036ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d014      	beq.n	80036e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe f902 	bl	80018c0 <HAL_GetTick>
 80036bc:	0003      	movs	r3, r0
 80036be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c0:	e009      	b.n	80036d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe f8fd 	bl	80018c0 <HAL_GetTick>
 80036c6:	0002      	movs	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	4a77      	ldr	r2, [pc, #476]	; (80038ac <HAL_RCC_OscConfig+0x618>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0e1      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d6:	4b73      	ldr	r3, [pc, #460]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x42e>
 80036e0:	e013      	b.n	800370a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe f8ed 	bl	80018c0 <HAL_GetTick>
 80036e6:	0003      	movs	r3, r0
 80036e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ea:	e009      	b.n	8003700 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe f8e8 	bl	80018c0 <HAL_GetTick>
 80036f0:	0002      	movs	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	4a6d      	ldr	r2, [pc, #436]	; (80038ac <HAL_RCC_OscConfig+0x618>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0cc      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003700:	4b68      	ldr	r3, [pc, #416]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	2202      	movs	r2, #2
 8003706:	4013      	ands	r3, r2
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800370a:	231f      	movs	r3, #31
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003718:	4b62      	ldr	r3, [pc, #392]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800371a:	4965      	ldr	r1, [pc, #404]	; (80038b0 <HAL_RCC_OscConfig+0x61c>)
 800371c:	400a      	ands	r2, r1
 800371e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d100      	bne.n	800372a <HAL_RCC_OscConfig+0x496>
 8003728:	e0b6      	b.n	8003898 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372a:	4b5e      	ldr	r3, [pc, #376]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2238      	movs	r2, #56	; 0x38
 8003730:	4013      	ands	r3, r2
 8003732:	2b10      	cmp	r3, #16
 8003734:	d100      	bne.n	8003738 <HAL_RCC_OscConfig+0x4a4>
 8003736:	e07e      	b.n	8003836 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d153      	bne.n	80037e8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	4b58      	ldr	r3, [pc, #352]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b57      	ldr	r3, [pc, #348]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003746:	495b      	ldr	r1, [pc, #364]	; (80038b4 <HAL_RCC_OscConfig+0x620>)
 8003748:	400a      	ands	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fe f8b8 	bl	80018c0 <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fe f8b3 	bl	80018c0 <HAL_GetTick>
 800375a:	0002      	movs	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e098      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003768:	4b4e      	ldr	r3, [pc, #312]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	049b      	lsls	r3, r3, #18
 8003770:	4013      	ands	r3, r2
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003774:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a4f      	ldr	r2, [pc, #316]	; (80038b8 <HAL_RCC_OscConfig+0x624>)
 800377a:	4013      	ands	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	431a      	orrs	r2, r3
 800379c:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800379e:	430a      	orrs	r2, r1
 80037a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a2:	4b40      	ldr	r3, [pc, #256]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	0449      	lsls	r1, r1, #17
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80037b0:	4b3c      	ldr	r3, [pc, #240]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	0549      	lsls	r1, r1, #21
 80037ba:	430a      	orrs	r2, r1
 80037bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fe f87f 	bl	80018c0 <HAL_GetTick>
 80037c2:	0003      	movs	r3, r0
 80037c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fe f87a 	bl	80018c0 <HAL_GetTick>
 80037cc:	0002      	movs	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e05f      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037da:	4b32      	ldr	r3, [pc, #200]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	049b      	lsls	r3, r3, #18
 80037e2:	4013      	ands	r3, r2
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x534>
 80037e6:	e057      	b.n	8003898 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80037ee:	4931      	ldr	r1, [pc, #196]	; (80038b4 <HAL_RCC_OscConfig+0x620>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 80037fa:	2103      	movs	r1, #3
 80037fc:	438a      	bics	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003806:	492d      	ldr	r1, [pc, #180]	; (80038bc <HAL_RCC_OscConfig+0x628>)
 8003808:	400a      	ands	r2, r1
 800380a:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fe f858 	bl	80018c0 <HAL_GetTick>
 8003810:	0003      	movs	r3, r0
 8003812:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe f853 	bl	80018c0 <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e038      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	049b      	lsls	r3, r3, #18
 8003830:	4013      	ands	r3, r2
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x582>
 8003834:	e030      	b.n	8003898 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e02b      	b.n	800389a <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003842:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_RCC_OscConfig+0x610>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2203      	movs	r2, #3
 800384c:	401a      	ands	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	429a      	cmp	r2, r3
 8003854:	d11e      	bne.n	8003894 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2270      	movs	r2, #112	; 0x70
 800385a:	401a      	ands	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d117      	bne.n	8003894 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	23fe      	movs	r3, #254	; 0xfe
 8003868:	01db      	lsls	r3, r3, #7
 800386a:	401a      	ands	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d10e      	bne.n	8003894 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	23f8      	movs	r3, #248	; 0xf8
 800387a:	039b      	lsls	r3, r3, #14
 800387c:	401a      	ands	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d106      	bne.n	8003894 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	0f5b      	lsrs	r3, r3, #29
 800388a:	075a      	lsls	r2, r3, #29
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b008      	add	sp, #32
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40007000 	.word	0x40007000
 80038ac:	00001388 	.word	0x00001388
 80038b0:	efffffff 	.word	0xefffffff
 80038b4:	feffffff 	.word	0xfeffffff
 80038b8:	1fc1808c 	.word	0x1fc1808c
 80038bc:	effeffff 	.word	0xeffeffff

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0e9      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b76      	ldr	r3, [pc, #472]	; (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2207      	movs	r2, #7
 80038da:	4013      	ands	r3, r2
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d91e      	bls.n	8003920 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b73      	ldr	r3, [pc, #460]	; (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2207      	movs	r2, #7
 80038e8:	4393      	bics	r3, r2
 80038ea:	0019      	movs	r1, r3
 80038ec:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038f4:	f7fd ffe4 	bl	80018c0 <HAL_GetTick>
 80038f8:	0003      	movs	r3, r0
 80038fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038fc:	e009      	b.n	8003912 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fe:	f7fd ffdf 	bl	80018c0 <HAL_GetTick>
 8003902:	0002      	movs	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	4a6a      	ldr	r2, [pc, #424]	; (8003ab4 <HAL_RCC_ClockConfig+0x1f4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0ca      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003912:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2207      	movs	r2, #7
 8003918:	4013      	ands	r3, r2
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d1ee      	bne.n	80038fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2202      	movs	r2, #2
 8003926:	4013      	ands	r3, r2
 8003928:	d015      	beq.n	8003956 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2204      	movs	r2, #4
 8003930:	4013      	ands	r3, r2
 8003932:	d006      	beq.n	8003942 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003934:	4b60      	ldr	r3, [pc, #384]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	4b5f      	ldr	r3, [pc, #380]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 800393a:	21e0      	movs	r1, #224	; 0xe0
 800393c:	01c9      	lsls	r1, r1, #7
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003942:	4b5d      	ldr	r3, [pc, #372]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4a5d      	ldr	r2, [pc, #372]	; (8003abc <HAL_RCC_ClockConfig+0x1fc>)
 8003948:	4013      	ands	r3, r2
 800394a:	0019      	movs	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4b59      	ldr	r3, [pc, #356]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	d057      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003968:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	029b      	lsls	r3, r3, #10
 8003970:	4013      	ands	r3, r2
 8003972:	d12b      	bne.n	80039cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e097      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d107      	bne.n	8003990 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003980:	4b4d      	ldr	r3, [pc, #308]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	049b      	lsls	r3, r3, #18
 8003988:	4013      	ands	r3, r2
 800398a:	d11f      	bne.n	80039cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e08b      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003998:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4013      	ands	r3, r2
 80039a2:	d113      	bne.n	80039cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e07f      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d106      	bne.n	80039be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039b0:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 80039b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b4:	2202      	movs	r2, #2
 80039b6:	4013      	ands	r3, r2
 80039b8:	d108      	bne.n	80039cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e074      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039be:	4b3e      	ldr	r3, [pc, #248]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 80039c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c2:	2202      	movs	r2, #2
 80039c4:	4013      	ands	r3, r2
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e06d      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039cc:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2207      	movs	r2, #7
 80039d2:	4393      	bics	r3, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e0:	f7fd ff6e 	bl	80018c0 <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e8:	e009      	b.n	80039fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ea:	f7fd ff69 	bl	80018c0 <HAL_GetTick>
 80039ee:	0002      	movs	r2, r0
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <HAL_RCC_ClockConfig+0x1f4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e054      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2238      	movs	r2, #56	; 0x38
 8003a04:	401a      	ands	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1ec      	bne.n	80039ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a10:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2207      	movs	r2, #7
 8003a16:	4013      	ands	r3, r2
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d21e      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2207      	movs	r2, #7
 8003a24:	4393      	bics	r3, r2
 8003a26:	0019      	movs	r1, r3
 8003a28:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a30:	f7fd ff46 	bl	80018c0 <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a38:	e009      	b.n	8003a4e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3a:	f7fd ff41 	bl	80018c0 <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <HAL_RCC_ClockConfig+0x1f4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e02c      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2207      	movs	r2, #7
 8003a54:	4013      	ands	r3, r2
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2204      	movs	r2, #4
 8003a62:	4013      	ands	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a66:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <HAL_RCC_ClockConfig+0x200>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003a7a:	f000 f829 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003a7e:	0001      	movs	r1, r0
 8003a80:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	220f      	movs	r2, #15
 8003a88:	401a      	ands	r2, r3
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_RCC_ClockConfig+0x204>)
 8003a8c:	0092      	lsls	r2, r2, #2
 8003a8e:	58d3      	ldr	r3, [r2, r3]
 8003a90:	221f      	movs	r2, #31
 8003a92:	4013      	ands	r3, r2
 8003a94:	000a      	movs	r2, r1
 8003a96:	40da      	lsrs	r2, r3
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_ClockConfig+0x208>)
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_ClockConfig+0x20c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7fd feb1 	bl	8001808 <HAL_InitTick>
 8003aa6:	0003      	movs	r3, r0
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b004      	add	sp, #16
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40022000 	.word	0x40022000
 8003ab4:	00001388 	.word	0x00001388
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	fffff0ff 	.word	0xfffff0ff
 8003ac0:	ffff8fff 	.word	0xffff8fff
 8003ac4:	080051dc 	.word	0x080051dc
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	20000004 	.word	0x20000004

08003ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ad6:	4b3c      	ldr	r3, [pc, #240]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2238      	movs	r2, #56	; 0x38
 8003adc:	4013      	ands	r3, r2
 8003ade:	d10f      	bne.n	8003b00 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003ae0:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0adb      	lsrs	r3, r3, #11
 8003ae6:	2207      	movs	r2, #7
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2201      	movs	r2, #1
 8003aec:	409a      	lsls	r2, r3
 8003aee:	0013      	movs	r3, r2
 8003af0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003af2:	6839      	ldr	r1, [r7, #0]
 8003af4:	4835      	ldr	r0, [pc, #212]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8003af6:	f7fc fb03 	bl	8000100 <__udivsi3>
 8003afa:	0003      	movs	r3, r0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	e05d      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b00:	4b31      	ldr	r3, [pc, #196]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2238      	movs	r2, #56	; 0x38
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d102      	bne.n	8003b12 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b0c:	4b30      	ldr	r3, [pc, #192]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	e054      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b12:	4b2d      	ldr	r3, [pc, #180]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2238      	movs	r2, #56	; 0x38
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d138      	bne.n	8003b90 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2203      	movs	r2, #3
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	2207      	movs	r2, #7
 8003b30:	4013      	ands	r3, r2
 8003b32:	3301      	adds	r3, #1
 8003b34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4824      	ldr	r0, [pc, #144]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b40:	f7fc fade 	bl	8000100 <__udivsi3>
 8003b44:	0003      	movs	r3, r0
 8003b46:	0019      	movs	r1, r3
 8003b48:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	227f      	movs	r2, #127	; 0x7f
 8003b50:	4013      	ands	r3, r2
 8003b52:	434b      	muls	r3, r1
 8003b54:	617b      	str	r3, [r7, #20]
        break;
 8003b56:	e00d      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	481c      	ldr	r0, [pc, #112]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b5c:	f7fc fad0 	bl	8000100 <__udivsi3>
 8003b60:	0003      	movs	r3, r0
 8003b62:	0019      	movs	r1, r3
 8003b64:	4b18      	ldr	r3, [pc, #96]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	227f      	movs	r2, #127	; 0x7f
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	434b      	muls	r3, r1
 8003b70:	617b      	str	r3, [r7, #20]
        break;
 8003b72:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	0f5b      	lsrs	r3, r3, #29
 8003b7a:	2207      	movs	r2, #7
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	3301      	adds	r3, #1
 8003b80:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	6978      	ldr	r0, [r7, #20]
 8003b86:	f7fc fabb 	bl	8000100 <__udivsi3>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	e015      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2238      	movs	r2, #56	; 0x38
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d103      	bne.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2238      	movs	r2, #56	; 0x38
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b18      	cmp	r3, #24
 8003bae:	d103      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003bb0:	23fa      	movs	r3, #250	; 0xfa
 8003bb2:	01db      	lsls	r3, r3, #7
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	e001      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bbc:	693b      	ldr	r3, [r7, #16]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b006      	add	sp, #24
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	00f42400 	.word	0x00f42400
 8003bd0:	007a1200 	.word	0x007a1200

08003bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd8:	4b02      	ldr	r3, [pc, #8]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	20000000 	.word	0x20000000

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b5b0      	push	{r4, r5, r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003bec:	f7ff fff2 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003bf0:	0004      	movs	r4, r0
 8003bf2:	f7ff fb43 	bl	800327c <LL_RCC_GetAPB1Prescaler>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	0b1a      	lsrs	r2, r3, #12
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bfc:	0092      	lsls	r2, r2, #2
 8003bfe:	58d3      	ldr	r3, [r2, r3]
 8003c00:	221f      	movs	r2, #31
 8003c02:	4013      	ands	r3, r2
 8003c04:	40dc      	lsrs	r4, r3
 8003c06:	0023      	movs	r3, r4
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	0800521c 	.word	0x0800521c

08003c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003c1c:	2313      	movs	r3, #19
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c24:	2312      	movs	r3, #18
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	029b      	lsls	r3, r3, #10
 8003c34:	4013      	ands	r3, r2
 8003c36:	d100      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003c38:	e0a3      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3a:	2011      	movs	r0, #17
 8003c3c:	183b      	adds	r3, r7, r0
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c42:	4b7f      	ldr	r3, [pc, #508]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	055b      	lsls	r3, r3, #21
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d110      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	4b7c      	ldr	r3, [pc, #496]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c52:	4b7b      	ldr	r3, [pc, #492]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c54:	2180      	movs	r1, #128	; 0x80
 8003c56:	0549      	lsls	r1, r1, #21
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c5c:	4b78      	ldr	r3, [pc, #480]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	055b      	lsls	r3, r3, #21
 8003c64:	4013      	ands	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6a:	183b      	adds	r3, r7, r0
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c70:	4b74      	ldr	r3, [pc, #464]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b73      	ldr	r3, [pc, #460]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	0049      	lsls	r1, r1, #1
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c7e:	f7fd fe1f 	bl	80018c0 <HAL_GetTick>
 8003c82:	0003      	movs	r3, r0
 8003c84:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c86:	e00b      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c88:	f7fd fe1a 	bl	80018c0 <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d904      	bls.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003c96:	2313      	movs	r3, #19
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	701a      	strb	r2, [r3, #0]
        break;
 8003c9e:	e005      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca0:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d0ed      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003cac:	2313      	movs	r3, #19
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d154      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cb6:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cba:	23c0      	movs	r3, #192	; 0xc0
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d019      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d014      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd2:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	4a5c      	ldr	r2, [pc, #368]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cdc:	4b58      	ldr	r3, [pc, #352]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ce0:	4b57      	ldr	r3, [pc, #348]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	0249      	lsls	r1, r1, #9
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cea:	4b55      	ldr	r3, [pc, #340]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cee:	4b54      	ldr	r3, [pc, #336]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cf0:	4956      	ldr	r1, [pc, #344]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cf6:	4b52      	ldr	r3, [pc, #328]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4013      	ands	r3, r2
 8003d02:	d016      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fd fddc 	bl	80018c0 <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0c:	e00c      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fd fdd7 	bl	80018c0 <HAL_GetTick>
 8003d12:	0002      	movs	r2, r0
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	4a4d      	ldr	r2, [pc, #308]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d904      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003d1e:	2313      	movs	r3, #19
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	2203      	movs	r2, #3
 8003d24:	701a      	strb	r2, [r3, #0]
            break;
 8003d26:	e004      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d28:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d0ed      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003d32:	2313      	movs	r3, #19
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3c:	4b40      	ldr	r3, [pc, #256]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	4a41      	ldr	r2, [pc, #260]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d50:	e00c      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d52:	2312      	movs	r3, #18
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	2213      	movs	r2, #19
 8003d58:	18ba      	adds	r2, r7, r2
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e005      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	2312      	movs	r3, #18
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	2213      	movs	r2, #19
 8003d66:	18ba      	adds	r2, r7, r2
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d6c:	2311      	movs	r3, #17
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d105      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4b32      	ldr	r3, [pc, #200]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d7c:	4935      	ldr	r1, [pc, #212]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2201      	movs	r2, #1
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8c:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	2203      	movs	r2, #3
 8003d92:	4393      	bics	r3, r2
 8003d94:	0019      	movs	r1, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2220      	movs	r2, #32
 8003da6:	4013      	ands	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003daa:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	01db      	lsls	r3, r3, #7
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d015      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dca:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	0899      	lsrs	r1, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	05db      	lsls	r3, r3, #23
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d106      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dee:	2180      	movs	r1, #128	; 0x80
 8003df0:	0249      	lsls	r1, r1, #9
 8003df2:	430a      	orrs	r2, r1
 8003df4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d016      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e12:	430a      	orrs	r2, r1
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	01db      	lsls	r3, r3, #7
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d106      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	0249      	lsls	r1, r1, #9
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e30:	2312      	movs	r3, #18
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	781b      	ldrb	r3, [r3, #0]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b006      	add	sp, #24
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40007000 	.word	0x40007000
 8003e48:	fffffcff 	.word	0xfffffcff
 8003e4c:	fffeffff 	.word	0xfffeffff
 8003e50:	00001388 	.word	0x00001388
 8003e54:	efffffff 	.word	0xefffffff
 8003e58:	ffffcfff 	.word	0xffffcfff
 8003e5c:	ffff3fff 	.word	0xffff3fff

08003e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e046      	b.n	8003f00 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2284      	movs	r2, #132	; 0x84
 8003e76:	589b      	ldr	r3, [r3, r2]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	2100      	movs	r1, #0
 8003e82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fd fb82 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2284      	movs	r2, #132	; 0x84
 8003e90:	2124      	movs	r1, #36	; 0x24
 8003e92:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 fa76 	bl	8004398 <UART_SetConfig>
 8003eac:	0003      	movs	r3, r0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e024      	b.n	8003f00 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 fbd3 	bl	800466c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	490d      	ldr	r1, [pc, #52]	; (8003f08 <HAL_UART_Init+0xa8>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	212a      	movs	r1, #42	; 0x2a
 8003ee2:	438a      	bics	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 fc6b 	bl	80047d4 <UART_CheckIdleState>
 8003efe:	0003      	movs	r3, r0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	ffffb7ff 	.word	0xffffb7ff

08003f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	1dbb      	adds	r3, r7, #6
 8003f1a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2284      	movs	r2, #132	; 0x84
 8003f20:	589b      	ldr	r3, [r3, r2]
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d000      	beq.n	8003f28 <HAL_UART_Transmit+0x1c>
 8003f26:	e097      	b.n	8004058 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_UART_Transmit+0x2a>
 8003f2e:	1dbb      	adds	r3, r7, #6
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e08f      	b.n	800405a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	015b      	lsls	r3, r3, #5
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d109      	bne.n	8003f5a <HAL_UART_Transmit+0x4e>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2201      	movs	r2, #1
 8003f52:	4013      	ands	r3, r2
 8003f54:	d001      	beq.n	8003f5a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e07f      	b.n	800405a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2280      	movs	r2, #128	; 0x80
 8003f5e:	5c9b      	ldrb	r3, [r3, r2]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_UART_Transmit+0x5c>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e078      	b.n	800405a <HAL_UART_Transmit+0x14e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2280      	movs	r2, #128	; 0x80
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	228c      	movs	r2, #140	; 0x8c
 8003f74:	2100      	movs	r1, #0
 8003f76:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2284      	movs	r2, #132	; 0x84
 8003f7c:	2121      	movs	r1, #33	; 0x21
 8003f7e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f80:	f7fd fc9e 	bl	80018c0 <HAL_GetTick>
 8003f84:	0003      	movs	r3, r0
 8003f86:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1dba      	adds	r2, r7, #6
 8003f8c:	2154      	movs	r1, #84	; 0x54
 8003f8e:	8812      	ldrh	r2, [r2, #0]
 8003f90:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1dba      	adds	r2, r7, #6
 8003f96:	2156      	movs	r1, #86	; 0x56
 8003f98:	8812      	ldrh	r2, [r2, #0]
 8003f9a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	015b      	lsls	r3, r3, #5
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d108      	bne.n	8003fba <HAL_UART_Transmit+0xae>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	e003      	b.n	8003fc2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2280      	movs	r2, #128	; 0x80
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003fca:	e02c      	b.n	8004026 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	0013      	movs	r3, r2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	f000 fc45 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 8003fde:	1e03      	subs	r3, r0, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e039      	b.n	800405a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	05d2      	lsls	r2, r2, #23
 8003ff8:	0dd2      	lsrs	r2, r2, #23
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	3302      	adds	r3, #2
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e007      	b.n	8004014 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3301      	adds	r3, #1
 8004012:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2256      	movs	r2, #86	; 0x56
 8004018:	5a9b      	ldrh	r3, [r3, r2]
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b299      	uxth	r1, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2256      	movs	r2, #86	; 0x56
 8004024:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2256      	movs	r2, #86	; 0x56
 800402a:	5a9b      	ldrh	r3, [r3, r2]
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1cc      	bne.n	8003fcc <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	0013      	movs	r3, r2
 800403c:	2200      	movs	r2, #0
 800403e:	2140      	movs	r1, #64	; 0x40
 8004040:	f000 fc12 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 8004044:	1e03      	subs	r3, r0, #0
 8004046:	d001      	beq.n	800404c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e006      	b.n	800405a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2284      	movs	r2, #132	; 0x84
 8004050:	2120      	movs	r1, #32
 8004052:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b008      	add	sp, #32
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b088      	sub	sp, #32
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	1dbb      	adds	r3, r7, #6
 800406e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2288      	movs	r2, #136	; 0x88
 8004074:	589b      	ldr	r3, [r3, r2]
 8004076:	2b20      	cmp	r3, #32
 8004078:	d150      	bne.n	800411c <HAL_UART_Receive_DMA+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_UART_Receive_DMA+0x26>
 8004080:	1dbb      	adds	r3, r7, #6
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e048      	b.n	800411e <HAL_UART_Receive_DMA+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	015b      	lsls	r3, r3, #5
 8004094:	429a      	cmp	r2, r3
 8004096:	d109      	bne.n	80040ac <HAL_UART_Receive_DMA+0x4a>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2201      	movs	r2, #1
 80040a4:	4013      	ands	r3, r2
 80040a6:	d001      	beq.n	80040ac <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e038      	b.n	800411e <HAL_UART_Receive_DMA+0xbc>
      }
    }

    __HAL_LOCK(huart);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	5c9b      	ldrb	r3, [r3, r2]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Receive_DMA+0x58>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e031      	b.n	800411e <HAL_UART_Receive_DMA+0xbc>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2280      	movs	r2, #128	; 0x80
 80040be:	2101      	movs	r1, #1
 80040c0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	2380      	movs	r3, #128	; 0x80
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	4013      	ands	r3, r2
 80040d4:	d019      	beq.n	800410a <HAL_UART_Receive_DMA+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d6:	f3ef 8310 	mrs	r3, PRIMASK
 80040da:	613b      	str	r3, [r7, #16]
  return(result);
 80040dc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	2301      	movs	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f383 8810 	msr	PRIMASK, r3
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	04c9      	lsls	r1, r1, #19
 80040fa:	430a      	orrs	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800410a:	1dbb      	adds	r3, r7, #6
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	0018      	movs	r0, r3
 8004114:	f000 fc70 	bl	80049f8 <UART_Start_Receive_DMA>
 8004118:	0003      	movs	r3, r0
 800411a:	e000      	b.n	800411e <HAL_UART_Receive_DMA+0xbc>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b008      	add	sp, #32
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b094      	sub	sp, #80	; 0x50
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2284      	movs	r2, #132	; 0x84
 8004134:	589b      	ldr	r3, [r3, r2]
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2288      	movs	r2, #136	; 0x88
 800413c:	589b      	ldr	r3, [r3, r2]
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48

  __HAL_LOCK(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2280      	movs	r2, #128	; 0x80
 8004144:	5c9b      	ldrb	r3, [r3, r2]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_UART_DMAPause+0x26>
 800414a:	2302      	movs	r3, #2
 800414c:	e080      	b.n	8004250 <HAL_UART_DMAPause+0x128>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	2101      	movs	r1, #1
 8004154:	5499      	strb	r1, [r3, r2]

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	4013      	ands	r3, r2
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d11b      	bne.n	800419c <HAL_UART_DMAPause+0x74>
 8004164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004166:	2b21      	cmp	r3, #33	; 0x21
 8004168:	d118      	bne.n	800419c <HAL_UART_DMAPause+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416a:	f3ef 8310 	mrs	r3, PRIMASK
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004172:	647b      	str	r3, [r7, #68]	; 0x44
 8004174:	2301      	movs	r3, #1
 8004176:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	f383 8810 	msr	PRIMASK, r3
}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	438a      	bics	r2, r1
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			; (mov r8, r8)
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2240      	movs	r2, #64	; 0x40
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b40      	cmp	r3, #64	; 0x40
 80041a8:	d14d      	bne.n	8004246 <HAL_UART_DMAPause+0x11e>
 80041aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ac:	2b22      	cmp	r3, #34	; 0x22
 80041ae:	d14a      	bne.n	8004246 <HAL_UART_DMAPause+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b0:	f3ef 8310 	mrs	r3, PRIMASK
 80041b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041b6:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041b8:	643b      	str	r3, [r7, #64]	; 0x40
 80041ba:	2301      	movs	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f383 8810 	msr	PRIMASK, r3
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4921      	ldr	r1, [pc, #132]	; (8004258 <HAL_UART_DMAPause+0x130>)
 80041d2:	400a      	ands	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f383 8810 	msr	PRIMASK, r3
}
 80041e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e2:	f3ef 8310 	mrs	r3, PRIMASK
 80041e6:	617b      	str	r3, [r7, #20]
  return(result);
 80041e8:	697b      	ldr	r3, [r7, #20]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ec:	2301      	movs	r3, #1
 80041ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f383 8810 	msr	PRIMASK, r3
}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2101      	movs	r1, #1
 8004204:	438a      	bics	r2, r1
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f383 8810 	msr	PRIMASK, r3
}
 8004212:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004214:	f3ef 8310 	mrs	r3, PRIMASK
 8004218:	623b      	str	r3, [r7, #32]
  return(result);
 800421a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800421c:	63bb      	str	r3, [r7, #56]	; 0x38
 800421e:	2301      	movs	r3, #1
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	f383 8810 	msr	PRIMASK, r3
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2140      	movs	r1, #64	; 0x40
 8004236:	438a      	bics	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	f383 8810 	msr	PRIMASK, r3
}
 8004244:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2280      	movs	r2, #128	; 0x80
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b014      	add	sp, #80	; 0x50
 8004256:	bd80      	pop	{r7, pc}
 8004258:	fffffeff 	.word	0xfffffeff

0800425c <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b092      	sub	sp, #72	; 0x48
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	5c9b      	ldrb	r3, [r3, r2]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_UART_DMAResume+0x16>
 800426e:	2302      	movs	r3, #2
 8004270:	e07b      	b.n	800436a <HAL_UART_DMAResume+0x10e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	2101      	movs	r1, #1
 8004278:	5499      	strb	r1, [r3, r2]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2284      	movs	r2, #132	; 0x84
 800427e:	589b      	ldr	r3, [r3, r2]
 8004280:	2b21      	cmp	r3, #33	; 0x21
 8004282:	d118      	bne.n	80042b6 <HAL_UART_DMAResume+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004284:	f3ef 8310 	mrs	r3, PRIMASK
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800428c:	647b      	str	r3, [r7, #68]	; 0x44
 800428e:	2301      	movs	r3, #1
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	f383 8810 	msr	PRIMASK, r3
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	430a      	orrs	r2, r1
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	f383 8810 	msr	PRIMASK, r3
}
 80042b4:	46c0      	nop			; (mov r8, r8)
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2288      	movs	r2, #136	; 0x88
 80042ba:	589b      	ldr	r3, [r3, r2]
 80042bc:	2b22      	cmp	r3, #34	; 0x22
 80042be:	d14f      	bne.n	8004360 <HAL_UART_DMAResume+0x104>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2208      	movs	r2, #8
 80042c6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c8:	f3ef 8310 	mrs	r3, PRIMASK
 80042cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80042ce:	68bb      	ldr	r3, [r7, #8]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042d0:	643b      	str	r3, [r7, #64]	; 0x40
 80042d2:	2301      	movs	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f383 8810 	msr	PRIMASK, r3
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	0049      	lsls	r1, r1, #1
 80042ec:	430a      	orrs	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004300:	617b      	str	r3, [r7, #20]
  return(result);
 8004302:	697b      	ldr	r3, [r7, #20]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004306:	2301      	movs	r3, #1
 8004308:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f383 8810 	msr	PRIMASK, r3
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2101      	movs	r1, #1
 800431e:	430a      	orrs	r2, r1
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004324:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f383 8810 	msr	PRIMASK, r3
}
 800432c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432e:	f3ef 8310 	mrs	r3, PRIMASK
 8004332:	623b      	str	r3, [r7, #32]
  return(result);
 8004334:	6a3b      	ldr	r3, [r7, #32]

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004336:	63bb      	str	r3, [r7, #56]	; 0x38
 8004338:	2301      	movs	r3, #1
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	f383 8810 	msr	PRIMASK, r3
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	430a      	orrs	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	f383 8810 	msr	PRIMASK, r3
}
 800435e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b012      	add	sp, #72	; 0x48
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	000a      	movs	r2, r1
 800438c:	1cbb      	adds	r3, r7, #2
 800438e:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a0:	231a      	movs	r3, #26
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4aa1      	ldr	r2, [pc, #644]	; (800464c <UART_SetConfig+0x2b4>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	0019      	movs	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a9c      	ldr	r2, [pc, #624]	; (8004650 <UART_SetConfig+0x2b8>)
 80043de:	4013      	ands	r3, r2
 80043e0:	0019      	movs	r1, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a93      	ldr	r2, [pc, #588]	; (8004654 <UART_SetConfig+0x2bc>)
 8004406:	4013      	ands	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	430a      	orrs	r2, r1
 8004412:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	220f      	movs	r2, #15
 800441c:	4393      	bics	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a89      	ldr	r2, [pc, #548]	; (8004658 <UART_SetConfig+0x2c0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d127      	bne.n	8004486 <UART_SetConfig+0xee>
 8004436:	4b89      	ldr	r3, [pc, #548]	; (800465c <UART_SetConfig+0x2c4>)
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	2203      	movs	r2, #3
 800443c:	4013      	ands	r3, r2
 800443e:	2b03      	cmp	r3, #3
 8004440:	d017      	beq.n	8004472 <UART_SetConfig+0xda>
 8004442:	d81b      	bhi.n	800447c <UART_SetConfig+0xe4>
 8004444:	2b02      	cmp	r3, #2
 8004446:	d00a      	beq.n	800445e <UART_SetConfig+0xc6>
 8004448:	d818      	bhi.n	800447c <UART_SetConfig+0xe4>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <UART_SetConfig+0xbc>
 800444e:	2b01      	cmp	r3, #1
 8004450:	d00a      	beq.n	8004468 <UART_SetConfig+0xd0>
 8004452:	e013      	b.n	800447c <UART_SetConfig+0xe4>
 8004454:	231b      	movs	r3, #27
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e021      	b.n	80044a2 <UART_SetConfig+0x10a>
 800445e:	231b      	movs	r3, #27
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	2202      	movs	r2, #2
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e01c      	b.n	80044a2 <UART_SetConfig+0x10a>
 8004468:	231b      	movs	r3, #27
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	2204      	movs	r2, #4
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e017      	b.n	80044a2 <UART_SetConfig+0x10a>
 8004472:	231b      	movs	r3, #27
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2208      	movs	r2, #8
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	e012      	b.n	80044a2 <UART_SetConfig+0x10a>
 800447c:	231b      	movs	r3, #27
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2210      	movs	r2, #16
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e00d      	b.n	80044a2 <UART_SetConfig+0x10a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a75      	ldr	r2, [pc, #468]	; (8004660 <UART_SetConfig+0x2c8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d104      	bne.n	800449a <UART_SetConfig+0x102>
 8004490:	231b      	movs	r3, #27
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	e003      	b.n	80044a2 <UART_SetConfig+0x10a>
 800449a:	231b      	movs	r3, #27
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	2210      	movs	r2, #16
 80044a0:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d000      	beq.n	80044b0 <UART_SetConfig+0x118>
 80044ae:	e066      	b.n	800457e <UART_SetConfig+0x1e6>
  {
    switch (clocksource)
 80044b0:	231b      	movs	r3, #27
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d015      	beq.n	80044e6 <UART_SetConfig+0x14e>
 80044ba:	dc18      	bgt.n	80044ee <UART_SetConfig+0x156>
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d00d      	beq.n	80044dc <UART_SetConfig+0x144>
 80044c0:	dc15      	bgt.n	80044ee <UART_SetConfig+0x156>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <UART_SetConfig+0x134>
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d005      	beq.n	80044d6 <UART_SetConfig+0x13e>
 80044ca:	e010      	b.n	80044ee <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7ff fb8c 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 80044d0:	0003      	movs	r3, r0
 80044d2:	617b      	str	r3, [r7, #20]
        break;
 80044d4:	e012      	b.n	80044fc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d6:	4b63      	ldr	r3, [pc, #396]	; (8004664 <UART_SetConfig+0x2cc>)
 80044d8:	617b      	str	r3, [r7, #20]
        break;
 80044da:	e00f      	b.n	80044fc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044dc:	f7ff faf8 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 80044e0:	0003      	movs	r3, r0
 80044e2:	617b      	str	r3, [r7, #20]
        break;
 80044e4:	e00a      	b.n	80044fc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	617b      	str	r3, [r7, #20]
        break;
 80044ec:	e006      	b.n	80044fc <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044f2:	231a      	movs	r3, #26
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
        break;
 80044fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d100      	bne.n	8004504 <UART_SetConfig+0x16c>
 8004502:	e08e      	b.n	8004622 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004508:	4b57      	ldr	r3, [pc, #348]	; (8004668 <UART_SetConfig+0x2d0>)
 800450a:	0052      	lsls	r2, r2, #1
 800450c:	5ad3      	ldrh	r3, [r2, r3]
 800450e:	0019      	movs	r1, r3
 8004510:	6978      	ldr	r0, [r7, #20]
 8004512:	f7fb fdf5 	bl	8000100 <__udivsi3>
 8004516:	0003      	movs	r3, r0
 8004518:	005a      	lsls	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	18d2      	adds	r2, r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	0019      	movs	r1, r3
 8004528:	0010      	movs	r0, r2
 800452a:	f7fb fde9 	bl	8000100 <__udivsi3>
 800452e:	0003      	movs	r3, r0
 8004530:	b29b      	uxth	r3, r3
 8004532:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d91c      	bls.n	8004574 <UART_SetConfig+0x1dc>
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	025b      	lsls	r3, r3, #9
 8004540:	429a      	cmp	r2, r3
 8004542:	d217      	bcs.n	8004574 <UART_SetConfig+0x1dc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	b29a      	uxth	r2, r3
 8004548:	200e      	movs	r0, #14
 800454a:	183b      	adds	r3, r7, r0
 800454c:	210f      	movs	r1, #15
 800454e:	438a      	bics	r2, r1
 8004550:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	2207      	movs	r2, #7
 800455a:	4013      	ands	r3, r2
 800455c:	b299      	uxth	r1, r3
 800455e:	183b      	adds	r3, r7, r0
 8004560:	183a      	adds	r2, r7, r0
 8004562:	8812      	ldrh	r2, [r2, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	183a      	adds	r2, r7, r0
 800456e:	8812      	ldrh	r2, [r2, #0]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	e056      	b.n	8004622 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 8004574:	231a      	movs	r3, #26
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	e051      	b.n	8004622 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800457e:	231b      	movs	r3, #27
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d015      	beq.n	80045b4 <UART_SetConfig+0x21c>
 8004588:	dc18      	bgt.n	80045bc <UART_SetConfig+0x224>
 800458a:	2b04      	cmp	r3, #4
 800458c:	d00d      	beq.n	80045aa <UART_SetConfig+0x212>
 800458e:	dc15      	bgt.n	80045bc <UART_SetConfig+0x224>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <UART_SetConfig+0x202>
 8004594:	2b02      	cmp	r3, #2
 8004596:	d005      	beq.n	80045a4 <UART_SetConfig+0x20c>
 8004598:	e010      	b.n	80045bc <UART_SetConfig+0x224>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800459a:	f7ff fb25 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 800459e:	0003      	movs	r3, r0
 80045a0:	617b      	str	r3, [r7, #20]
        break;
 80045a2:	e012      	b.n	80045ca <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a4:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <UART_SetConfig+0x2cc>)
 80045a6:	617b      	str	r3, [r7, #20]
        break;
 80045a8:	e00f      	b.n	80045ca <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045aa:	f7ff fa91 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 80045ae:	0003      	movs	r3, r0
 80045b0:	617b      	str	r3, [r7, #20]
        break;
 80045b2:	e00a      	b.n	80045ca <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	617b      	str	r3, [r7, #20]
        break;
 80045ba:	e006      	b.n	80045ca <UART_SetConfig+0x232>
      default:
        pclk = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045c0:	231a      	movs	r3, #26
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	2201      	movs	r2, #1
 80045c6:	701a      	strb	r2, [r3, #0]
        break;
 80045c8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d028      	beq.n	8004622 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d4:	4b24      	ldr	r3, [pc, #144]	; (8004668 <UART_SetConfig+0x2d0>)
 80045d6:	0052      	lsls	r2, r2, #1
 80045d8:	5ad3      	ldrh	r3, [r2, r3]
 80045da:	0019      	movs	r1, r3
 80045dc:	6978      	ldr	r0, [r7, #20]
 80045de:	f7fb fd8f 	bl	8000100 <__udivsi3>
 80045e2:	0003      	movs	r3, r0
 80045e4:	001a      	movs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	18d2      	adds	r2, r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	0019      	movs	r1, r3
 80045f4:	0010      	movs	r0, r2
 80045f6:	f7fb fd83 	bl	8000100 <__udivsi3>
 80045fa:	0003      	movs	r3, r0
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	d909      	bls.n	800461a <UART_SetConfig+0x282>
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	025b      	lsls	r3, r3, #9
 800460c:	429a      	cmp	r2, r3
 800460e:	d204      	bcs.n	800461a <UART_SetConfig+0x282>
      {
        huart->Instance->BRR = usartdiv;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e003      	b.n	8004622 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 800461a:	231a      	movs	r3, #26
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	226a      	movs	r2, #106	; 0x6a
 8004626:	2101      	movs	r1, #1
 8004628:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2268      	movs	r2, #104	; 0x68
 800462e:	2101      	movs	r1, #1
 8004630:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800463e:	231a      	movs	r3, #26
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	781b      	ldrb	r3, [r3, #0]
}
 8004644:	0018      	movs	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	b008      	add	sp, #32
 800464a:	bd80      	pop	{r7, pc}
 800464c:	cfff69f3 	.word	0xcfff69f3
 8004650:	ffffcfff 	.word	0xffffcfff
 8004654:	11fff4ff 	.word	0x11fff4ff
 8004658:	40013800 	.word	0x40013800
 800465c:	40021000 	.word	0x40021000
 8004660:	40004400 	.word	0x40004400
 8004664:	00f42400 	.word	0x00f42400
 8004668:	0800523c 	.word	0x0800523c

0800466c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	2201      	movs	r2, #1
 800467a:	4013      	ands	r3, r2
 800467c:	d00b      	beq.n	8004696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4a4a      	ldr	r2, [pc, #296]	; (80047b0 <UART_AdvFeatureConfig+0x144>)
 8004686:	4013      	ands	r3, r2
 8004688:	0019      	movs	r1, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	2202      	movs	r2, #2
 800469c:	4013      	ands	r3, r2
 800469e:	d00b      	beq.n	80046b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4a43      	ldr	r2, [pc, #268]	; (80047b4 <UART_AdvFeatureConfig+0x148>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	0019      	movs	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	2204      	movs	r2, #4
 80046be:	4013      	ands	r3, r2
 80046c0:	d00b      	beq.n	80046da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4a3b      	ldr	r2, [pc, #236]	; (80047b8 <UART_AdvFeatureConfig+0x14c>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	0019      	movs	r1, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	2208      	movs	r2, #8
 80046e0:	4013      	ands	r3, r2
 80046e2:	d00b      	beq.n	80046fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4a34      	ldr	r2, [pc, #208]	; (80047bc <UART_AdvFeatureConfig+0x150>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	0019      	movs	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	2210      	movs	r2, #16
 8004702:	4013      	ands	r3, r2
 8004704:	d00b      	beq.n	800471e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <UART_AdvFeatureConfig+0x154>)
 800470e:	4013      	ands	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	2220      	movs	r2, #32
 8004724:	4013      	ands	r3, r2
 8004726:	d00b      	beq.n	8004740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <UART_AdvFeatureConfig+0x158>)
 8004730:	4013      	ands	r3, r2
 8004732:	0019      	movs	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	2240      	movs	r2, #64	; 0x40
 8004746:	4013      	ands	r3, r2
 8004748:	d01d      	beq.n	8004786 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <UART_AdvFeatureConfig+0x15c>)
 8004752:	4013      	ands	r3, r2
 8004754:	0019      	movs	r1, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	035b      	lsls	r3, r3, #13
 800476a:	429a      	cmp	r2, r3
 800476c:	d10b      	bne.n	8004786 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a15      	ldr	r2, [pc, #84]	; (80047cc <UART_AdvFeatureConfig+0x160>)
 8004776:	4013      	ands	r3, r2
 8004778:	0019      	movs	r1, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	4013      	ands	r3, r2
 800478e:	d00b      	beq.n	80047a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <UART_AdvFeatureConfig+0x164>)
 8004798:	4013      	ands	r3, r2
 800479a:	0019      	movs	r1, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	605a      	str	r2, [r3, #4]
  }
}
 80047a8:	46c0      	nop			; (mov r8, r8)
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b002      	add	sp, #8
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	fffdffff 	.word	0xfffdffff
 80047b4:	fffeffff 	.word	0xfffeffff
 80047b8:	fffbffff 	.word	0xfffbffff
 80047bc:	ffff7fff 	.word	0xffff7fff
 80047c0:	ffffefff 	.word	0xffffefff
 80047c4:	ffffdfff 	.word	0xffffdfff
 80047c8:	ffefffff 	.word	0xffefffff
 80047cc:	ff9fffff 	.word	0xff9fffff
 80047d0:	fff7ffff 	.word	0xfff7ffff

080047d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af02      	add	r7, sp, #8
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	228c      	movs	r2, #140	; 0x8c
 80047e0:	2100      	movs	r1, #0
 80047e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e4:	f7fd f86c 	bl	80018c0 <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2208      	movs	r2, #8
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d10c      	bne.n	8004814 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2280      	movs	r2, #128	; 0x80
 80047fe:	0391      	lsls	r1, r2, #14
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4a18      	ldr	r2, [pc, #96]	; (8004864 <UART_CheckIdleState+0x90>)
 8004804:	9200      	str	r2, [sp, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	f000 f82e 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 800480c:	1e03      	subs	r3, r0, #0
 800480e:	d001      	beq.n	8004814 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e023      	b.n	800485c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2204      	movs	r2, #4
 800481c:	4013      	ands	r3, r2
 800481e:	2b04      	cmp	r3, #4
 8004820:	d10c      	bne.n	800483c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2280      	movs	r2, #128	; 0x80
 8004826:	03d1      	lsls	r1, r2, #15
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4a0e      	ldr	r2, [pc, #56]	; (8004864 <UART_CheckIdleState+0x90>)
 800482c:	9200      	str	r2, [sp, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	f000 f81a 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 8004834:	1e03      	subs	r3, r0, #0
 8004836:	d001      	beq.n	800483c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e00f      	b.n	800485c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2284      	movs	r2, #132	; 0x84
 8004840:	2120      	movs	r1, #32
 8004842:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2288      	movs	r2, #136	; 0x88
 8004848:	2120      	movs	r1, #32
 800484a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2280      	movs	r2, #128	; 0x80
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b004      	add	sp, #16
 8004862:	bd80      	pop	{r7, pc}
 8004864:	01ffffff 	.word	0x01ffffff

08004868 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b094      	sub	sp, #80	; 0x50
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	1dfb      	adds	r3, r7, #7
 8004876:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004878:	e0a7      	b.n	80049ca <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800487c:	3301      	adds	r3, #1
 800487e:	d100      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004880:	e0a3      	b.n	80049ca <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004882:	f7fd f81d 	bl	80018c0 <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800488e:	429a      	cmp	r2, r3
 8004890:	d302      	bcc.n	8004898 <UART_WaitOnFlagUntilTimeout+0x30>
 8004892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004894:	2b00      	cmp	r3, #0
 8004896:	d13f      	bne.n	8004918 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004898:	f3ef 8310 	mrs	r3, PRIMASK
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44
 80048a2:	2301      	movs	r3, #1
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	f383 8810 	msr	PRIMASK, r3
}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	494e      	ldr	r1, [pc, #312]	; (80049f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80048ba:	400a      	ands	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	f383 8810 	msr	PRIMASK, r3
}
 80048c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ca:	f3ef 8310 	mrs	r3, PRIMASK
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80048d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d2:	643b      	str	r3, [r7, #64]	; 0x40
 80048d4:	2301      	movs	r3, #1
 80048d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	f383 8810 	msr	PRIMASK, r3
}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2101      	movs	r1, #1
 80048ec:	438a      	bics	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2284      	movs	r2, #132	; 0x84
 8004900:	2120      	movs	r1, #32
 8004902:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2288      	movs	r2, #136	; 0x88
 8004908:	2120      	movs	r1, #32
 800490a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2280      	movs	r2, #128	; 0x80
 8004910:	2100      	movs	r1, #0
 8004912:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e069      	b.n	80049ec <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2204      	movs	r2, #4
 8004920:	4013      	ands	r3, r2
 8004922:	d052      	beq.n	80049ca <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	401a      	ands	r2, r3
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	429a      	cmp	r2, r3
 8004936:	d148      	bne.n	80049ca <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2280      	movs	r2, #128	; 0x80
 800493e:	0112      	lsls	r2, r2, #4
 8004940:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	613b      	str	r3, [r7, #16]
  return(result);
 8004948:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f383 8810 	msr	PRIMASK, r3
}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4924      	ldr	r1, [pc, #144]	; (80049f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004964:	400a      	ands	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004974:	f3ef 8310 	mrs	r3, PRIMASK
 8004978:	61fb      	str	r3, [r7, #28]
  return(result);
 800497a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497c:	64bb      	str	r3, [r7, #72]	; 0x48
 800497e:	2301      	movs	r3, #1
 8004980:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	f383 8810 	msr	PRIMASK, r3
}
 8004988:	46c0      	nop			; (mov r8, r8)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2101      	movs	r1, #1
 8004996:	438a      	bics	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2284      	movs	r2, #132	; 0x84
 80049aa:	2120      	movs	r1, #32
 80049ac:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2288      	movs	r2, #136	; 0x88
 80049b2:	2120      	movs	r1, #32
 80049b4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	228c      	movs	r2, #140	; 0x8c
 80049ba:	2120      	movs	r1, #32
 80049bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2280      	movs	r2, #128	; 0x80
 80049c2:	2100      	movs	r1, #0
 80049c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e010      	b.n	80049ec <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	4013      	ands	r3, r2
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	425a      	negs	r2, r3
 80049da:	4153      	adcs	r3, r2
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	001a      	movs	r2, r3
 80049e0:	1dfb      	adds	r3, r7, #7
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d100      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0x182>
 80049e8:	e747      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b014      	add	sp, #80	; 0x50
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	fffffe5f 	.word	0xfffffe5f

080049f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b090      	sub	sp, #64	; 0x40
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	1dbb      	adds	r3, r7, #6
 8004a04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1dba      	adds	r2, r7, #6
 8004a10:	215c      	movs	r1, #92	; 0x5c
 8004a12:	8812      	ldrh	r2, [r2, #0]
 8004a14:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	228c      	movs	r2, #140	; 0x8c
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2288      	movs	r2, #136	; 0x88
 8004a22:	2122      	movs	r1, #34	; 0x22
 8004a24:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02c      	beq.n	8004a88 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a32:	4a40      	ldr	r2, [pc, #256]	; (8004b34 <UART_Start_Receive_DMA+0x13c>)
 8004a34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3a:	4a3f      	ldr	r2, [pc, #252]	; (8004b38 <UART_Start_Receive_DMA+0x140>)
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a42:	4a3e      	ldr	r2, [pc, #248]	; (8004b3c <UART_Start_Receive_DMA+0x144>)
 8004a44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3324      	adds	r3, #36	; 0x24
 8004a58:	0019      	movs	r1, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	001a      	movs	r2, r3
 8004a60:	1dbb      	adds	r3, r7, #6
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	f7fd ff52 	bl	800290c <HAL_DMA_Start_IT>
 8004a68:	1e03      	subs	r3, r0, #0
 8004a6a:	d00d      	beq.n	8004a88 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	228c      	movs	r2, #140	; 0x8c
 8004a70:	2110      	movs	r1, #16
 8004a72:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	2100      	movs	r1, #0
 8004a7a:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2288      	movs	r2, #136	; 0x88
 8004a80:	2120      	movs	r1, #32
 8004a82:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e050      	b.n	8004b2a <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2280      	movs	r2, #128	; 0x80
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a90:	f3ef 8310 	mrs	r3, PRIMASK
 8004a94:	613b      	str	r3, [r7, #16]
  return(result);
 8004a96:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f383 8810 	msr	PRIMASK, r3
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2180      	movs	r1, #128	; 0x80
 8004ab2:	0049      	lsls	r1, r1, #1
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004aca:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ace:	2301      	movs	r3, #1
 8004ad0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f383 8810 	msr	PRIMASK, r3
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	609a      	str	r2, [r3, #8]
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	f383 8810 	msr	PRIMASK, r3
}
 8004af4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af6:	f3ef 8310 	mrs	r3, PRIMASK
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34
 8004b00:	2301      	movs	r3, #1
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	f383 8810 	msr	PRIMASK, r3
}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2140      	movs	r1, #64	; 0x40
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	f383 8810 	msr	PRIMASK, r3
}
 8004b26:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b010      	add	sp, #64	; 0x40
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	08004c8d 	.word	0x08004c8d
 8004b38:	08004db5 	.word	0x08004db5
 8004b3c:	08004df1 	.word	0x08004df1

08004b40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b48:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
 8004b52:	2301      	movs	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f383 8810 	msr	PRIMASK, r3
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	21c0      	movs	r1, #192	; 0xc0
 8004b6a:	438a      	bics	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f383 8810 	msr	PRIMASK, r3
}
 8004b78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7e:	617b      	str	r3, [r7, #20]
  return(result);
 8004b80:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004b82:	623b      	str	r3, [r7, #32]
 8004b84:	2301      	movs	r3, #1
 8004b86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f383 8810 	msr	PRIMASK, r3
}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4908      	ldr	r1, [pc, #32]	; (8004bbc <UART_EndTxTransfer+0x7c>)
 8004b9c:	400a      	ands	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f383 8810 	msr	PRIMASK, r3
}
 8004baa:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2284      	movs	r2, #132	; 0x84
 8004bb0:	2120      	movs	r1, #32
 8004bb2:	5099      	str	r1, [r3, r2]
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b00a      	add	sp, #40	; 0x28
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	ff7fffff 	.word	0xff7fffff

08004bc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08e      	sub	sp, #56	; 0x38
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8004bce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f383 8810 	msr	PRIMASK, r3
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4926      	ldr	r1, [pc, #152]	; (8004c84 <UART_EndRxTransfer+0xc4>)
 8004bea:	400a      	ands	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfe:	623b      	str	r3, [r7, #32]
  return(result);
 8004c00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
 8004c04:	2301      	movs	r3, #1
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	491b      	ldr	r1, [pc, #108]	; (8004c88 <UART_EndRxTransfer+0xc8>)
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	f383 8810 	msr	PRIMASK, r3
}
 8004c2a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d118      	bne.n	8004c66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c34:	f3ef 8310 	mrs	r3, PRIMASK
 8004c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3e:	2301      	movs	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			; (mov r8, r8)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2110      	movs	r1, #16
 8004c56:	438a      	bics	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f383 8810 	msr	PRIMASK, r3
}
 8004c64:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2288      	movs	r2, #136	; 0x88
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b00e      	add	sp, #56	; 0x38
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	fffffedf 	.word	0xfffffedf
 8004c88:	effffffe 	.word	0xeffffffe

08004c8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b094      	sub	sp, #80	; 0x50
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d16f      	bne.n	8004d86 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca8:	225e      	movs	r2, #94	; 0x5e
 8004caa:	2100      	movs	r1, #0
 8004cac:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cae:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cb4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cb8:	2301      	movs	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f383 8810 	msr	PRIMASK, r3
}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4938      	ldr	r1, [pc, #224]	; (8004db0 <UART_DMAReceiveCplt+0x124>)
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	f383 8810 	msr	PRIMASK, r3
}
 8004cde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cea:	2301      	movs	r3, #1
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	f383 8810 	msr	PRIMASK, r3
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
 8004cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2101      	movs	r1, #1
 8004d02:	438a      	bics	r2, r1
 8004d04:	609a      	str	r2, [r3, #8]
 8004d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	f383 8810 	msr	PRIMASK, r3
}
 8004d10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d12:	f3ef 8310 	mrs	r3, PRIMASK
 8004d16:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	f383 8810 	msr	PRIMASK, r3
}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2140      	movs	r1, #64	; 0x40
 8004d34:	438a      	bics	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f383 8810 	msr	PRIMASK, r3
}
 8004d42:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d46:	2288      	movs	r2, #136	; 0x88
 8004d48:	2120      	movs	r1, #32
 8004d4a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d118      	bne.n	8004d86 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d54:	f3ef 8310 	mrs	r3, PRIMASK
 8004d58:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5e:	2301      	movs	r3, #1
 8004d60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f383 8810 	msr	PRIMASK, r3
}
 8004d68:	46c0      	nop			; (mov r8, r8)
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2110      	movs	r1, #16
 8004d76:	438a      	bics	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f383 8810 	msr	PRIMASK, r3
}
 8004d84:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d108      	bne.n	8004da0 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d90:	225c      	movs	r2, #92	; 0x5c
 8004d92:	5a9a      	ldrh	r2, [r3, r2]
 8004d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d96:	0011      	movs	r1, r2
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff faf2 	bl	8004382 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d9e:	e003      	b.n	8004da8 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7fb fe3e 	bl	8000a24 <HAL_UART_RxCpltCallback>
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b014      	add	sp, #80	; 0x50
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	fffffeff 	.word	0xfffffeff

08004db4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d10a      	bne.n	8004de0 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	225c      	movs	r2, #92	; 0x5c
 8004dce:	5a9b      	ldrh	r3, [r3, r2]
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	0011      	movs	r1, r2
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7ff fad2 	bl	8004382 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dde:	e003      	b.n	8004de8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7fb fe2c 	bl	8000a40 <HAL_UART_RxHalfCpltCallback>
}
 8004de8:	46c0      	nop			; (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b004      	add	sp, #16
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2284      	movs	r2, #132	; 0x84
 8004e02:	589b      	ldr	r3, [r3, r2]
 8004e04:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2288      	movs	r2, #136	; 0x88
 8004e0a:	589b      	ldr	r3, [r3, r2]
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2280      	movs	r2, #128	; 0x80
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b80      	cmp	r3, #128	; 0x80
 8004e1a:	d10a      	bne.n	8004e32 <UART_DMAError+0x42>
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b21      	cmp	r3, #33	; 0x21
 8004e20:	d107      	bne.n	8004e32 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2256      	movs	r2, #86	; 0x56
 8004e26:	2100      	movs	r1, #0
 8004e28:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f7ff fe87 	bl	8004b40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2240      	movs	r2, #64	; 0x40
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d10a      	bne.n	8004e56 <UART_DMAError+0x66>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b22      	cmp	r3, #34	; 0x22
 8004e44:	d107      	bne.n	8004e56 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	225e      	movs	r2, #94	; 0x5e
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7ff feb5 	bl	8004bc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	228c      	movs	r2, #140	; 0x8c
 8004e5a:	589b      	ldr	r3, [r3, r2]
 8004e5c:	2210      	movs	r2, #16
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	218c      	movs	r1, #140	; 0x8c
 8004e64:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f7ff fa82 	bl	8004372 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b006      	add	sp, #24
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2280      	movs	r2, #128	; 0x80
 8004e84:	5c9b      	ldrb	r3, [r3, r2]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_UARTEx_DisableFifoMode+0x16>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e027      	b.n	8004ede <HAL_UARTEx_DisableFifoMode+0x66>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2280      	movs	r2, #128	; 0x80
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2284      	movs	r2, #132	; 0x84
 8004e9a:	2124      	movs	r1, #36	; 0x24
 8004e9c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	438a      	bics	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a0b      	ldr	r2, [pc, #44]	; (8004ee8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2284      	movs	r2, #132	; 0x84
 8004ed0:	2120      	movs	r1, #32
 8004ed2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	2100      	movs	r1, #0
 8004eda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b004      	add	sp, #16
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	dfffffff 	.word	0xdfffffff

08004eec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2280      	movs	r2, #128	; 0x80
 8004efa:	5c9b      	ldrb	r3, [r3, r2]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e02e      	b.n	8004f62 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2280      	movs	r2, #128	; 0x80
 8004f08:	2101      	movs	r1, #1
 8004f0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2284      	movs	r2, #132	; 0x84
 8004f10:	2124      	movs	r1, #36	; 0x24
 8004f12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2101      	movs	r1, #1
 8004f28:	438a      	bics	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	08d9      	lsrs	r1, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	0018      	movs	r0, r3
 8004f44:	f000 f854 	bl	8004ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2284      	movs	r2, #132	; 0x84
 8004f54:	2120      	movs	r1, #32
 8004f56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2280      	movs	r2, #128	; 0x80
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	0018      	movs	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b004      	add	sp, #16
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2280      	movs	r2, #128	; 0x80
 8004f7a:	5c9b      	ldrb	r3, [r3, r2]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e02f      	b.n	8004fe4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	2101      	movs	r1, #1
 8004f8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2284      	movs	r2, #132	; 0x84
 8004f90:	2124      	movs	r1, #36	; 0x24
 8004f92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	438a      	bics	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 f813 	bl	8004ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2284      	movs	r2, #132	; 0x84
 8004fd6:	2120      	movs	r1, #32
 8004fd8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2280      	movs	r2, #128	; 0x80
 8004fde:	2100      	movs	r1, #0
 8004fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b004      	add	sp, #16
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	f1ffffff 	.word	0xf1ffffff

08004ff0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d108      	bne.n	8005012 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	226a      	movs	r2, #106	; 0x6a
 8005004:	2101      	movs	r1, #1
 8005006:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2268      	movs	r2, #104	; 0x68
 800500c:	2101      	movs	r1, #1
 800500e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005010:	e043      	b.n	800509a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005012:	260f      	movs	r6, #15
 8005014:	19bb      	adds	r3, r7, r6
 8005016:	2208      	movs	r2, #8
 8005018:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800501a:	200e      	movs	r0, #14
 800501c:	183b      	adds	r3, r7, r0
 800501e:	2208      	movs	r2, #8
 8005020:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	0e5b      	lsrs	r3, r3, #25
 800502a:	b2da      	uxtb	r2, r3
 800502c:	240d      	movs	r4, #13
 800502e:	193b      	adds	r3, r7, r4
 8005030:	2107      	movs	r1, #7
 8005032:	400a      	ands	r2, r1
 8005034:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	0f5b      	lsrs	r3, r3, #29
 800503e:	b2da      	uxtb	r2, r3
 8005040:	250c      	movs	r5, #12
 8005042:	197b      	adds	r3, r7, r5
 8005044:	2107      	movs	r1, #7
 8005046:	400a      	ands	r2, r1
 8005048:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800504a:	183b      	adds	r3, r7, r0
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	197a      	adds	r2, r7, r5
 8005050:	7812      	ldrb	r2, [r2, #0]
 8005052:	4914      	ldr	r1, [pc, #80]	; (80050a4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005054:	5c8a      	ldrb	r2, [r1, r2]
 8005056:	435a      	muls	r2, r3
 8005058:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800505a:	197b      	adds	r3, r7, r5
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005060:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005062:	0019      	movs	r1, r3
 8005064:	f7fb f8d6 	bl	8000214 <__divsi3>
 8005068:	0003      	movs	r3, r0
 800506a:	b299      	uxth	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	226a      	movs	r2, #106	; 0x6a
 8005070:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005072:	19bb      	adds	r3, r7, r6
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	193a      	adds	r2, r7, r4
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	490a      	ldr	r1, [pc, #40]	; (80050a4 <UARTEx_SetNbDataToProcess+0xb4>)
 800507c:	5c8a      	ldrb	r2, [r1, r2]
 800507e:	435a      	muls	r2, r3
 8005080:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005082:	193b      	adds	r3, r7, r4
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005088:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800508a:	0019      	movs	r1, r3
 800508c:	f7fb f8c2 	bl	8000214 <__divsi3>
 8005090:	0003      	movs	r3, r0
 8005092:	b299      	uxth	r1, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2268      	movs	r2, #104	; 0x68
 8005098:	5299      	strh	r1, [r3, r2]
}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	46bd      	mov	sp, r7
 800509e:	b005      	add	sp, #20
 80050a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	08005254 	.word	0x08005254
 80050a8:	0800525c 	.word	0x0800525c

080050ac <__libc_init_array>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	2600      	movs	r6, #0
 80050b0:	4d0c      	ldr	r5, [pc, #48]	; (80050e4 <__libc_init_array+0x38>)
 80050b2:	4c0d      	ldr	r4, [pc, #52]	; (80050e8 <__libc_init_array+0x3c>)
 80050b4:	1b64      	subs	r4, r4, r5
 80050b6:	10a4      	asrs	r4, r4, #2
 80050b8:	42a6      	cmp	r6, r4
 80050ba:	d109      	bne.n	80050d0 <__libc_init_array+0x24>
 80050bc:	2600      	movs	r6, #0
 80050be:	f000 f821 	bl	8005104 <_init>
 80050c2:	4d0a      	ldr	r5, [pc, #40]	; (80050ec <__libc_init_array+0x40>)
 80050c4:	4c0a      	ldr	r4, [pc, #40]	; (80050f0 <__libc_init_array+0x44>)
 80050c6:	1b64      	subs	r4, r4, r5
 80050c8:	10a4      	asrs	r4, r4, #2
 80050ca:	42a6      	cmp	r6, r4
 80050cc:	d105      	bne.n	80050da <__libc_init_array+0x2e>
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
 80050d0:	00b3      	lsls	r3, r6, #2
 80050d2:	58eb      	ldr	r3, [r5, r3]
 80050d4:	4798      	blx	r3
 80050d6:	3601      	adds	r6, #1
 80050d8:	e7ee      	b.n	80050b8 <__libc_init_array+0xc>
 80050da:	00b3      	lsls	r3, r6, #2
 80050dc:	58eb      	ldr	r3, [r5, r3]
 80050de:	4798      	blx	r3
 80050e0:	3601      	adds	r6, #1
 80050e2:	e7f2      	b.n	80050ca <__libc_init_array+0x1e>
 80050e4:	08005264 	.word	0x08005264
 80050e8:	08005264 	.word	0x08005264
 80050ec:	08005264 	.word	0x08005264
 80050f0:	08005268 	.word	0x08005268

080050f4 <memset>:
 80050f4:	0003      	movs	r3, r0
 80050f6:	1882      	adds	r2, r0, r2
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d100      	bne.n	80050fe <memset+0xa>
 80050fc:	4770      	bx	lr
 80050fe:	7019      	strb	r1, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	e7f9      	b.n	80050f8 <memset+0x4>

08005104 <_init>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr

08005110 <_fini>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr
